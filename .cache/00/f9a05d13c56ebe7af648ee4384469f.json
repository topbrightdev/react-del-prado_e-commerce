{"id":"../node_modules/websocket-driver/lib/websocket/driver/draft76.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/package.json","includedInParent":true,"mtime":1594570878394},{"name":"./base","loc":{"line":3,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/draft76.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/base.js"},{"name":"./draft75","loc":{"line":4,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/draft76.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/draft75.js"},{"name":"crypto","loc":{"line":5,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/draft76.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/crypto-browserify/index.js"},{"name":"util","loc":{"line":6,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/draft76.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"buffer","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/draft76.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nvar Base = require('./base'),\n    Draft75 = require('./draft75'),\n    crypto = require('crypto'),\n    util = require('util');\n\nvar numberFromKey = function (key) {\n  return parseInt(key.match(/[0-9]/g).join(''), 10);\n};\n\nvar spacesInKey = function (key) {\n  return key.match(/ /g).length;\n};\n\nvar Draft76 = function (request, url, options) {\n  Draft75.apply(this, arguments);\n  this._stage = -1;\n  this._body = [];\n  this.version = 'hixie-76';\n\n  this._headers.clear();\n\n  this._headers.set('Upgrade', 'WebSocket');\n\n  this._headers.set('Connection', 'Upgrade');\n\n  this._headers.set('Sec-WebSocket-Origin', this._request.headers.origin);\n\n  this._headers.set('Sec-WebSocket-Location', this.url);\n};\n\nutil.inherits(Draft76, Draft75);\nvar instance = {\n  BODY_SIZE: 8,\n  start: function () {\n    if (!Draft75.prototype.start.call(this)) return false;\n    this._started = true;\n\n    this._sendHandshakeBody();\n\n    return true;\n  },\n  close: function () {\n    if (this.readyState === 3) return false;\n\n    this._write(new Buffer([0xFF, 0x00]));\n\n    this.readyState = 3;\n    this.emit('close', new Base.CloseEvent(null, null));\n    return true;\n  },\n  _handshakeResponse: function () {\n    var headers = this._request.headers,\n        key1 = headers['sec-websocket-key1'],\n        number1 = numberFromKey(key1),\n        spaces1 = spacesInKey(key1),\n        key2 = headers['sec-websocket-key2'],\n        number2 = numberFromKey(key2),\n        spaces2 = spacesInKey(key2);\n\n    if (number1 % spaces1 !== 0 || number2 % spaces2 !== 0) {\n      this.emit('error', new Error('Client sent invalid Sec-WebSocket-Key headers'));\n      this.close();\n      return null;\n    }\n\n    this._keyValues = [number1 / spaces1, number2 / spaces2];\n    var start = 'HTTP/1.1 101 WebSocket Protocol Handshake',\n        headers = [start, this._headers.toString(), ''];\n    return new Buffer(headers.join('\\r\\n'), 'binary');\n  },\n  _handshakeSignature: function () {\n    if (this._body.length < this.BODY_SIZE) return null;\n    var md5 = crypto.createHash('md5'),\n        buffer = new Buffer(8 + this.BODY_SIZE);\n    buffer.writeUInt32BE(this._keyValues[0], 0);\n    buffer.writeUInt32BE(this._keyValues[1], 4);\n    new Buffer(this._body).copy(buffer, 8, 0, this.BODY_SIZE);\n    md5.update(buffer);\n    return new Buffer(md5.digest('binary'), 'binary');\n  },\n  _sendHandshakeBody: function () {\n    if (!this._started) return;\n\n    var signature = this._handshakeSignature();\n\n    if (!signature) return;\n\n    this._write(signature);\n\n    this._stage = 0;\n\n    this._open();\n\n    if (this._body.length > this.BODY_SIZE) this.parse(this._body.slice(this.BODY_SIZE));\n  },\n  _parseLeadingByte: function (octet) {\n    if (octet !== 0xFF) return Draft75.prototype._parseLeadingByte.call(this, octet);\n    this._closing = true;\n    this._length = 0;\n    this._stage = 1;\n  }\n};\n\nfor (var key in instance) Draft76.prototype[key] = instance[key];\n\nmodule.exports = Draft76;"},"sourceMaps":null,"error":null,"hash":"631af0cc6b0f39d61ccb9c99c9165464","cacheData":{"env":{}}}