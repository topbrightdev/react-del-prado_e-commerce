{"id":"../node_modules/webpack/lib/DllPlugin.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/package.json","includedInParent":true,"mtime":1594578778161},{"name":"./DllEntryPlugin","loc":{"line":7,"column":31},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/DllPlugin.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/DllEntryPlugin.js"},{"name":"./FlagAllModulesAsUsedPlugin","loc":{"line":8,"column":43},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/DllPlugin.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/FlagAllModulesAsUsedPlugin.js"},{"name":"./LibManifestPlugin","loc":{"line":9,"column":34},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/DllPlugin.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/LibManifestPlugin.js"},{"name":"schema-utils","loc":{"line":11,"column":32},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/DllPlugin.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/schema-utils/src/index.js"},{"name":"../schemas/plugins/DllPlugin.json","loc":{"line":12,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/DllPlugin.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/schemas/plugins/DllPlugin.json"}],"generated":{"js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DllEntryPlugin = require(\"./DllEntryPlugin\");\n\nvar FlagAllModulesAsUsedPlugin = require(\"./FlagAllModulesAsUsedPlugin\");\n\nvar LibManifestPlugin = require(\"./LibManifestPlugin\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/DllPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n\n\nvar DllPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {DllPluginOptions} options options object\n   */\n  function DllPlugin(options) {\n    _classCallCheck(this, DllPlugin);\n\n    validateOptions(schema, options, \"Dll Plugin\");\n    this.options = options;\n  }\n\n  _createClass(DllPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.entryOption.tap(\"DllPlugin\", function (context, entry) {\n        var itemToPlugin = function itemToPlugin(item, name) {\n          if (Array.isArray(item)) {\n            return new DllEntryPlugin(context, item, name);\n          }\n\n          throw new Error(\"DllPlugin: supply an Array as entry\");\n        };\n\n        if (typeof entry === \"object\" && !Array.isArray(entry)) {\n          Object.keys(entry).forEach(function (name) {\n            itemToPlugin(entry[name], name).apply(compiler);\n          });\n        } else {\n          itemToPlugin(entry, \"main\").apply(compiler);\n        }\n\n        return true;\n      });\n      new LibManifestPlugin(this.options).apply(compiler);\n\n      if (!this.options.entryOnly) {\n        new FlagAllModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n      }\n    }\n  }]);\n\n  return DllPlugin;\n}();\n\nmodule.exports = DllPlugin;"},"sourceMaps":null,"error":null,"hash":"dfe95fa1e8e93c0fe8272300adfba338","cacheData":{"env":{}}}