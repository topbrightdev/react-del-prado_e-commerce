{"id":"../config/paths.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"path","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/paths.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"fs","loc":{"line":4,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/paths.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"url","loc":{"line":5,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/paths.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/url/url.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/paths.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar url = require('url'); // Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebook/create-react-app/issues/637\n\n\nvar appDirectory = fs.realpathSync(process.cwd());\n\nvar resolveApp = function resolveApp(relativePath) {\n  return path.resolve(appDirectory, relativePath);\n};\n\nvar envPublicUrl = undefined;\n\nfunction ensureSlash(inputPath, needsSlash) {\n  var hasSlash = inputPath.endsWith('/');\n\n  if (hasSlash && !needsSlash) {\n    return inputPath.substr(0, inputPath.length - 1);\n  } else if (!hasSlash && needsSlash) {\n    return \"\".concat(inputPath, \"/\");\n  } else {\n    return inputPath;\n  }\n}\n\nvar getPublicUrl = function getPublicUrl(appPackageJson) {\n  return envPublicUrl || require(appPackageJson).homepage;\n}; // We use `PUBLIC_URL` environment variable or \"homepage\" field to infer\n// \"public path\" at which the app is served.\n// Webpack needs to know it to put the right <script> hrefs into HTML even in\n// single-page apps that may serve index.html for nested URLs like /todos/42.\n// We can't use a relative path in HTML because we don't want to load something\n// like /todos/42/static/js/bundle.7289d.js. We have to know the root.\n\n\nfunction getServedPath(appPackageJson) {\n  var publicUrl = getPublicUrl(appPackageJson);\n  var servedUrl = envPublicUrl || (publicUrl ? url.parse(publicUrl).pathname : '/');\n  return ensureSlash(servedUrl, true);\n}\n\nvar moduleFileExtensions = ['web.mjs', 'mjs', 'web.js', 'js', 'web.ts', 'ts', 'web.tsx', 'tsx', 'json', 'web.jsx', 'jsx']; // Resolve file paths in the same order as webpack\n\nvar resolveModule = function resolveModule(resolveFn, filePath) {\n  var extension = moduleFileExtensions.find(function (extension) {\n    return fs.existsSync(resolveFn(\"\".concat(filePath, \".\").concat(extension)));\n  });\n\n  if (extension) {\n    return resolveFn(\"\".concat(filePath, \".\").concat(extension));\n  }\n\n  return resolveFn(\"\".concat(filePath, \".js\"));\n}; // config after eject: we're in ./config/\n\n\nmodule.exports = {\n  dotenv: resolveApp('.env'),\n  appPath: resolveApp('.'),\n  appBuild: resolveApp('build'),\n  appPublic: resolveApp('public'),\n  appHtml: resolveApp('public/index.html'),\n  appIndexJs: resolveModule(resolveApp, 'src/index'),\n  appPackageJson: resolveApp('package.json'),\n  appSrc: resolveApp('src'),\n  appTsConfig: resolveApp('tsconfig.json'),\n  yarnLockFile: resolveApp('yarn.lock'),\n  testsSetup: resolveModule(resolveApp, 'src/setupTests'),\n  proxySetup: resolveApp('src/setupProxy.js'),\n  appNodeModules: resolveApp('node_modules'),\n  publicUrl: getPublicUrl(resolveApp('package.json')),\n  servedPath: getServedPath(resolveApp('package.json'))\n};\nmodule.exports.moduleFileExtensions = moduleFileExtensions;"},"sourceMaps":null,"error":null,"hash":"4594848202a94de128dae9835bf7a67b","cacheData":{"env":{}}}