{"id":"../node_modules/inquirer/lib/utils/paginator.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/package.json","includedInParent":true,"mtime":1594570878526},{"name":"lodash","loc":{"line":3,"column":16},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/paginator.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/lodash/lodash.js"},{"name":"chalk","loc":{"line":4,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/paginator.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/chalk/index.js"}],"generated":{"js":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _ = require('lodash');\n\nvar chalk = require('chalk');\n/**\n * The paginator keeps track of a pointer index in a list and returns\n * a subset of the choices if the list is too long.\n */\n\n\nvar Paginator = /*#__PURE__*/function () {\n  function Paginator(screen) {\n    _classCallCheck(this, Paginator);\n\n    this.pointer = 0;\n    this.lastIndex = 0;\n    this.screen = screen;\n  }\n\n  _createClass(Paginator, [{\n    key: \"paginate\",\n    value: function paginate(output, active, pageSize) {\n      pageSize = pageSize || 7;\n      var middleOfList = Math.floor(pageSize / 2);\n      var lines = output.split('\\n');\n\n      if (this.screen) {\n        lines = this.screen.breakLines(lines);\n        active = _.sum(lines.map(function (lineParts) {\n          return lineParts.length;\n        }).splice(0, active));\n        lines = _.flatten(lines);\n      } // Make sure there's enough lines to paginate\n\n\n      if (lines.length <= pageSize) {\n        return output;\n      } // Move the pointer only when the user go down and limit it to the middle of the list\n\n\n      if (this.pointer < middleOfList && this.lastIndex < active && active - this.lastIndex < pageSize) {\n        this.pointer = Math.min(middleOfList, this.pointer + active - this.lastIndex);\n      }\n\n      this.lastIndex = active; // Duplicate the lines so it give an infinite list look\n\n      var infinite = _.flatten([lines, lines, lines]);\n\n      var topIndex = Math.max(0, active + lines.length - this.pointer);\n      var section = infinite.splice(topIndex, pageSize).join('\\n');\n      return section + '\\n' + chalk.dim('(Move up and down to reveal more choices)');\n    }\n  }]);\n\n  return Paginator;\n}();\n\nmodule.exports = Paginator;"},"sourceMaps":null,"error":null,"hash":"390f2467adbf26c40b763796049f48a0","cacheData":{"env":{}}}