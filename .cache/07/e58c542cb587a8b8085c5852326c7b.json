{"id":"../node_modules/renderkid/lib/tools.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/renderkid/package.json","includedInParent":true,"mtime":1594570878742},{"name":"htmlparser2","loc":{"line":4,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/renderkid/lib/tools.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/htmlparser2/lib/index.js"},{"name":"utila","loc":{"line":6,"column":17},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/renderkid/lib/tools.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/utila/lib/utila.js"},{"name":"dom-converter","loc":{"line":8,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/renderkid/lib/tools.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/dom-converter/lib/domConverter.js"},{"name":"tty","loc":{"line":68,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/renderkid/lib/tools.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/tty-browserify/index.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/renderkid/lib/tools.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n// Generated by CoffeeScript 1.9.3\nvar htmlparser, object, objectToDom, self;\n\nhtmlparser = require('htmlparser2');\n\nobject = require('utila').object;\n\nobjectToDom = require('dom-converter').objectToDom;\n\nmodule.exports = self = {\n  repeatString: function(str, times) {\n    var i, j, output, ref;\n    output = '';\n    for (i = j = 0, ref = times; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n      output += str;\n    }\n    return output;\n  },\n  toDom: function(subject) {\n    if (typeof subject === 'string') {\n      return self.stringToDom(subject);\n    } else if (object.isBareObject(subject)) {\n      return self._objectToDom(subject);\n    } else {\n      throw Error(\"tools.toDom() only supports strings and objects\");\n    }\n  },\n  stringToDom: function(string) {\n    var handler, parser;\n    handler = new htmlparser.DomHandler;\n    parser = new htmlparser.Parser(handler);\n    parser.write(string);\n    parser.end();\n    return handler.dom;\n  },\n  _fixQuotesInDom: function(input) {\n    var j, len, node;\n    if (Array.isArray(input)) {\n      for (j = 0, len = input.length; j < len; j++) {\n        node = input[j];\n        self._fixQuotesInDom(node);\n      }\n      return input;\n    }\n    node = input;\n    if (node.type === 'text') {\n      return node.data = self._quoteNodeText(node.data);\n    } else {\n      return self._fixQuotesInDom(node.children);\n    }\n  },\n  objectToDom: function(o) {\n    if (!Array.isArray(o)) {\n      if (!object.isBareObject(o)) {\n        throw Error(\"objectToDom() only accepts a bare object or an array\");\n      }\n    }\n    return self._fixQuotesInDom(objectToDom(o));\n  },\n  quote: function(str) {\n    return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\\"/g, '&quot;').replace(/\\ /g, '&sp;').replace(/\\n/g, '<br />');\n  },\n  _quoteNodeText: function(text) {\n    return String(text).replace(/\\&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\\"/g, '&quot;').replace(/\\ /g, '&sp;').replace(/\\n/g, \"&nl;\");\n  },\n  getCols: function() {\n    var cols, tty;\n    tty = require('tty');\n    cols = (function() {\n      try {\n        if (tty.isatty(1) && tty.isatty(2)) {\n          if (process.stdout.getWindowSize) {\n            return process.stdout.getWindowSize(1)[0];\n          } else if (tty.getWindowSize) {\n            return tty.getWindowSize()[1];\n          } else if (process.stdout.columns) {\n            return process.stdout.columns;\n          }\n        }\n      } catch (_error) {}\n    })();\n    if (typeof cols === 'number' && cols > 30) {\n      return cols;\n    } else {\n      return 80;\n    }\n  }\n};\n"},"sourceMaps":null,"error":null,"hash":"019beedd9c3e0c2bdac29e699a850d43","cacheData":{"env":{}}}