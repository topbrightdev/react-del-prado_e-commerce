{"id":"../node_modules/handle-thing/lib/handle.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/handle-thing/package.json","includedInParent":true,"mtime":1594570879374},{"name":"assert","loc":{"line":1,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/handle-thing/lib/handle.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/assert/assert.js"},{"name":"util","loc":{"line":2,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/handle-thing/lib/handle.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"events","loc":{"line":4,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/handle-thing/lib/handle.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/events/events.js"},{"name":"buffer","loc":{"line":5,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/handle-thing/lib/handle.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/buffer/index.js"},{"name":"./queue","loc":{"line":7,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/handle-thing/lib/handle.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/handle-thing/lib/queue.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/handle-thing/lib/handle.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"\nvar process = require(\"process\");\nvar global = arguments[3];\nvar assert = require('assert');\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\nvar Buffer = require('buffer').Buffer;\n\nvar Queue = require('./queue');\n\n// Node.js version\nvar mode = /^v0\\.8\\./.test(process.version) ? 'rusty' :\n           /^v0\\.(9|10)\\./.test(process.version) ? 'old' :\n           'modern';\n\nfunction Handle(stream, options) {\n  EventEmitter.call(this);\n\n  this._stream = stream;\n  this._flowing = false;\n  this._reading = false;\n  this._options = options || {};\n\n  this.onread = null;\n\n  // Pending requests\n  this.pending = new Queue();\n\n  // Start handle once `onread` is set\n  if (mode === 'rusty') {\n    var self = this;\n    Object.defineProperty(this, 'onread', {\n      set: function(value) {\n        Object.defineProperty(self, 'onread', {\n          value: value\n        });\n        process.nextTick(function() {\n          self.readStart();\n        });\n      }\n    });\n  }\n\n  // NOTE: v0.8 has some odd .pause()/.resume() semantics in http.js\n  if (mode === 'rusty')\n    this.writeQueueSize = 0;\n  else if (mode !== 'modern')\n    this.writeQueueSize = 1;\n\n  if (mode === 'rusty') {\n    if (this._stream)\n      this._rustyInit();\n    else\n      this.once('stream', this._rustyInit);\n  }\n}\nutil.inherits(Handle, EventEmitter);\nmodule.exports = Handle;\n\nHandle.mode = mode;\n\nHandle.create = function create(stream, options) {\n  return new Handle(stream, options);\n};\n\nHandle.prototype._queueReq = function _queueReq(type, req) {\n  return this.pending.append(type, req);\n};\n\nHandle.prototype._pendingList = function _pendingList() {\n  var list = [];\n  while (!this.pending.isEmpty())\n    list.push(this.pending.first().dequeue());\n  return list;\n};\n\nHandle.prototype.setStream = function setStream(stream) {\n  assert(this._stream === null, 'Can\\'t set stream two times');\n  this._stream = stream;\n\n  this.emit('stream', stream);\n};\n\nHandle.prototype.readStart = function readStart() {\n  this._reading = true;\n\n  if (!this._stream) {\n    this.once('stream', this.readStart);\n    return 0;\n  }\n\n  if (!this._flowing) {\n    this._flowing = true;\n    this._flow();\n  }\n\n  this._stream.resume();\n  return 0;\n};\n\nHandle.prototype.readStop = function readStop() {\n  this._reading = false;\n\n  if (!this._stream) {\n    this.once('stream', this.readStop);\n    return 0;\n  }\n  this._stream.pause();\n  return 0;\n};\n\nif (mode === 'modern') {\n  var uv = process.binding('uv');\n\n  Handle.prototype._flow = function flow() {\n    var self = this;\n    this._stream.on('data', function(chunk) {\n      self.onread(chunk.length, chunk);\n    });\n\n    this._stream.on('end', function() {\n      self.onread(uv.UV_EOF, new Buffer(0));\n    });\n\n    this._stream.on('close', function() {\n      setImmediate(function() {\n        if (self._reading)\n          self.onread(uv.UV_ECONNRESET, new Buffer(0));\n      });\n    });\n  };\n\n  Handle.prototype._close = function _close() {\n    var list = this._pendingList();\n\n    var self = this;\n    setImmediate(function() {\n      for (var i = 0; i < list.length; i++) {\n        var req = list[i];\n        req.oncomplete(uv.UV_ECANCELED, self, req);\n      }\n    });\n\n    this.readStop();\n  };\n} else if (mode === 'old') {\n  Handle.prototype._flow = function flow() {\n    var self = this;\n    this._stream.on('data', function(chunk) {\n      self.onread(chunk, 0, chunk.length);\n    });\n\n    this._stream.on('end', function() {\n      var errno = process._errno;\n      process._errno = 'EOF';\n      self.onread(null, 0, 0);\n      if (process._errno === 'EOF')\n        process._errno = errno;\n    });\n\n    this._stream.on('close', function() {\n      setImmediate(function() {\n        if (!self._reading)\n          return;\n\n        var errno = process._errno;\n        process._errno = 'ECONNRESET';\n        self.onread(null, 0, 0);\n        if (process._errno === 'ECONNRESET')\n          process._errno = errno;\n      });\n    });\n  };\n\n  Handle.prototype._close = function _close() {\n    var list = this._pendingList();\n\n    var self = this;\n    setImmediate(function() {\n      for (var i = 0; i < list.length; i++) {\n        process._errno = 'CANCELED';\n        var req = list[i];\n        req.oncomplete(-1, self, req);\n      }\n    });\n\n    this.readStop();\n  };\n} else {\n  Handle.prototype._rustyInit = function _rustyInit() {\n    var self = this;\n\n    this._stream.on('close', function() {\n      process.nextTick(function() {\n        if (!self._reading)\n          return;\n\n        var errno = global.errno;\n        global.errno = 'ECONNRESET';\n        self.onread(null, 0, 0);\n        if (global.errno === 'ECONNRESET')\n          global.errno = errno;\n      });\n    });\n  };\n\n  Handle.prototype._flow = function flow() {\n    var self = this;\n    this._stream.on('data', function(chunk) {\n      self.onread(chunk, 0, chunk.length);\n    });\n\n    this._stream.on('end', function() {\n      var errno = global.errno;\n      global.errno = 'EOF';\n      self.onread(null, 0, 0);\n      if (global.errno === 'EOF')\n        global.errno = errno;\n    });\n  };\n\n  Handle.prototype._close = function _close() {\n    var list = this._pendingList();\n\n    var self = this;\n    process.nextTick(function() {\n      for (var i = 0; i < list.length; i++) {\n        var req = list[i];\n        global.errno = 'CANCELED';\n        req.oncomplete(-1, self, req);\n      }\n    });\n\n    this.readStop();\n  };\n}\n\nif (mode === 'modern') {\n  Handle.prototype.shutdown = function shutdown(req) {\n    var wrap = this._queueReq('shutdown', req);\n\n    if (!this._stream) {\n      this.once('stream', function() {\n        this._shutdown(wrap);\n      });\n      return 0;\n    }\n\n    return this._shutdown(wrap);\n  };\n\n  Handle.prototype._shutdown = function _shutdown(wrap) {\n    var self = this;\n    this._stream.end(function() {\n      var req = wrap.dequeue();\n      if (!req)\n        return;\n\n      req.oncomplete(0, self, req);\n    });\n    return 0;\n  };\n} else {\n  Handle.prototype.shutdown = function shutdown(req) {\n    if (!req)\n      req = {};\n\n    var wrap = this._queueReq('shutdown', req);\n\n    if (!this._stream) {\n      this.once('stream', function() {\n        this._shutdown(wrap);\n      });\n      return req;\n    }\n\n    this._shutdown(wrap);\n\n    return req;\n  };\n\n  Handle.prototype._shutdown = function _shutdown(wrap) {\n    var self = this;\n    this._stream.end(function() {\n      var req = wrap.dequeue();\n      if (!req)\n        return;\n      req.oncomplete(0, self, req);\n    });\n  };\n}\n\nif (mode !== 'rusty') {\n  Handle.prototype.close = function close(callback) {\n    this._close();\n\n    if (!this._stream) {\n      this.once('stream', function() {\n        this.close(callback);\n      });\n      return 0;\n    }\n\n    if (this._options.close)\n      this._options.close(callback);\n    else\n      process.nextTick(callback);\n\n    return 0;\n  };\n} else {\n  Handle.prototype.close = function close() {\n    this._close();\n\n    if (!this._stream)\n      this.once('stream', this.close);\n    else if (this._options.close)\n      this._options.close(function() {});\n\n    return 0;\n  };\n}\n\nif (mode === 'modern') {\n  Handle.prototype.writeEnc = function writeEnc(req, data, enc) {\n    var wrap = this._queueReq('write', req);\n\n    if (!this._stream) {\n      this.once('stream', function() {\n        this._writeEnc(wrap, req, data, enc);\n      });\n\n      return 0;\n    }\n\n    return this._writeEnc(wrap, req, data, enc);\n  };\n\n  Handle.prototype._writeEnc = function _writeEnc(wrap, req, data, enc) {\n    var self = this;\n\n    req.async = true;\n    req.bytes = data.length;\n\n    if (wrap.isEmpty())\n      return 0;\n\n    this._stream.write(data, enc, function() {\n      var req = wrap.dequeue();\n      if (!req)\n        return;\n      req.oncomplete(0, self, req);\n    });\n\n    return 0;\n  };\n} else {\n  Handle.prototype.writeEnc = function writeEnc(data, ignored, enc, req) {\n    if (!req)\n      req = { bytes: data.length };\n\n    var wrap = this._queueReq('write', req);\n\n    if (!this._stream) {\n      this.once('stream', function() {\n        this._writeEnc(data, ignored, enc, wrap);\n      });\n      return req;\n    }\n\n    this._writeEnc(data, ignored, enc, wrap);\n    return req;\n  };\n\n  Handle.prototype._writeEnc = function _writeEnc(data, ignored, enc, wrap) {\n    var self = this;\n    var buffer = new Buffer(data, enc);\n\n    if (wrap.isEmpty())\n      return;\n\n    this._stream.write(buffer, function() {\n      var req = wrap.dequeue();\n      if (!req)\n        return;\n      req.oncomplete(0, self, req);\n    });\n  };\n}\n\nHandle.prototype.writeBuffer = function writeBuffer(req, data) {\n  return this.writeEnc(req, data, null);\n};\n\nHandle.prototype.writeAsciiString = function writeAsciiString(req, data) {\n  return this.writeEnc(req, data, 'ascii');\n};\n\nHandle.prototype.writeUtf8String = function writeUtf8String(req, data) {\n  return this.writeEnc(req, data, 'utf8');\n};\n\nHandle.prototype.writeUcs2String = function writeUcs2String(req, data) {\n  return this.writeEnc(req, data, 'ucs2');\n};\n\nHandle.prototype.writeBinaryString = function writeBinaryString(req, data) {\n  return this.writeEnc(req, data, 'binary');\n};\n\nHandle.prototype.writeLatin1String = function writeLatin1String(req, data) {\n  return this.writeEnc(req, data, 'binary');\n};\n\n// v0.8\nHandle.prototype.getsockname = function getsockname() {\n  if (this._options.getPeerName)\n    return this._options.getPeerName();\n  return null;\n};\n\nif (mode === 'modern') {\n  Handle.prototype.getpeername = function getpeername(out) {\n    var res = this.getsockname();\n    if (!res)\n      return -1;\n\n    Object.keys(res).forEach(function(key) {\n      out[key] = res[key];\n    });\n\n    return 0;\n  };\n} else {\n  // v0.10\n  Handle.prototype.getpeername = function getpeername() {\n    return this.getsockname();\n  };\n}\n"},"sourceMaps":null,"error":null,"hash":"ab878bfb9eb1f081efe5b5af86e1331e","cacheData":{"env":{}}}