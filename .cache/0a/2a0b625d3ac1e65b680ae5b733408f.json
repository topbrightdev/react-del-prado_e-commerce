{"id":"../node_modules/webpack/node_modules/glob-parent/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/glob-parent/package.json","includedInParent":true,"mtime":1594578778153},{"name":"is-glob","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/glob-parent/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/is-glob/index.js"},{"name":"path","loc":{"line":4,"column":31},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/glob-parent/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"os","loc":{"line":5,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/glob-parent/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/os-browserify/browser.js"}],"generated":{"js":"'use strict';\n\nvar isGlob = require('is-glob');\n\nvar pathPosixDirname = require('path').posix.dirname;\n\nvar isWin32 = require('os').platform() === 'win32';\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar enclosure = /[\\{\\[].*[\\/]*.*[\\}\\]]$/;\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n */\n\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({\n    flipBackslashes: true\n  }, opts); // flip windows path separators\n\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  } // special case for strings ending in enclosure containing path separator\n\n\n  if (enclosure.test(str)) {\n    str += slash;\n  } // preserves full path in case of trailing path separator\n\n\n  str += 'a'; // remove path parts that are globby\n\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlob(str) || globby.test(str)); // remove escape chars and return result\n\n\n  return str.replace(escaped, '$1');\n};"},"sourceMaps":null,"error":null,"hash":"597bede3e7a94a48e807eab9c8db7e5b","cacheData":{"env":{}}}