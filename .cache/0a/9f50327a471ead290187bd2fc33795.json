{"id":"../node_modules/spdy-transport/lib/spdy-transport/protocol/http2/framer.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/package.json","includedInParent":true,"mtime":1594570878662},{"name":"../../../spdy-transport","loc":{"line":3,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport.js"},{"name":"./","loc":{"line":5,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/index.js"},{"name":"assert","loc":{"line":7,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/assert/assert.js"},{"name":"util","loc":{"line":8,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"wbuf","loc":{"line":9,"column":26},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/wbuf/index.js"},{"name":"obuf","loc":{"line":10,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/obuf/index.js"},{"name":"debug","loc":{"line":12,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/node_modules/debug/src/browser.js"}],"generated":{"js":"'use strict'\n\nvar transport = require('../../../spdy-transport')\nvar base = transport.protocol.base\nvar constants = require('./').constants\n\nvar assert = require('assert')\nvar util = require('util')\nvar WriteBuffer = require('wbuf')\nvar OffsetBuffer = require('obuf')\nvar debug = require('debug')('spdy:framer')\nvar debugExtra = require('debug')('spdy:framer:extra')\n\nfunction Framer (options) {\n  base.Framer.call(this, options)\n\n  this.maxFrameSize = constants.INITIAL_MAX_FRAME_SIZE\n}\nutil.inherits(Framer, base.Framer)\nmodule.exports = Framer\n\nFramer.create = function create (options) {\n  return new Framer(options)\n}\n\nFramer.prototype.setMaxFrameSize = function setMaxFrameSize (size) {\n  this.maxFrameSize = size\n}\n\nFramer.prototype._frame = function _frame (frame, body, callback) {\n  debug('id=%d type=%s', frame.id, frame.type)\n\n  var buffer = new WriteBuffer()\n\n  buffer.reserve(constants.FRAME_HEADER_SIZE)\n  var len = buffer.skip(3)\n  buffer.writeUInt8(constants.frameType[frame.type])\n  buffer.writeUInt8(frame.flags)\n  buffer.writeUInt32BE(frame.id & 0x7fffffff)\n\n  body(buffer)\n\n  var frameSize = buffer.size - constants.FRAME_HEADER_SIZE\n  len.writeUInt24BE(frameSize)\n\n  var chunks = buffer.render()\n  var toWrite = {\n    stream: frame.id,\n    priority: frame.priority === undefined ? false : frame.priority,\n    chunks: chunks,\n    callback: callback\n  }\n\n  if (this.window && frame.type === 'DATA') {\n    var self = this\n    this._resetTimeout()\n    this.window.send.update(-frameSize, function () {\n      self._resetTimeout()\n      self.schedule(toWrite)\n    })\n  } else {\n    this._resetTimeout()\n    this.schedule(toWrite)\n  }\n\n  return chunks\n}\n\nFramer.prototype._split = function _split (frame) {\n  var buf = new OffsetBuffer()\n  for (var i = 0; i < frame.chunks.length; i++) { buf.push(frame.chunks[i]) }\n\n  var frames = []\n  while (!buf.isEmpty()) {\n    // First frame may have reserved bytes in it\n    var size = this.maxFrameSize\n    if (frames.length === 0) {\n      size -= frame.reserve\n    }\n    size = Math.min(size, buf.size)\n\n    var frameBuf = buf.clone(size)\n    buf.skip(size)\n\n    frames.push({\n      size: frameBuf.size,\n      chunks: frameBuf.toChunks()\n    })\n  }\n\n  return frames\n}\n\nFramer.prototype._continuationFrame = function _continuationFrame (frame,\n                                                                  body,\n                                                                  callback) {\n  var frames = this._split(frame)\n\n  frames.forEach(function (subFrame, i) {\n    var isFirst = i === 0\n    var isLast = i === frames.length - 1\n\n    var flags = isLast ? constants.flags.END_HEADERS : 0\n\n    // PRIORITY and friends\n    if (isFirst) {\n      flags |= frame.flags\n    }\n\n    this._frame({\n      id: frame.id,\n      priority: false,\n      type: isFirst ? frame.type : 'CONTINUATION',\n      flags: flags\n    }, function (buf) {\n      // Fill those reserved bytes\n      if (isFirst && body) { body(buf) }\n\n      buf.reserve(subFrame.size)\n      for (var i = 0; i < subFrame.chunks.length; i++) { buf.copyFrom(subFrame.chunks[i]) }\n    }, isLast ? callback : null)\n  }, this)\n\n  if (frames.length === 0) {\n    this._frame({\n      id: frame.id,\n      priority: false,\n      type: frame.type,\n      flags: frame.flags | constants.flags.END_HEADERS\n    }, function (buf) {\n      if (body) { body(buf) }\n    }, callback)\n  }\n}\n\nFramer.prototype._compressHeaders = function _compressHeaders (headers,\n                                                              pairs,\n                                                              callback) {\n  Object.keys(headers || {}).forEach(function (name) {\n    var lowName = name.toLowerCase()\n\n    // Not allowed in HTTP2\n    switch (lowName) {\n      case 'host':\n      case 'connection':\n      case 'keep-alive':\n      case 'proxy-connection':\n      case 'transfer-encoding':\n      case 'upgrade':\n        return\n    }\n\n    // Should be in `pairs`\n    if (/^:/.test(lowName)) {\n      return\n    }\n\n    // Do not compress, or index Cookie field (for security reasons)\n    var neverIndex = lowName === 'cookie' || lowName === 'set-cookie'\n\n    var value = headers[name]\n    if (Array.isArray(value)) {\n      for (var i = 0; i < value.length; i++) {\n        pairs.push({\n          name: lowName,\n          value: value[i] + '',\n          neverIndex: neverIndex,\n          huffman: !neverIndex\n        })\n      }\n    } else {\n      pairs.push({\n        name: lowName,\n        value: value + '',\n        neverIndex: neverIndex,\n        huffman: !neverIndex\n      })\n    }\n  })\n\n  assert(this.compress !== null, 'Framer version not initialized')\n  debugExtra('compressing headers=%j', pairs)\n  this.compress.write([ pairs ], callback)\n}\n\nFramer.prototype._isDefaultPriority = function _isDefaultPriority (priority) {\n  if (!priority) { return true }\n\n  return !priority.parent &&\n         priority.weight === constants.DEFAULT &&\n         !priority.exclusive\n}\n\nFramer.prototype._defaultHeaders = function _defaultHeaders (frame, pairs) {\n  if (!frame.path) {\n    throw new Error('`path` is required frame argument')\n  }\n\n  pairs.push({\n    name: ':method',\n    value: frame.method || base.constants.DEFAULT_METHOD\n  })\n  pairs.push({ name: ':path', value: frame.path })\n  pairs.push({ name: ':scheme', value: frame.scheme || 'https' })\n  pairs.push({\n    name: ':authority',\n    value: frame.host ||\n           (frame.headers && frame.headers.host) ||\n           base.constants.DEFAULT_HOST\n  })\n}\n\nFramer.prototype._headersFrame = function _headersFrame (kind, frame, callback) {\n  var pairs = []\n\n  if (kind === 'request') {\n    this._defaultHeaders(frame, pairs)\n  } else if (kind === 'response') {\n    pairs.push({ name: ':status', value: (frame.status || 200) + '' })\n  }\n\n  var self = this\n  this._compressHeaders(frame.headers, pairs, function (err, chunks) {\n    if (err) {\n      if (callback) {\n        return callback(err)\n      } else {\n        return self.emit('error', err)\n      }\n    }\n\n    var reserve = 0\n\n    // If priority info is present, and the values are not default ones\n    // reserve space for the priority info and add PRIORITY flag\n    var priority = frame.priority\n    if (!self._isDefaultPriority(priority)) { reserve = 5 }\n\n    var flags = reserve === 0 ? 0 : constants.flags.PRIORITY\n\n    // Mostly for testing\n    if (frame.fin) {\n      flags |= constants.flags.END_STREAM\n    }\n\n    self._continuationFrame({\n      id: frame.id,\n      type: 'HEADERS',\n      flags: flags,\n      reserve: reserve,\n      chunks: chunks\n    }, function (buf) {\n      if (reserve === 0) {\n        return\n      }\n\n      buf.writeUInt32BE(((priority.exclusive ? 0x80000000 : 0) |\n                         priority.parent) >>> 0)\n      buf.writeUInt8((priority.weight | 0) - 1)\n    }, callback)\n  })\n}\n\nFramer.prototype.requestFrame = function requestFrame (frame, callback) {\n  return this._headersFrame('request', frame, callback)\n}\n\nFramer.prototype.responseFrame = function responseFrame (frame, callback) {\n  return this._headersFrame('response', frame, callback)\n}\n\nFramer.prototype.headersFrame = function headersFrame (frame, callback) {\n  return this._headersFrame('headers', frame, callback)\n}\n\nFramer.prototype.pushFrame = function pushFrame (frame, callback) {\n  var self = this\n\n  function compress (headers, pairs, callback) {\n    self._compressHeaders(headers, pairs, function (err, chunks) {\n      if (err) {\n        if (callback) {\n          return callback(err)\n        } else {\n          return self.emit('error', err)\n        }\n      }\n\n      callback(chunks)\n    })\n  }\n\n  function sendPromise (chunks) {\n    self._continuationFrame({\n      id: frame.id,\n      type: 'PUSH_PROMISE',\n      reserve: 4,\n      chunks: chunks\n    }, function (buf) {\n      buf.writeUInt32BE(frame.promisedId)\n    })\n  }\n\n  function sendResponse (chunks, callback) {\n    var priority = frame.priority\n    var isDefaultPriority = self._isDefaultPriority(priority)\n    var flags = isDefaultPriority ? 0 : constants.flags.PRIORITY\n\n    // Mostly for testing\n    if (frame.fin) {\n      flags |= constants.flags.END_STREAM\n    }\n\n    self._continuationFrame({\n      id: frame.promisedId,\n      type: 'HEADERS',\n      flags: flags,\n      reserve: isDefaultPriority ? 0 : 5,\n      chunks: chunks\n    }, function (buf) {\n      if (isDefaultPriority) {\n        return\n      }\n\n      buf.writeUInt32BE((priority.exclusive ? 0x80000000 : 0) |\n                        priority.parent)\n      buf.writeUInt8((priority.weight | 0) - 1)\n    }, callback)\n  }\n\n  this._checkPush(function (err) {\n    if (err) {\n      return callback(err)\n    }\n\n    var pairs = {\n      promise: [],\n      response: []\n    }\n\n    self._defaultHeaders(frame, pairs.promise)\n    pairs.response.push({ name: ':status', value: (frame.status || 200) + '' })\n\n    compress(frame.headers, pairs.promise, function (promiseChunks) {\n      sendPromise(promiseChunks)\n      compress(frame.response, pairs.response, function (responseChunks) {\n        sendResponse(responseChunks, callback)\n      })\n    })\n  })\n}\n\nFramer.prototype.priorityFrame = function priorityFrame (frame, callback) {\n  this._frame({\n    id: frame.id,\n    priority: false,\n    type: 'PRIORITY',\n    flags: 0\n  }, function (buf) {\n    var priority = frame.priority\n    buf.writeUInt32BE((priority.exclusive ? 0x80000000 : 0) |\n                      priority.parent)\n    buf.writeUInt8((priority.weight | 0) - 1)\n  }, callback)\n}\n\nFramer.prototype.dataFrame = function dataFrame (frame, callback) {\n  var frames = this._split({\n    reserve: 0,\n    chunks: [ frame.data ]\n  })\n\n  var fin = frame.fin ? constants.flags.END_STREAM : 0\n\n  var self = this\n  frames.forEach(function (subFrame, i) {\n    var isLast = i === frames.length - 1\n    var flags = 0\n    if (isLast) {\n      flags |= fin\n    }\n\n    self._frame({\n      id: frame.id,\n      priority: frame.priority,\n      type: 'DATA',\n      flags: flags\n    }, function (buf) {\n      buf.reserve(subFrame.size)\n      for (var i = 0; i < subFrame.chunks.length; i++) { buf.copyFrom(subFrame.chunks[i]) }\n    }, isLast ? callback : null)\n  })\n\n  // Empty DATA\n  if (frames.length === 0) {\n    this._frame({\n      id: frame.id,\n      priority: frame.priority,\n      type: 'DATA',\n      flags: fin\n    }, function (buf) {\n      // No-op\n    }, callback)\n  }\n}\n\nFramer.prototype.pingFrame = function pingFrame (frame, callback) {\n  this._frame({\n    id: 0,\n    type: 'PING',\n    flags: frame.ack ? constants.flags.ACK : 0\n  }, function (buf) {\n    buf.copyFrom(frame.opaque)\n  }, callback)\n}\n\nFramer.prototype.rstFrame = function rstFrame (frame, callback) {\n  this._frame({\n    id: frame.id,\n    type: 'RST_STREAM',\n    flags: 0\n  }, function (buf) {\n    buf.writeUInt32BE(constants.error[frame.code])\n  }, callback)\n}\n\nFramer.prototype.prefaceFrame = function prefaceFrame (callback) {\n  debug('preface')\n  this._resetTimeout()\n  this.schedule({\n    stream: 0,\n    priority: false,\n    chunks: [ constants.PREFACE_BUFFER ],\n    callback: callback\n  })\n}\n\nFramer.prototype.settingsFrame = function settingsFrame (options, callback) {\n  var key = JSON.stringify(options)\n\n  var settings = Framer.settingsCache[key]\n  if (settings) {\n    debug('cached settings')\n    this._resetTimeout()\n    this.schedule({\n      id: 0,\n      priority: false,\n      chunks: settings,\n      callback: callback\n    })\n    return\n  }\n\n  var params = []\n  for (var i = 0; i < constants.settingsIndex.length; i++) {\n    var name = constants.settingsIndex[i]\n    if (!name) {\n      continue\n    }\n\n    // value: Infinity\n    if (!isFinite(options[name])) {\n      continue\n    }\n\n    if (options[name] !== undefined) {\n      params.push({ key: i, value: options[name] })\n    }\n  }\n\n  var bodySize = params.length * 6\n\n  var chunks = this._frame({\n    id: 0,\n    type: 'SETTINGS',\n    flags: 0\n  }, function (buffer) {\n    buffer.reserve(bodySize)\n    for (var i = 0; i < params.length; i++) {\n      var param = params[i]\n\n      buffer.writeUInt16BE(param.key)\n      buffer.writeUInt32BE(param.value)\n    }\n  }, callback)\n\n  Framer.settingsCache[key] = chunks\n}\nFramer.settingsCache = {}\n\nFramer.prototype.ackSettingsFrame = function ackSettingsFrame (callback) {\n  /* var chunks = */ this._frame({\n    id: 0,\n    type: 'SETTINGS',\n    flags: constants.flags.ACK\n  }, function (buffer) {\n    // No-op\n  }, callback)\n}\n\nFramer.prototype.windowUpdateFrame = function windowUpdateFrame (frame,\n                                                                callback) {\n  this._frame({\n    id: frame.id,\n    type: 'WINDOW_UPDATE',\n    flags: 0\n  }, function (buffer) {\n    buffer.reserve(4)\n    buffer.writeInt32BE(frame.delta)\n  }, callback)\n}\n\nFramer.prototype.goawayFrame = function goawayFrame (frame, callback) {\n  this._frame({\n    type: 'GOAWAY',\n    id: 0,\n    flags: 0\n  }, function (buf) {\n    buf.reserve(8)\n\n    // Last-good-stream-ID\n    buf.writeUInt32BE(frame.lastId & 0x7fffffff)\n    // Code\n    buf.writeUInt32BE(constants.goaway[frame.code])\n\n    // Extra debugging information\n    if (frame.extra) { buf.write(frame.extra) }\n  }, callback)\n}\n\nFramer.prototype.xForwardedFor = function xForwardedFor (frame, callback) {\n  this._frame({\n    type: 'X_FORWARDED_FOR',\n    id: 0,\n    flags: 0\n  }, function (buf) {\n    buf.write(frame.host)\n  }, callback)\n}\n"},"sourceMaps":null,"error":null,"hash":"af81da14ad2be29fac149af1bf4f2c29","cacheData":{"env":{}}}