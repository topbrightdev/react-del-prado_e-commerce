{"id":"../node_modules/spdy-transport/lib/spdy-transport/protocol/http2/parser.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/package.json","includedInParent":true,"mtime":1594570878662},{"name":"../../../spdy-transport","loc":{"line":5,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport.js"},{"name":"./","loc":{"line":8,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/index.js"},{"name":"assert","loc":{"line":10,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/assert/assert.js"},{"name":"util","loc":{"line":11,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/http2/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"}],"generated":{"js":"'use strict'\n\nvar parser = exports\n\nvar transport = require('../../../spdy-transport')\nvar base = transport.protocol.base\nvar utils = base.utils\nvar constants = require('./').constants\n\nvar assert = require('assert')\nvar util = require('util')\n\nfunction Parser (options) {\n  base.Parser.call(this, options)\n\n  this.isServer = options.isServer\n\n  this.waiting = constants.PREFACE_SIZE\n  this.state = 'preface'\n  this.pendingHeader = null\n\n  // Header Block queue\n  this._lastHeaderBlock = null\n  this.maxFrameSize = constants.INITIAL_MAX_FRAME_SIZE\n  this.maxHeaderListSize = constants.DEFAULT_MAX_HEADER_LIST_SIZE\n}\nutil.inherits(Parser, base.Parser)\n\nparser.create = function create (options) {\n  return new Parser(options)\n}\n\nParser.prototype.setMaxFrameSize = function setMaxFrameSize (size) {\n  this.maxFrameSize = size\n}\n\nParser.prototype.setMaxHeaderListSize = function setMaxHeaderListSize (size) {\n  this.maxHeaderListSize = size\n}\n\n// Only for testing\nParser.prototype.skipPreface = function skipPreface () {\n  // Just some number bigger than 3.1, doesn't really matter for HTTP2\n  this.setVersion(4)\n\n  // Parse frame header!\n  this.state = 'frame-head'\n  this.waiting = constants.FRAME_HEADER_SIZE\n}\n\nParser.prototype.execute = function execute (buffer, callback) {\n  if (this.state === 'preface') { return this.onPreface(buffer, callback) }\n\n  if (this.state === 'frame-head') {\n    return this.onFrameHead(buffer, callback)\n  }\n\n  assert(this.state === 'frame-body' && this.pendingHeader !== null)\n\n  var self = this\n  var header = this.pendingHeader\n  this.pendingHeader = null\n\n  this.onFrameBody(header, buffer, function (err, frame) {\n    if (err) {\n      return callback(err)\n    }\n\n    self.state = 'frame-head'\n    self.partial = false\n    self.waiting = constants.FRAME_HEADER_SIZE\n    callback(null, frame)\n  })\n}\n\nParser.prototype.executePartial = function executePartial (buffer, callback) {\n  var header = this.pendingHeader\n\n  assert.equal(header.flags & constants.flags.PADDED, 0)\n\n  if (this.window) { this.window.recv.update(-buffer.size) }\n\n  callback(null, {\n    type: 'DATA',\n    id: header.id,\n\n    // Partial DATA can't be FIN\n    fin: false,\n    data: buffer.take(buffer.size)\n  })\n}\n\nParser.prototype.onPreface = function onPreface (buffer, callback) {\n  if (buffer.take(buffer.size).toString() !== constants.PREFACE) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Invalid preface'))\n  }\n\n  this.skipPreface()\n  callback(null, null)\n}\n\nParser.prototype.onFrameHead = function onFrameHead (buffer, callback) {\n  var header = {\n    length: buffer.readUInt24BE(),\n    control: true,\n    type: buffer.readUInt8(),\n    flags: buffer.readUInt8(),\n    id: buffer.readUInt32BE() & 0x7fffffff\n  }\n\n  if (header.length > this.maxFrameSize) {\n    return callback(this.error(constants.error.FRAME_SIZE_ERROR,\n                               'Frame length OOB'))\n  }\n\n  header.control = header.type !== constants.frameType.DATA\n\n  this.state = 'frame-body'\n  this.pendingHeader = header\n  this.waiting = header.length\n  this.partial = !header.control\n\n  // TODO(indutny): eventually support partial padded DATA\n  if (this.partial) {\n    this.partial = (header.flags & constants.flags.PADDED) === 0\n  }\n\n  callback(null, null)\n}\n\nParser.prototype.onFrameBody = function onFrameBody (header, buffer, callback) {\n  var frameType = constants.frameType\n\n  if (header.type === frameType.DATA) {\n    this.onDataFrame(header, buffer, callback)\n  } else if (header.type === frameType.HEADERS) {\n    this.onHeadersFrame(header, buffer, callback)\n  } else if (header.type === frameType.CONTINUATION) {\n    this.onContinuationFrame(header, buffer, callback)\n  } else if (header.type === frameType.WINDOW_UPDATE) {\n    this.onWindowUpdateFrame(header, buffer, callback)\n  } else if (header.type === frameType.RST_STREAM) {\n    this.onRSTFrame(header, buffer, callback)\n  } else if (header.type === frameType.SETTINGS) {\n    this.onSettingsFrame(header, buffer, callback)\n  } else if (header.type === frameType.PUSH_PROMISE) {\n    this.onPushPromiseFrame(header, buffer, callback)\n  } else if (header.type === frameType.PING) {\n    this.onPingFrame(header, buffer, callback)\n  } else if (header.type === frameType.GOAWAY) {\n    this.onGoawayFrame(header, buffer, callback)\n  } else if (header.type === frameType.PRIORITY) {\n    this.onPriorityFrame(header, buffer, callback)\n  } else if (header.type === frameType.X_FORWARDED_FOR) {\n    this.onXForwardedFrame(header, buffer, callback)\n  } else {\n    this.onUnknownFrame(header, buffer, callback)\n  }\n}\n\nParser.prototype.onUnknownFrame = function onUnknownFrame (header, buffer, callback) {\n  if (this._lastHeaderBlock !== null) {\n    callback(this.error(constants.error.PROTOCOL_ERROR,\n                        'Received unknown frame in the middle of a header block'))\n    return\n  }\n  callback(null, { type: 'unknown: ' + header.type })\n}\n\nParser.prototype.unpadData = function unpadData (header, body, callback) {\n  var isPadded = (header.flags & constants.flags.PADDED) !== 0\n\n  if (!isPadded) { return callback(null, body) }\n\n  if (!body.has(1)) {\n    return callback(this.error(constants.error.FRAME_SIZE_ERROR,\n                               'Not enough space for padding'))\n  }\n\n  var pad = body.readUInt8()\n  if (!body.has(pad)) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Invalid padding size'))\n  }\n\n  var contents = body.clone(body.size - pad)\n  body.skip(body.size)\n  callback(null, contents)\n}\n\nParser.prototype.onDataFrame = function onDataFrame (header, body, callback) {\n  var isEndStream = (header.flags & constants.flags.END_STREAM) !== 0\n\n  if (header.id === 0) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Received DATA frame with stream=0'))\n  }\n\n  // Count received bytes\n  if (this.window) {\n    this.window.recv.update(-body.size)\n  }\n\n  this.unpadData(header, body, function (err, data) {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, {\n      type: 'DATA',\n      id: header.id,\n      fin: isEndStream,\n      data: data.take(data.size)\n    })\n  })\n}\n\nParser.prototype.initHeaderBlock = function initHeaderBlock (header,\n                                                            frame,\n                                                            block,\n                                                            callback) {\n  if (this._lastHeaderBlock) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Duplicate Stream ID'))\n  }\n\n  this._lastHeaderBlock = {\n    id: header.id,\n    frame: frame,\n    queue: [],\n    size: 0\n  }\n\n  this.queueHeaderBlock(header, block, callback)\n}\n\nParser.prototype.queueHeaderBlock = function queueHeaderBlock (header,\n                                                              block,\n                                                              callback) {\n  var self = this\n  var item = this._lastHeaderBlock\n  if (!this._lastHeaderBlock || item.id !== header.id) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'No matching stream for continuation'))\n  }\n\n  var fin = (header.flags & constants.flags.END_HEADERS) !== 0\n\n  var chunks = block.toChunks()\n  for (var i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i]\n    item.queue.push(chunk)\n    item.size += chunk.length\n  }\n\n  if (item.size >= self.maxHeaderListSize) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Compressed header list is too large'))\n  }\n\n  if (!fin) { return callback(null, null) }\n  this._lastHeaderBlock = null\n\n  this.decompress.write(item.queue, function (err, chunks) {\n    if (err) {\n      return callback(self.error(constants.error.COMPRESSION_ERROR,\n                                 err.message))\n    }\n\n    var headers = {}\n    var size = 0\n    for (var i = 0; i < chunks.length; i++) {\n      var header = chunks[i]\n\n      size += header.name.length + header.value.length + 32\n      if (size >= self.maxHeaderListSize) {\n        return callback(self.error(constants.error.PROTOCOL_ERROR,\n                                   'Header list is too large'))\n      }\n\n      if (/[A-Z]/.test(header.name)) {\n        return callback(self.error(constants.error.PROTOCOL_ERROR,\n                                   'Header name must be lowercase'))\n      }\n\n      utils.addHeaderLine(header.name, header.value, headers)\n    }\n\n    item.frame.headers = headers\n    item.frame.path = headers[':path']\n\n    callback(null, item.frame)\n  })\n}\n\nParser.prototype.onHeadersFrame = function onHeadersFrame (header,\n                                                          body,\n                                                          callback) {\n  var self = this\n\n  if (header.id === 0) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Invalid stream id for HEADERS'))\n  }\n\n  this.unpadData(header, body, function (err, data) {\n    if (err) { return callback(err) }\n\n    var isPriority = (header.flags & constants.flags.PRIORITY) !== 0\n    if (!data.has(isPriority ? 5 : 0)) {\n      return callback(self.error(constants.error.FRAME_SIZE_ERROR,\n                                 'Not enough data for HEADERS'))\n    }\n\n    var exclusive = false\n    var dependency = 0\n    var weight = constants.DEFAULT_WEIGHT\n    if (isPriority) {\n      dependency = data.readUInt32BE()\n      exclusive = (dependency & 0x80000000) !== 0\n      dependency &= 0x7fffffff\n\n      // Weight's range is [1, 256]\n      weight = data.readUInt8() + 1\n    }\n\n    if (dependency === header.id) {\n      return callback(self.error(constants.error.PROTOCOL_ERROR,\n                                 'Stream can\\'t dependend on itself'))\n    }\n\n    var streamInfo = {\n      type: 'HEADERS',\n      id: header.id,\n      priority: {\n        parent: dependency,\n        exclusive: exclusive,\n        weight: weight\n      },\n      fin: (header.flags & constants.flags.END_STREAM) !== 0,\n      writable: true,\n      headers: null,\n      path: null\n    }\n\n    self.initHeaderBlock(header, streamInfo, data, callback)\n  })\n}\n\nParser.prototype.onContinuationFrame = function onContinuationFrame (header,\n                                                                    body,\n                                                                    callback) {\n  this.queueHeaderBlock(header, body, callback)\n}\n\nParser.prototype.onRSTFrame = function onRSTFrame (header, body, callback) {\n  if (body.size !== 4) {\n    return callback(this.error(constants.error.FRAME_SIZE_ERROR,\n                               'RST_STREAM length not 4'))\n  }\n\n  if (header.id === 0) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Invalid stream id for RST_STREAM'))\n  }\n\n  callback(null, {\n    type: 'RST',\n    id: header.id,\n    code: constants.errorByCode[body.readUInt32BE()]\n  })\n}\n\nParser.prototype._validateSettings = function _validateSettings (settings) {\n  if (settings['enable_push'] !== undefined &&\n      settings['enable_push'] !== 0 &&\n      settings['enable_push'] !== 1) {\n    return this.error(constants.error.PROTOCOL_ERROR,\n                      'SETTINGS_ENABLE_PUSH must be 0 or 1')\n  }\n\n  if (settings['initial_window_size'] !== undefined &&\n      (settings['initial_window_size'] > constants.MAX_INITIAL_WINDOW_SIZE ||\n       settings['initial_window_size'] < 0)) {\n    return this.error(constants.error.FLOW_CONTROL_ERROR,\n                      'SETTINGS_INITIAL_WINDOW_SIZE is OOB')\n  }\n\n  if (settings['max_frame_size'] !== undefined &&\n      (settings['max_frame_size'] > constants.ABSOLUTE_MAX_FRAME_SIZE ||\n       settings['max_frame_size'] < constants.INITIAL_MAX_FRAME_SIZE)) {\n    return this.error(constants.error.PROTOCOL_ERROR,\n                      'SETTINGS_MAX_FRAME_SIZE is OOB')\n  }\n\n  return undefined\n}\n\nParser.prototype.onSettingsFrame = function onSettingsFrame (header,\n                                                            body,\n                                                            callback) {\n  if (header.id !== 0) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Invalid stream id for SETTINGS'))\n  }\n\n  var isAck = (header.flags & constants.flags.ACK) !== 0\n  if (isAck && body.size !== 0) {\n    return callback(this.error(constants.error.FRAME_SIZE_ERROR,\n                               'SETTINGS with ACK and non-zero length'))\n  }\n\n  if (isAck) {\n    return callback(null, { type: 'ACK_SETTINGS' })\n  }\n\n  if (body.size % 6 !== 0) {\n    return callback(this.error(constants.error.FRAME_SIZE_ERROR,\n                               'SETTINGS length not multiple of 6'))\n  }\n\n  var settings = {}\n  while (!body.isEmpty()) {\n    var id = body.readUInt16BE()\n    var value = body.readUInt32BE()\n    var name = constants.settingsIndex[id]\n\n    if (name) {\n      settings[name] = value\n    }\n  }\n\n  var err = this._validateSettings(settings)\n  if (err !== undefined) {\n    return callback(err)\n  }\n\n  callback(null, {\n    type: 'SETTINGS',\n    settings: settings\n  })\n}\n\nParser.prototype.onPushPromiseFrame = function onPushPromiseFrame (header,\n                                                                  body,\n                                                                  callback) {\n  if (header.id === 0) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Invalid stream id for PUSH_PROMISE'))\n  }\n\n  var self = this\n  this.unpadData(header, body, function (err, data) {\n    if (err) {\n      return callback(err)\n    }\n\n    if (!data.has(4)) {\n      return callback(self.error(constants.error.FRAME_SIZE_ERROR,\n                                 'PUSH_PROMISE length less than 4'))\n    }\n\n    var streamInfo = {\n      type: 'PUSH_PROMISE',\n      id: header.id,\n      fin: false,\n      promisedId: data.readUInt32BE() & 0x7fffffff,\n      headers: null,\n      path: null\n    }\n\n    self.initHeaderBlock(header, streamInfo, data, callback)\n  })\n}\n\nParser.prototype.onPingFrame = function onPingFrame (header, body, callback) {\n  if (body.size !== 8) {\n    return callback(this.error(constants.error.FRAME_SIZE_ERROR,\n                               'PING length != 8'))\n  }\n\n  if (header.id !== 0) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Invalid stream id for PING'))\n  }\n\n  var ack = (header.flags & constants.flags.ACK) !== 0\n  callback(null, { type: 'PING', opaque: body.take(body.size), ack: ack })\n}\n\nParser.prototype.onGoawayFrame = function onGoawayFrame (header,\n                                                        body,\n                                                        callback) {\n  if (!body.has(8)) {\n    return callback(this.error(constants.error.FRAME_SIZE_ERROR,\n                               'GOAWAY length < 8'))\n  }\n\n  if (header.id !== 0) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Invalid stream id for GOAWAY'))\n  }\n\n  var frame = {\n    type: 'GOAWAY',\n    lastId: body.readUInt32BE(),\n    code: constants.goawayByCode[body.readUInt32BE()]\n  }\n\n  if (body.size !== 0) { frame.debug = body.take(body.size) }\n\n  callback(null, frame)\n}\n\nParser.prototype.onPriorityFrame = function onPriorityFrame (header,\n                                                            body,\n                                                            callback) {\n  if (body.size !== 5) {\n    return callback(this.error(constants.error.FRAME_SIZE_ERROR,\n                               'PRIORITY length != 5'))\n  }\n\n  if (header.id === 0) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Invalid stream id for PRIORITY'))\n  }\n\n  var dependency = body.readUInt32BE()\n\n  // Again the range is from 1 to 256\n  var weight = body.readUInt8() + 1\n\n  if (dependency === header.id) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'Stream can\\'t dependend on itself'))\n  }\n\n  callback(null, {\n    type: 'PRIORITY',\n    id: header.id,\n    priority: {\n      exclusive: (dependency & 0x80000000) !== 0,\n      parent: dependency & 0x7fffffff,\n      weight: weight\n    }\n  })\n}\n\nParser.prototype.onWindowUpdateFrame = function onWindowUpdateFrame (header,\n                                                                    body,\n                                                                    callback) {\n  if (body.size !== 4) {\n    return callback(this.error(constants.error.FRAME_SIZE_ERROR,\n                               'WINDOW_UPDATE length != 4'))\n  }\n\n  var delta = body.readInt32BE()\n  if (delta === 0) {\n    return callback(this.error(constants.error.PROTOCOL_ERROR,\n                               'WINDOW_UPDATE delta == 0'))\n  }\n\n  callback(null, {\n    type: 'WINDOW_UPDATE',\n    id: header.id,\n    delta: delta\n  })\n}\n\nParser.prototype.onXForwardedFrame = function onXForwardedFrame (header,\n                                                                body,\n                                                                callback) {\n  callback(null, {\n    type: 'X_FORWARDED_FOR',\n    host: body.take(body.size).toString()\n  })\n}\n"},"sourceMaps":null,"error":null,"hash":"2472919c4c9b730a5411d9ba31b39b38","cacheData":{"env":{}}}