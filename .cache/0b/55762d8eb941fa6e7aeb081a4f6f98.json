{"id":"../node_modules/internal-ip/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/internal-ip/package.json","includedInParent":true,"mtime":1594306880078},{"name":"os","loc":{"line":2,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/internal-ip/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/os-browserify/browser.js"},{"name":"default-gateway","loc":{"line":3,"column":31},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/internal-ip/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/default-gateway/index.js"},{"name":"ipaddr.js","loc":{"line":4,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/internal-ip/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/ipaddr.js/lib/ipaddr.js"}],"generated":{"js":"'use strict';\n\nconst os = require('os');\n\nconst defaultGateway = require('default-gateway');\n\nconst ipaddr = require('ipaddr.js');\n\nfunction findIp(gateway) {\n  const interfaces = os.networkInterfaces();\n  const gatewayIp = ipaddr.parse(gateway);\n  let ip; // Look for the matching interface in all local interfaces\n\n  Object.keys(interfaces).some(name => {\n    return interfaces[name].some(addr => {\n      const prefix = ipaddr.parse(addr.netmask).prefixLengthFromSubnetMask();\n      const net = ipaddr.parseCIDR(\"\".concat(addr.address, \"/\").concat(prefix));\n\n      if (net[0] && net[0].kind() === gatewayIp.kind() && gatewayIp.match(net)) {\n        ip = net[0].toString();\n      }\n\n      return Boolean(ip);\n    });\n  });\n  return ip;\n}\n\nfunction promise(family) {\n  return defaultGateway[family]().then(result => {\n    return findIp(result.gateway) || null;\n  }).catch(() => null);\n}\n\nfunction sync(family) {\n  try {\n    const result = defaultGateway[family].sync();\n    return findIp(result.gateway) || null;\n  } catch (err) {\n    return null;\n  }\n}\n\nmodule.exports.v6 = () => promise('v6');\n\nmodule.exports.v4 = () => promise('v4');\n\nmodule.exports.v6.sync = () => sync('v6');\n\nmodule.exports.v4.sync = () => sync('v4');"},"sourceMaps":null,"error":null,"hash":"e6e8dfa311ff1c582f8a2c92cbd596f8","cacheData":{"env":{}}}