{"id":"../node_modules/http-proxy-middleware/lib/context-matcher.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/package.json","includedInParent":true,"mtime":1594306880062},{"name":"lodash","loc":{"line":1,"column":16},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/context-matcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/lodash/lodash.js"},{"name":"url","loc":{"line":2,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/context-matcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/url/url.js"},{"name":"is-glob","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/context-matcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/node_modules/is-glob/index.js"},{"name":"micromatch","loc":{"line":4,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/context-matcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/node_modules/micromatch/index.js"},{"name":"./errors","loc":{"line":5,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/context-matcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/errors.js"}],"generated":{"js":"var _ = require('lodash');\n\nvar url = require('url');\n\nvar isGlob = require('is-glob');\n\nvar micromatch = require('micromatch');\n\nvar ERRORS = require('./errors');\n\nmodule.exports = {\n  match: matchContext\n};\n\nfunction matchContext(context, uri, req) {\n  // single path\n  if (isStringPath(context)) {\n    return matchSingleStringPath(context, uri);\n  } // single glob path\n\n\n  if (isGlobPath(context)) {\n    return matchSingleGlobPath(context, uri);\n  } // multi path\n\n\n  if (Array.isArray(context)) {\n    if (context.every(isStringPath)) {\n      return matchMultiPath(context, uri);\n    }\n\n    if (context.every(isGlobPath)) {\n      return matchMultiGlobPath(context, uri);\n    }\n\n    throw new Error(ERRORS.ERR_CONTEXT_MATCHER_INVALID_ARRAY);\n  } // custom matching\n\n\n  if (_.isFunction(context)) {\n    var pathname = getUrlPathName(uri);\n    return context(pathname, req);\n  }\n\n  throw new Error(ERRORS.ERR_CONTEXT_MATCHER_GENERIC);\n}\n/**\n * @param  {String} context '/api'\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\n\n\nfunction matchSingleStringPath(context, uri) {\n  var pathname = getUrlPathName(uri);\n  return pathname.indexOf(context) === 0;\n}\n\nfunction matchSingleGlobPath(pattern, uri) {\n  var pathname = getUrlPathName(uri);\n  var matches = micromatch(pathname, pattern);\n  return matches && matches.length > 0;\n}\n\nfunction matchMultiGlobPath(patternList, uri) {\n  return matchSingleGlobPath(patternList, uri);\n}\n/**\n * @param  {String} contextList ['/api', '/ajax']\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\n\n\nfunction matchMultiPath(contextList, uri) {\n  for (var i = 0; i < contextList.length; i++) {\n    var context = contextList[i];\n\n    if (matchSingleStringPath(context, uri)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Parses URI and returns RFC 3986 path\n *\n * @param  {String} uri from req.url\n * @return {String}     RFC 3986 path\n */\n\n\nfunction getUrlPathName(uri) {\n  return uri && url.parse(uri).pathname;\n}\n\nfunction isStringPath(context) {\n  return _.isString(context) && !isGlob(context);\n}\n\nfunction isGlobPath(context) {\n  return isGlob(context);\n}"},"sourceMaps":null,"error":null,"hash":"aeaf940eb0728621b76e6374b829776d","cacheData":{"env":{}}}