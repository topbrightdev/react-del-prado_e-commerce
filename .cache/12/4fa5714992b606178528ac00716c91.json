{"id":"../node_modules/react-dev-utils/WebpackDevServerUtils.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/package.json","includedInParent":true,"mtime":1594306881106},{"name":"address","loc":{"line":9,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/address/lib/address.js"},{"name":"fs","loc":{"line":10,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":11,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"url","loc":{"line":12,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/url/url.js"},{"name":"chalk","loc":{"line":13,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/chalk/index.js"},{"name":"detect-port-alt","loc":{"line":14,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/detect-port-alt/index.js"},{"name":"is-root","loc":{"line":15,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/is-root/index.js"},{"name":"inquirer","loc":{"line":16,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/inquirer.js"},{"name":"./clearConsole","loc":{"line":17,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/clearConsole.js"},{"name":"./formatWebpackMessages","loc":{"line":18,"column":38},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/formatWebpackMessages.js"},{"name":"./getProcessForPort","loc":{"line":19,"column":34},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/getProcessForPort.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/WebpackDevServerUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar address = require('address');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar url = require('url');\n\nvar chalk = require('chalk');\n\nvar detect = require('detect-port-alt');\n\nvar isRoot = require('is-root');\n\nvar inquirer = require('inquirer');\n\nvar clearConsole = require('./clearConsole');\n\nvar formatWebpackMessages = require('./formatWebpackMessages');\n\nvar getProcessForPort = require('./getProcessForPort');\n\nvar isInteractive = process.stdout.isTTY;\nvar handleCompile; // You can safely remove this after ejecting.\n// We only use this block for testing of Create React App itself:\n\nvar isSmokeTest = process.argv.some(function (arg) {\n  return arg.indexOf('--smoke-test') > -1;\n});\n\nif (isSmokeTest) {\n  handleCompile = function (err, stats) {\n    if (err || stats.hasErrors() || stats.hasWarnings()) {\n      process.exit(1);\n    } else {\n      process.exit(0);\n    }\n  };\n}\n\nfunction prepareUrls(protocol, host, port) {\n  var formatUrl = function (hostname) {\n    return url.format({\n      protocol,\n      hostname,\n      port,\n      pathname: '/'\n    });\n  };\n\n  var prettyPrintUrl = function (hostname) {\n    return url.format({\n      protocol,\n      hostname,\n      port: chalk.bold(port),\n      pathname: '/'\n    });\n  };\n\n  var isUnspecifiedHost = host === '0.0.0.0' || host === '::';\n  var prettyHost, lanUrlForConfig, lanUrlForTerminal;\n\n  if (isUnspecifiedHost) {\n    prettyHost = 'localhost';\n\n    try {\n      // This can only return an IPv4 address\n      lanUrlForConfig = address.ip();\n\n      if (lanUrlForConfig) {\n        // Check if the address is a private ip\n        // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n        if (/^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(lanUrlForConfig)) {\n          // Address is private, format it for later use\n          lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig);\n        } else {\n          // Address is not private, so we will discard it\n          lanUrlForConfig = undefined;\n        }\n      }\n    } catch (_e) {// ignored\n    }\n  } else {\n    prettyHost = host;\n  }\n\n  var localUrlForTerminal = prettyPrintUrl(prettyHost);\n  var localUrlForBrowser = formatUrl(prettyHost);\n  return {\n    lanUrlForConfig,\n    lanUrlForTerminal,\n    localUrlForTerminal,\n    localUrlForBrowser\n  };\n}\n\nfunction printInstructions(appName, urls, useYarn) {\n  console.log();\n  console.log(\"You can now view \".concat(chalk.bold(appName), \" in the browser.\"));\n  console.log();\n\n  if (urls.lanUrlForTerminal) {\n    console.log(\"  \".concat(chalk.bold('Local:'), \"            \").concat(urls.localUrlForTerminal));\n    console.log(\"  \".concat(chalk.bold('On Your Network:'), \"  \").concat(urls.lanUrlForTerminal));\n  } else {\n    console.log(\"  \".concat(urls.localUrlForTerminal));\n  }\n\n  console.log();\n  console.log('Note that the development build is not optimized.');\n  console.log(\"To create a production build, use \" + \"\".concat(chalk.cyan(\"\".concat(useYarn ? 'yarn' : 'npm run', \" build\")), \".\"));\n  console.log();\n}\n\nfunction createCompiler(webpack, config, appName, urls, useYarn) {\n  // \"Compiler\" is a low-level interface to Webpack.\n  // It lets us listen to some events and provide our own custom messages.\n  var compiler;\n\n  try {\n    compiler = webpack(config, handleCompile);\n  } catch (err) {\n    console.log(chalk.red('Failed to compile.'));\n    console.log();\n    console.log(err.message || err);\n    console.log();\n    process.exit(1);\n  } // \"invalid\" event fires when you have changed a file, and Webpack is\n  // recompiling a bundle. WebpackDevServer takes care to pause serving the\n  // bundle, so if you refresh, it'll wait instead of serving the old one.\n  // \"invalid\" is short for \"bundle invalidated\", it doesn't imply any errors.\n\n\n  compiler.hooks.invalid.tap('invalid', function () {\n    if (isInteractive) {\n      clearConsole();\n    }\n\n    console.log('Compiling...');\n  });\n  var isFirstCompile = true; // \"done\" event fires when Webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n\n  compiler.hooks.done.tap('done', function (stats) {\n    if (isInteractive) {\n      clearConsole();\n    } // We have switched off the default Webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    // We only construct the warnings and errors for speed:\n    // https://github.com/facebook/create-react-app/issues/4492#issuecomment-421959548\n\n\n    var messages = formatWebpackMessages(stats.toJson({\n      all: false,\n      warnings: true,\n      errors: true\n    }));\n    var isSuccessful = !messages.errors.length && !messages.warnings.length;\n\n    if (isSuccessful) {\n      console.log(chalk.green('Compiled successfully!'));\n    }\n\n    if (isSuccessful && (isInteractive || isFirstCompile)) {\n      printInstructions(appName, urls, useYarn);\n    }\n\n    isFirstCompile = false; // If errors exist, only show errors.\n\n    if (messages.errors.length) {\n      // Only keep the first error. Others are often indicative\n      // of the same problem, but confuse the reader with noise.\n      if (messages.errors.length > 1) {\n        messages.errors.length = 1;\n      }\n\n      console.log(chalk.red('Failed to compile.\\n'));\n      console.log(messages.errors.join('\\n\\n'));\n      return;\n    } // Show warnings if no errors were found.\n\n\n    if (messages.warnings.length) {\n      console.log(chalk.yellow('Compiled with warnings.\\n'));\n      console.log(messages.warnings.join('\\n\\n')); // Teach some ESLint tricks.\n\n      console.log('\\nSearch for the ' + chalk.underline(chalk.yellow('keywords')) + ' to learn more about each warning.');\n      console.log('To ignore, add ' + chalk.cyan('// eslint-disable-next-line') + ' to the line before.\\n');\n    }\n  });\n  return compiler;\n}\n\nfunction resolveLoopback(proxy) {\n  var o = url.parse(proxy);\n  o.host = undefined;\n\n  if (o.hostname !== 'localhost') {\n    return proxy;\n  } // Unfortunately, many languages (unlike node) do not yet support IPv6.\n  // This means even though localhost resolves to ::1, the application\n  // must fall back to IPv4 (on 127.0.0.1).\n  // We can re-enable this in a few years.\n\n  /*try {\n    o.hostname = address.ipv6() ? '::1' : '127.0.0.1';\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }*/\n\n\n  try {\n    // Check if we're on a network; if we are, chances are we can resolve\n    // localhost. Otherwise, we can just be safe and assume localhost is\n    // IPv4 for maximum compatibility.\n    if (!address.ip()) {\n      o.hostname = '127.0.0.1';\n    }\n  } catch (_ignored) {\n    o.hostname = '127.0.0.1';\n  }\n\n  return url.format(o);\n} // We need to provide a custom onError function for httpProxyMiddleware.\n// It allows us to log custom error messages on the console.\n\n\nfunction onProxyError(proxy) {\n  return function (err, req, res) {\n    var host = req.headers && req.headers.host;\n    console.log(chalk.red('Proxy error:') + ' Could not proxy request ' + chalk.cyan(req.url) + ' from ' + chalk.cyan(host) + ' to ' + chalk.cyan(proxy) + '.');\n    console.log('See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (' + chalk.cyan(err.code) + ').');\n    console.log(); // And immediately send the proper error response to the client.\n    // Otherwise, the request will eventually timeout with ERR_EMPTY_RESPONSE on the client side.\n\n    if (res.writeHead && !res.headersSent) {\n      res.writeHead(500);\n    }\n\n    res.end('Proxy error: Could not proxy request ' + req.url + ' from ' + host + ' to ' + proxy + ' (' + err.code + ').');\n  };\n}\n\nfunction prepareProxy(proxy, appPublicFolder) {\n  // `proxy` lets you specify alternate servers for specific requests.\n  // It can either be a string or an object conforming to the Webpack dev server proxy configuration\n  // https://webpack.github.io/docs/webpack-dev-server.html\n  if (!proxy) {\n    return undefined;\n  }\n\n  if (typeof proxy !== 'string') {\n    console.log(chalk.red('When specified, \"proxy\" in package.json must be a string.'));\n    console.log(chalk.red('Instead, the type of \"proxy\" was \"' + typeof proxy + '\".'));\n    console.log(chalk.red('Either remove \"proxy\" from package.json, or make it a string.'));\n    process.exit(1);\n  } // Otherwise, if proxy is specified, we will let it handle any request except for files in the public folder.\n\n\n  function mayProxy(pathname) {\n    var maybePublicPath = path.resolve(appPublicFolder, pathname.slice(1));\n    return !fs.existsSync(maybePublicPath);\n  }\n\n  if (!/^http(s)?:\\/\\//.test(proxy)) {\n    console.log(chalk.red('When \"proxy\" is specified in package.json it must start with either http:// or https://'));\n    process.exit(1);\n  }\n\n  var target;\n\n  if (process.platform === 'win32') {\n    target = resolveLoopback(proxy);\n  } else {\n    target = proxy;\n  }\n\n  return [{\n    target,\n    logLevel: 'silent',\n    // For single page apps, we generally want to fallback to /index.html.\n    // However we also want to respect `proxy` for API calls.\n    // So if `proxy` is specified as a string, we need to decide which fallback to use.\n    // We use a heuristic: We want to proxy all the requests that are not meant\n    // for static assets and as all the requests for static assets will be using\n    // `GET` method, we can proxy all non-`GET` requests.\n    // For `GET` requests, if request `accept`s text/html, we pick /index.html.\n    // Modern browsers include text/html into `accept` header when navigating.\n    // However API calls like `fetch()` won’t generally accept text/html.\n    // If this heuristic doesn’t work well for you, use a custom `proxy` object.\n    context: function (pathname, req) {\n      return req.method !== 'GET' || mayProxy(pathname) && req.headers.accept && req.headers.accept.indexOf('text/html') === -1;\n    },\n    onProxyReq: function (proxyReq) {\n      // Browers may send Origin headers even with same-origin\n      // requests. To prevent CORS issues, we have to change\n      // the Origin to match the target URL.\n      if (proxyReq.getHeader('origin')) {\n        proxyReq.setHeader('origin', target);\n      }\n    },\n    onError: onProxyError(target),\n    secure: false,\n    changeOrigin: true,\n    ws: true,\n    xfwd: true\n  }];\n}\n\nfunction choosePort(host, defaultPort) {\n  return detect(defaultPort, host).then(function (port) {\n    return new Promise(function (resolve) {\n      if (port === defaultPort) {\n        return resolve(port);\n      }\n\n      var message = process.platform !== 'win32' && defaultPort < 1024 && !isRoot() ? \"Admin permissions are required to run a server on a port below 1024.\" : \"Something is already running on port \".concat(defaultPort, \".\");\n\n      if (isInteractive) {\n        clearConsole();\n        var existingProcess = getProcessForPort(defaultPort);\n        var question = {\n          type: 'confirm',\n          name: 'shouldChangePort',\n          message: chalk.yellow(message + \"\".concat(existingProcess ? \" Probably:\\n  \".concat(existingProcess) : '')) + '\\n\\nWould you like to run the app on another port instead?',\n          default: true\n        };\n        inquirer.prompt(question).then(function (answer) {\n          if (answer.shouldChangePort) {\n            resolve(port);\n          } else {\n            resolve(null);\n          }\n        });\n      } else {\n        console.log(chalk.red(message));\n        resolve(null);\n      }\n    });\n  }, function (err) {\n    throw new Error(chalk.red(\"Could not find an open port at \".concat(chalk.bold(host), \".\")) + '\\n' + ('Network error message: ' + err.message || err) + '\\n');\n  });\n}\n\nmodule.exports = {\n  choosePort,\n  createCompiler,\n  prepareProxy,\n  prepareUrls\n};"},"sourceMaps":null,"error":null,"hash":"8c8b41aa36128fb0328d6369b8dc0f2b","cacheData":{"env":{}}}