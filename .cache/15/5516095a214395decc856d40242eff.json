{"id":"../node_modules/postcss-selector-matches/dist/replaceRuleSelector.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-selector-matches/package.json","includedInParent":true,"mtime":1594306880802},{"name":"postcss/lib/list","loc":{"line":8,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-selector-matches/dist/replaceRuleSelector.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-selector-matches/node_modules/postcss/lib/list.js"},{"name":"balanced-match","loc":{"line":12,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-selector-matches/dist/replaceRuleSelector.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/balanced-match/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = replaceRuleSelector;\n\nvar _list = require(\"postcss/lib/list\");\n\nvar _list2 = _interopRequireDefault(_list);\n\nvar _balancedMatch = require(\"balanced-match\");\n\nvar _balancedMatch2 = _interopRequireDefault(_balancedMatch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar pseudoClass = \":matches\";\nvar selectorElementRE = /^[a-zA-Z]/;\n\nfunction isElementSelector(selector) {\n  var matches = selectorElementRE.exec(selector);\n  // console.log({selector, matches})\n  return matches;\n}\n\nfunction normalizeSelector(selector, preWhitespace, pre) {\n  if (isElementSelector(selector) && !isElementSelector(pre)) {\n    return `${preWhitespace}${selector}${pre}`;\n  }\n\n  return `${preWhitespace}${pre}${selector}`;\n}\n\nfunction explodeSelector(selector, options) {\n  if (selector && selector.indexOf(pseudoClass) > -1) {\n    var newSelectors = [];\n    var preWhitespaceMatches = selector.match(/^\\s+/);\n    var preWhitespace = preWhitespaceMatches ? preWhitespaceMatches[0] : \"\";\n    var selectorPart = _list2.default.comma(selector);\n    selectorPart.forEach(function (part) {\n      var position = part.indexOf(pseudoClass);\n      var pre = part.slice(0, position);\n      var body = part.slice(position);\n      var matches = (0, _balancedMatch2.default)(\"(\", \")\", body);\n\n      var bodySelectors = matches && matches.body ? _list2.default.comma(matches.body).reduce(function (acc, s) {\n        return [].concat(_toConsumableArray(acc), _toConsumableArray(explodeSelector(s, options)));\n      }, []) : [body];\n\n      var postSelectors = matches && matches.post ? explodeSelector(matches.post, options) : [];\n\n      var newParts = void 0;\n      if (postSelectors.length === 0) {\n        // the test below is a poor way to try we are facing a piece of a\n        // selector...\n        if (position === -1 || pre.indexOf(\" \") > -1) {\n          newParts = bodySelectors.map(function (s) {\n            return preWhitespace + pre + s;\n          });\n        } else {\n          newParts = bodySelectors.map(function (s) {\n            return normalizeSelector(s, preWhitespace, pre);\n          });\n        }\n      } else {\n        newParts = [];\n        postSelectors.forEach(function (postS) {\n          bodySelectors.forEach(function (s) {\n            newParts.push(preWhitespace + pre + s + postS);\n          });\n        });\n      }\n      newSelectors = [].concat(_toConsumableArray(newSelectors), _toConsumableArray(newParts));\n    });\n\n    return newSelectors;\n  }\n  return [selector];\n}\n\nfunction replaceRuleSelector(rule, options) {\n  var indentation = rule.raws && rule.raws.before ? rule.raws.before.split(\"\\n\").pop() : \"\";\n  return explodeSelector(rule.selector, options).join(\",\" + (options.lineBreak ? \"\\n\" + indentation : \" \"));\n}\nmodule.exports = exports.default;"},"sourceMaps":null,"error":null,"hash":"3bbb88250700c4009de9d4943b611866","cacheData":{"env":{}}}