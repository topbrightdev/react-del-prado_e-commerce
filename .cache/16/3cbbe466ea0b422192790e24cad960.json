{"id":"../node_modules/hpack.js/lib/hpack/compressor.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/package.json","includedInParent":true,"mtime":1594306880054},{"name":"../hpack","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/compressor.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack.js"},{"name":"inherits","loc":{"line":7,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/compressor.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inherits/inherits_browser.js"},{"name":"readable-stream","loc":{"line":8,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/compressor.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/readable-stream/readable-browser.js"}],"generated":{"js":"var hpack = require('../hpack');\nvar utils = hpack.utils;\nvar encoder = hpack.encoder;\nvar table = hpack.table;\nvar assert = utils.assert;\n\nvar inherits = require('inherits');\nvar Duplex = require('readable-stream').Duplex;\n\nfunction Compressor(options) {\n  Duplex.call(this, {\n    writableObjectMode: true\n  });\n\n  this._encoder = null;\n  this._table = table.create(options.table);\n}\ninherits(Compressor, Duplex);\nmodule.exports = Compressor;\n\nCompressor.create = function create(options) {\n  return new Compressor(options);\n};\n\nCompressor.prototype._read = function _read() {\n  // We only push!\n};\n\nCompressor.prototype._write = function _write(data, enc, cb) {\n  assert(Array.isArray(data), 'Compressor.write() expects list of headers');\n\n  this._encoder = encoder.create();\n  for (var i = 0; i < data.length; i++)\n    this._encodeHeader(data[i]);\n\n  var data = this._encoder.render();\n  this._encoder = null;\n\n  cb(null);\n  for (var i = 0; i < data.length; i++)\n    this.push(data[i]);\n};\n\nCompressor.prototype.updateTableSize = function updateTableSize(size) {\n  if (size >= this._table.protocolMaxSize) {\n    size = this._table.protocolMaxSize;\n\n    var enc = encoder.create();\n\n    // indexed = 0\n    // incremental = 0\n    // update = 1\n    enc.encodeBits(1, 3);\n    enc.encodeInt(size);\n\n    var data = enc.render();\n    for (var i = 0; i < data.length; i++)\n      this.push(data[i]);\n  }\n\n  this._table.updateSize(size);\n};\n\nCompressor.prototype.reset = function reset() {\n  var enc = encoder.create();\n  var size = this._table.maxSize;\n\n  // indexed = 0\n  // incremental = 0\n  // update = 1\n  enc.encodeBits(1, 3);\n  enc.encodeInt(0);\n\n  // Evict everything\n  this._table.updateSize(0);\n\n  // indexed = 0\n  // incremental = 0\n  // update = 1\n  enc.encodeBits(1, 3);\n  enc.encodeInt(size);\n\n  // Revert size\n  this._table.updateSize(size);\n\n  var data = enc.render();\n  for (var i = 0; i < data.length; i++)\n    this.push(data[i]);\n};\n\nCompressor.prototype._encodeHeader = function _encodeHeader(header) {\n  if (header.neverIndex) {\n    var index = 0;\n    var neverIndex = 1;\n    var isIndexed = 0;\n    var isIncremental = 0;\n  } else {\n    var index = this._table.reverseLookup(header.name, header.value);\n    var isIndexed = index > 0;\n    var isIncremental = header.incremental !== false;\n    var neverIndex = 0;\n  }\n\n  this._encoder.encodeBit(isIndexed);\n  if (isIndexed) {\n    this._encoder.encodeInt(index);\n    return;\n  }\n\n  var name = utils.toArray(header.name);\n  var value = utils.toArray(header.value);\n\n  this._encoder.encodeBit(isIncremental);\n  if (isIncremental) {\n    this._table.add(header.name, header.value, name.length, value.length);\n  } else {\n    // Update = false\n    this._encoder.encodeBit(0);\n    this._encoder.encodeBit(neverIndex);\n  }\n\n  // index is negative for `name`-only headers\n  this._encoder.encodeInt(-index);\n  if (index === 0)\n    this._encoder.encodeStr(name, header.huffman !== false);\n  this._encoder.encodeStr(value, header.huffman !== false);\n};\n"},"sourceMaps":null,"error":null,"hash":"1db8e1ed5b7ce7e38a2b941e342f64a7","cacheData":{"env":{}}}