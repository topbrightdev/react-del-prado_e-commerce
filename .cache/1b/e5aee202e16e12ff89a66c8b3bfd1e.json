{"id":"../node_modules/postcss-values-parser/lib/node.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-values-parser/package.json","includedInParent":true,"mtime":1594570879022}],"generated":{"js":"'use strict';\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar cloneNode = function cloneNode(obj, parent) {\n  var cloned = new obj.constructor();\n\n  for (var i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    var value = obj[i],\n        type = typeof value;\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent;\n    } else if (i === 'source') {\n      cloned[i] = value;\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(function (j) {\n        return cloneNode(j, cloned);\n      });\n    } else if (i !== 'before' && i !== 'after' && i !== 'between' && i !== 'semicolon') {\n      if (type === 'object' && value !== null) value = cloneNode(value);\n      cloned[i] = value;\n    }\n  }\n\n  return cloned;\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  function Node(defaults) {\n    _classCallCheck(this, Node);\n\n    defaults = defaults || {};\n    this.raws = {\n      before: '',\n      after: ''\n    };\n\n    for (var name in defaults) {\n      this[name] = defaults[name];\n    }\n  }\n\n  _createClass(Node, [{\n    key: \"remove\",\n    value: function remove() {\n      if (this.parent) {\n        this.parent.removeChild(this);\n      }\n\n      this.parent = undefined;\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return [this.raws.before, String(this.value), this.raws.after].join('');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(overrides) {\n      overrides = overrides || {};\n      var cloned = cloneNode(this);\n\n      for (var name in overrides) {\n        cloned[name] = overrides[name];\n      }\n\n      return cloned;\n    }\n  }, {\n    key: \"cloneBefore\",\n    value: function cloneBefore(overrides) {\n      overrides = overrides || {};\n      var cloned = this.clone(overrides);\n      this.parent.insertBefore(this, cloned);\n      return cloned;\n    }\n  }, {\n    key: \"cloneAfter\",\n    value: function cloneAfter(overrides) {\n      overrides = overrides || {};\n      var cloned = this.clone(overrides);\n      this.parent.insertAfter(this, cloned);\n      return cloned;\n    }\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith() {\n      var nodes = Array.prototype.slice.call(arguments);\n\n      if (this.parent) {\n        var _iterator = _createForOfIteratorHelper(nodes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value;\n            this.parent.insertBefore(this, node);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.remove();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(container) {\n      this.cleanRaws(this.root() === container.root());\n      this.remove();\n      container.append(this);\n      return this;\n    }\n  }, {\n    key: \"moveBefore\",\n    value: function moveBefore(node) {\n      this.cleanRaws(this.root() === node.root());\n      this.remove();\n      node.parent.insertBefore(node, this);\n      return this;\n    }\n  }, {\n    key: \"moveAfter\",\n    value: function moveAfter(node) {\n      this.cleanRaws(this.root() === node.root());\n      this.remove();\n      node.parent.insertAfter(node, this);\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var index = this.parent.index(this);\n      return this.parent.nodes[index + 1];\n    }\n  }, {\n    key: \"prev\",\n    value: function prev() {\n      var index = this.parent.index(this);\n      return this.parent.nodes[index - 1];\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var fixed = {};\n\n      for (var name in this) {\n        if (!this.hasOwnProperty(name)) continue;\n        if (name === 'parent') continue;\n        var value = this[name];\n\n        if (value instanceof Array) {\n          fixed[name] = value.map(function (i) {\n            if (typeof i === 'object' && i.toJSON) {\n              return i.toJSON();\n            } else {\n              return i;\n            }\n          });\n        } else if (typeof value === 'object' && value.toJSON) {\n          fixed[name] = value.toJSON();\n        } else {\n          fixed[name] = value;\n        }\n      }\n\n      return fixed;\n    }\n  }, {\n    key: \"root\",\n    value: function root() {\n      var result = this;\n\n      while (result.parent) {\n        result = result.parent;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"cleanRaws\",\n    value: function cleanRaws(keepBetween) {\n      delete this.raws.before;\n      delete this.raws.after;\n      if (!keepBetween) delete this.raws.between;\n    }\n  }, {\n    key: \"positionInside\",\n    value: function positionInside(index) {\n      var string = this.toString(),\n          column = this.source.start.column,\n          line = this.source.start.line;\n\n      for (var i = 0; i < index; i++) {\n        if (string[i] === '\\n') {\n          column = 1;\n          line += 1;\n        } else {\n          column += 1;\n        }\n      }\n\n      return {\n        line,\n        column\n      };\n    }\n  }, {\n    key: \"positionBy\",\n    value: function positionBy(opts) {\n      var pos = this.source.start;\n\n      if (Object(opts).index) {\n        pos = this.positionInside(opts.index);\n      } else if (Object(opts).word) {\n        var index = this.toString().indexOf(opts.word);\n        if (index !== -1) pos = this.positionInside(index);\n      }\n\n      return pos;\n    }\n  }]);\n\n  return Node;\n}();"},"sourceMaps":null,"error":null,"hash":"6aa805639cc80d66f8566c6b15dc5121","cacheData":{"env":{}}}