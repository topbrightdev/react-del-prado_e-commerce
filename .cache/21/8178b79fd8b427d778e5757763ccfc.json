{"id":"../node_modules/sockjs/lib/transport.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/package.json","includedInParent":true,"mtime":1594306881442},{"name":"stream","loc":{"line":7,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/transport.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/stream-browserify/index.js"},{"name":"uuid/v4","loc":{"line":9,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/transport.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/uuid/v4.js"},{"name":"./utils","loc":{"line":11,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/transport.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/utils.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/transport.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n// Generated by CoffeeScript 1.12.7\n(function() {\n  var GenericReceiver, MAP, ResponseReceiver, Session, SockJSConnection, Transport, closeFrame, register, stream, utils, uuidv4,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  stream = require('stream');\n\n  uuidv4 = require('uuid/v4');\n\n  utils = require('./utils');\n\n  Transport = (function() {\n    function Transport() {}\n\n    return Transport;\n\n  })();\n\n  Transport.CONNECTING = 0;\n\n  Transport.OPEN = 1;\n\n  Transport.CLOSING = 2;\n\n  Transport.CLOSED = 3;\n\n  closeFrame = function(status, reason) {\n    return 'c' + JSON.stringify([status, reason]);\n  };\n\n  SockJSConnection = (function(superClass) {\n    extend(SockJSConnection, superClass);\n\n    function SockJSConnection(_session) {\n      this._session = _session;\n      this.id = uuidv4();\n      this.headers = {};\n      this.prefix = this._session.prefix;\n    }\n\n    SockJSConnection.prototype.toString = function() {\n      return '<SockJSConnection ' + this.id + '>';\n    };\n\n    SockJSConnection.prototype.write = function(string) {\n      return this._session.send('' + string);\n    };\n\n    SockJSConnection.prototype.end = function(string) {\n      if (string) {\n        this.write(string);\n      }\n      this.close();\n      return null;\n    };\n\n    SockJSConnection.prototype.close = function(code, reason) {\n      return this._session.close(code, reason);\n    };\n\n    SockJSConnection.prototype.destroy = function() {\n      this.end();\n      return this.removeAllListeners();\n    };\n\n    SockJSConnection.prototype.destroySoon = function() {\n      return this.destroy();\n    };\n\n    return SockJSConnection;\n\n  })(stream.Stream);\n\n  SockJSConnection.prototype.__defineGetter__('readable', function() {\n    return this._session.readyState === Transport.OPEN;\n  });\n\n  SockJSConnection.prototype.__defineGetter__('writable', function() {\n    return this._session.readyState === Transport.OPEN;\n  });\n\n  SockJSConnection.prototype.__defineGetter__('readyState', function() {\n    return this._session.readyState;\n  });\n\n  MAP = {};\n\n  Session = (function() {\n    function Session(session_id1, server) {\n      this.session_id = session_id1;\n      this.heartbeat_delay = server.options.heartbeat_delay;\n      this.disconnect_delay = server.options.disconnect_delay;\n      this.prefix = server.options.prefix;\n      this.send_buffer = [];\n      this.is_closing = false;\n      this.readyState = Transport.CONNECTING;\n      if (this.session_id) {\n        MAP[this.session_id] = this;\n      }\n      this.timeout_cb = (function(_this) {\n        return function() {\n          return _this.didTimeout();\n        };\n      })(this);\n      this.to_tref = setTimeout(this.timeout_cb, this.disconnect_delay);\n      this.connection = new SockJSConnection(this);\n      this.emit_open = (function(_this) {\n        return function() {\n          _this.emit_open = null;\n          return server.emit('connection', _this.connection);\n        };\n      })(this);\n    }\n\n    Session.prototype.register = function(req, recv) {\n      if (this.recv) {\n        recv.doSendFrame(closeFrame(2010, \"Another connection still open\"));\n        recv.didClose();\n        return;\n      }\n      if (this.to_tref) {\n        clearTimeout(this.to_tref);\n        this.to_tref = null;\n      }\n      if (this.readyState === Transport.CLOSING) {\n        this.flushToRecv(recv);\n        recv.doSendFrame(this.close_frame);\n        recv.didClose();\n        this.to_tref = setTimeout(this.timeout_cb, this.disconnect_delay);\n        return;\n      }\n      this.recv = recv;\n      this.recv.session = this;\n      this.decorateConnection(req);\n      if (this.readyState === Transport.CONNECTING) {\n        this.recv.doSendFrame('o');\n        this.readyState = Transport.OPEN;\n        process.nextTick(this.emit_open);\n      }\n      if (!this.recv) {\n        return;\n      }\n      this.tryFlush();\n    };\n\n    Session.prototype.decorateConnection = function(req) {\n      var address, headers, i, key, len, ref, remoteAddress, remotePort, socket, x;\n      if (!(socket = this.recv.connection)) {\n        socket = this.recv.response.connection;\n      }\n      try {\n        remoteAddress = socket.remoteAddress;\n        remotePort = socket.remotePort;\n        address = socket.address();\n      } catch (error) {\n        x = error;\n      }\n      if (remoteAddress) {\n        this.connection.remoteAddress = remoteAddress;\n        this.connection.remotePort = remotePort;\n        this.connection.address = address;\n      }\n      this.connection.url = req.url;\n      this.connection.pathname = req.pathname;\n      this.connection.protocol = this.recv.protocol;\n      headers = {};\n      ref = ['referer', 'x-client-ip', 'x-forwarded-for', 'x-forwarded-host', 'x-forwarded-port', 'x-cluster-client-ip', 'via', 'x-real-ip', 'x-forwarded-proto', 'x-ssl', 'dnt', 'host', 'user-agent', 'accept-language'];\n      for (i = 0, len = ref.length; i < len; i++) {\n        key = ref[i];\n        if (req.headers[key]) {\n          headers[key] = req.headers[key];\n        }\n      }\n      if (headers) {\n        return this.connection.headers = headers;\n      }\n    };\n\n    Session.prototype.unregister = function() {\n      var delay;\n      delay = this.recv.delay_disconnect;\n      this.recv.session = null;\n      this.recv = null;\n      if (this.to_tref) {\n        clearTimeout(this.to_tref);\n      }\n      if (delay) {\n        return this.to_tref = setTimeout(this.timeout_cb, this.disconnect_delay);\n      } else {\n        return this.timeout_cb();\n      }\n    };\n\n    Session.prototype.flushToRecv = function(recv) {\n      var ref, sb;\n      if (this.send_buffer.length > 0) {\n        ref = [this.send_buffer, []], sb = ref[0], this.send_buffer = ref[1];\n        recv.doSendBulk(sb);\n        return true;\n      }\n      return false;\n    };\n\n    Session.prototype.tryFlush = function() {\n      var x;\n      if (!this.flushToRecv(this.recv) || !this.to_tref) {\n        if (this.to_tref) {\n          clearTimeout(this.to_tref);\n        }\n        x = (function(_this) {\n          return function() {\n            if (_this.recv) {\n              _this.to_tref = setTimeout(x, _this.heartbeat_delay);\n              return _this.recv.heartbeat();\n            }\n          };\n        })(this);\n        this.to_tref = setTimeout(x, this.heartbeat_delay);\n      }\n    };\n\n    Session.prototype.didTimeout = function() {\n      if (this.to_tref) {\n        clearTimeout(this.to_tref);\n        this.to_tref = null;\n      }\n      if (this.readyState !== Transport.CONNECTING && this.readyState !== Transport.OPEN && this.readyState !== Transport.CLOSING) {\n        throw Error('INVALID_STATE_ERR');\n      }\n      if (this.recv) {\n        throw Error('RECV_STILL_THERE');\n      }\n      this.readyState = Transport.CLOSED;\n      this.connection.emit('end');\n      this.connection.emit('close');\n      this.connection = null;\n      if (this.session_id) {\n        delete MAP[this.session_id];\n        return this.session_id = null;\n      }\n    };\n\n    Session.prototype.didMessage = function(payload) {\n      if (this.readyState === Transport.OPEN) {\n        this.connection.emit('data', payload);\n      }\n    };\n\n    Session.prototype.send = function(payload) {\n      if (this.readyState !== Transport.OPEN) {\n        return false;\n      }\n      this.send_buffer.push('' + payload);\n      if (this.recv) {\n        this.tryFlush();\n      }\n      return true;\n    };\n\n    Session.prototype.close = function(status, reason) {\n      if (status == null) {\n        status = 1000;\n      }\n      if (reason == null) {\n        reason = \"Normal closure\";\n      }\n      if (this.readyState !== Transport.OPEN) {\n        return false;\n      }\n      this.readyState = Transport.CLOSING;\n      this.close_frame = closeFrame(status, reason);\n      if (this.recv) {\n        this.recv.doSendFrame(this.close_frame);\n        if (this.recv) {\n          this.recv.didClose();\n        }\n        if (this.recv) {\n          this.unregister();\n        }\n      }\n      return true;\n    };\n\n    return Session;\n\n  })();\n\n  Session.bySessionId = function(session_id) {\n    if (!session_id) {\n      return null;\n    }\n    return MAP[session_id] || null;\n  };\n\n  register = function(req, server, session_id, receiver) {\n    var session;\n    session = Session.bySessionId(session_id);\n    if (!session) {\n      session = new Session(session_id, server);\n    }\n    session.register(req, receiver);\n    return session;\n  };\n\n  exports.register = function(req, server, receiver) {\n    return register(req, server, req.session, receiver);\n  };\n\n  exports.registerNoSession = function(req, server, receiver) {\n    return register(req, server, void 0, receiver);\n  };\n\n  GenericReceiver = (function() {\n    function GenericReceiver(thingy) {\n      this.thingy = thingy;\n      this.setUp(this.thingy);\n    }\n\n    GenericReceiver.prototype.setUp = function() {\n      this.thingy_end_cb = (function(_this) {\n        return function() {\n          return _this.didAbort();\n        };\n      })(this);\n      this.thingy.addListener('close', this.thingy_end_cb);\n      return this.thingy.addListener('end', this.thingy_end_cb);\n    };\n\n    GenericReceiver.prototype.tearDown = function() {\n      this.thingy.removeListener('close', this.thingy_end_cb);\n      this.thingy.removeListener('end', this.thingy_end_cb);\n      return this.thingy_end_cb = null;\n    };\n\n    GenericReceiver.prototype.didAbort = function() {\n      this.delay_disconnect = false;\n      return this.didClose();\n    };\n\n    GenericReceiver.prototype.didClose = function() {\n      if (this.thingy) {\n        this.tearDown(this.thingy);\n        this.thingy = null;\n      }\n      if (this.session) {\n        return this.session.unregister();\n      }\n    };\n\n    GenericReceiver.prototype.doSendBulk = function(messages) {\n      var m, q_msgs;\n      q_msgs = (function() {\n        var i, len, results;\n        results = [];\n        for (i = 0, len = messages.length; i < len; i++) {\n          m = messages[i];\n          results.push(utils.quote(m));\n        }\n        return results;\n      })();\n      return this.doSendFrame('a' + '[' + q_msgs.join(',') + ']');\n    };\n\n    GenericReceiver.prototype.heartbeat = function() {\n      return this.doSendFrame('h');\n    };\n\n    return GenericReceiver;\n\n  })();\n\n  ResponseReceiver = (function(superClass) {\n    extend(ResponseReceiver, superClass);\n\n    ResponseReceiver.prototype.max_response_size = void 0;\n\n    ResponseReceiver.prototype.delay_disconnect = true;\n\n    function ResponseReceiver(request, response, options) {\n      var x;\n      this.request = request;\n      this.response = response;\n      this.options = options;\n      this.curr_response_size = 0;\n      try {\n        this.request.connection.setKeepAlive(true, 5000);\n      } catch (error) {\n        x = error;\n      }\n      ResponseReceiver.__super__.constructor.call(this, this.request.connection);\n      if (this.max_response_size === void 0) {\n        this.max_response_size = this.options.response_limit;\n      }\n    }\n\n    ResponseReceiver.prototype.doSendFrame = function(payload) {\n      var r, x;\n      this.curr_response_size += payload.length;\n      r = false;\n      try {\n        this.response.write(payload);\n        r = true;\n      } catch (error) {\n        x = error;\n      }\n      if (this.max_response_size && this.curr_response_size >= this.max_response_size) {\n        this.didClose();\n      }\n      return r;\n    };\n\n    ResponseReceiver.prototype.didClose = function() {\n      var x;\n      ResponseReceiver.__super__.didClose.apply(this, arguments);\n      try {\n        this.response.end();\n      } catch (error) {\n        x = error;\n      }\n      return this.response = null;\n    };\n\n    return ResponseReceiver;\n\n  })(GenericReceiver);\n\n  exports.GenericReceiver = GenericReceiver;\n\n  exports.Transport = Transport;\n\n  exports.Session = Session;\n\n  exports.ResponseReceiver = ResponseReceiver;\n\n  exports.SockJSConnection = SockJSConnection;\n\n}).call(this);\n"},"sourceMaps":null,"error":null,"hash":"b173b0f25791c495fd322a38a5b33c1b","cacheData":{"env":{}}}