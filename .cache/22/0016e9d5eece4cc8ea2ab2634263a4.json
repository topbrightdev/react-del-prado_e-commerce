{"id":"../node_modules/webpack/node_modules/@webassemblyjs/ast/esm/nodes.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/ast/package.json","includedInParent":true,"mtime":1594578778157}],"generated":{"js":"\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.module = _module;\nexports.moduleMetadata = moduleMetadata;\nexports.moduleNameMetadata = moduleNameMetadata;\nexports.functionNameMetadata = functionNameMetadata;\nexports.localNameMetadata = localNameMetadata;\nexports.binaryModule = binaryModule;\nexports.quoteModule = quoteModule;\nexports.sectionMetadata = sectionMetadata;\nexports.producersSectionMetadata = producersSectionMetadata;\nexports.producerMetadata = producerMetadata;\nexports.producerMetadataVersionedName = producerMetadataVersionedName;\nexports.loopInstruction = loopInstruction;\nexports.instr = instr;\nexports.ifInstruction = ifInstruction;\nexports.stringLiteral = stringLiteral;\nexports.numberLiteral = numberLiteral;\nexports.longNumberLiteral = longNumberLiteral;\nexports.floatLiteral = floatLiteral;\nexports.elem = elem;\nexports.indexInFuncSection = indexInFuncSection;\nexports.valtypeLiteral = valtypeLiteral;\nexports.typeInstruction = typeInstruction;\nexports.start = start;\nexports.globalType = globalType;\nexports.leadingComment = leadingComment;\nexports.blockComment = blockComment;\nexports.data = data;\nexports.global = global;\nexports.table = table;\nexports.memory = memory;\nexports.funcImportDescr = funcImportDescr;\nexports.moduleImport = moduleImport;\nexports.moduleExportDescr = moduleExportDescr;\nexports.moduleExport = moduleExport;\nexports.limit = limit;\nexports.signature = signature;\nexports.program = program;\nexports.identifier = identifier;\nexports.blockInstruction = blockInstruction;\nexports.callInstruction = callInstruction;\nexports.callIndirectInstruction = callIndirectInstruction;\nexports.byteArray = byteArray;\nexports.func = func;\nexports.internalBrUnless = internalBrUnless;\nexports.internalGoto = internalGoto;\nexports.internalCallExtern = internalCallExtern;\nexports.internalEndAndReturn = internalEndAndReturn;\nexports.assertInternalCallExtern = exports.assertInternalGoto = exports.assertInternalBrUnless = exports.assertFunc = exports.assertByteArray = exports.assertCallIndirectInstruction = exports.assertCallInstruction = exports.assertBlockInstruction = exports.assertIdentifier = exports.assertProgram = exports.assertSignature = exports.assertLimit = exports.assertModuleExport = exports.assertModuleExportDescr = exports.assertModuleImport = exports.assertFuncImportDescr = exports.assertMemory = exports.assertTable = exports.assertGlobal = exports.assertData = exports.assertBlockComment = exports.assertLeadingComment = exports.assertGlobalType = exports.assertStart = exports.assertTypeInstruction = exports.assertValtypeLiteral = exports.assertIndexInFuncSection = exports.assertElem = exports.assertFloatLiteral = exports.assertLongNumberLiteral = exports.assertNumberLiteral = exports.assertStringLiteral = exports.assertIfInstruction = exports.assertInstr = exports.assertLoopInstruction = exports.assertProducerMetadataVersionedName = exports.assertProducerMetadata = exports.assertProducersSectionMetadata = exports.assertSectionMetadata = exports.assertQuoteModule = exports.assertBinaryModule = exports.assertLocalNameMetadata = exports.assertFunctionNameMetadata = exports.assertModuleNameMetadata = exports.assertModuleMetadata = exports.assertModule = exports.isIntrinsic = exports.isImportDescr = exports.isNumericLiteral = exports.isExpression = exports.isInstruction = exports.isBlock = exports.isNode = exports.isInternalEndAndReturn = exports.isInternalCallExtern = exports.isInternalGoto = exports.isInternalBrUnless = exports.isFunc = exports.isByteArray = exports.isCallIndirectInstruction = exports.isCallInstruction = exports.isBlockInstruction = exports.isIdentifier = exports.isProgram = exports.isSignature = exports.isLimit = exports.isModuleExport = exports.isModuleExportDescr = exports.isModuleImport = exports.isFuncImportDescr = exports.isMemory = exports.isTable = exports.isGlobal = exports.isData = exports.isBlockComment = exports.isLeadingComment = exports.isGlobalType = exports.isStart = exports.isTypeInstruction = exports.isValtypeLiteral = exports.isIndexInFuncSection = exports.isElem = exports.isFloatLiteral = exports.isLongNumberLiteral = exports.isNumberLiteral = exports.isStringLiteral = exports.isIfInstruction = exports.isInstr = exports.isLoopInstruction = exports.isProducerMetadataVersionedName = exports.isProducerMetadata = exports.isProducersSectionMetadata = exports.isSectionMetadata = exports.isQuoteModule = exports.isBinaryModule = exports.isLocalNameMetadata = exports.isFunctionNameMetadata = exports.isModuleNameMetadata = exports.isModuleMetadata = exports.isModule = void 0;\nexports.nodeAndUnionTypes = exports.unionTypesMap = exports.assertInternalEndAndReturn = void 0;\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n} // THIS FILE IS AUTOGENERATED\n// see scripts/generateNodeUtils.js\n\n\nfunction isTypeOf(t) {\n  return function (n) {\n    return n.type === t;\n  };\n}\n\nfunction assertTypeOf(t) {\n  return function (n) {\n    return function () {\n      if (!(n.type === t)) {\n        throw new Error('n.type === t' + \" error: \" + (undefined || \"unknown\"));\n      }\n    }();\n  };\n}\n\nfunction _module(id, fields, metadata) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(fields) === \"object\" && typeof fields.length !== \"undefined\")) {\n    throw new Error('typeof fields === \"object\" && typeof fields.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Module\",\n    id: id,\n    fields: fields\n  };\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction moduleMetadata(sections, functionNames, localNames, producers) {\n  if (!(_typeof(sections) === \"object\" && typeof sections.length !== \"undefined\")) {\n    throw new Error('typeof sections === \"object\" && typeof sections.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (functionNames !== null && functionNames !== undefined) {\n    if (!(_typeof(functionNames) === \"object\" && typeof functionNames.length !== \"undefined\")) {\n      throw new Error('typeof functionNames === \"object\" && typeof functionNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (localNames !== null && localNames !== undefined) {\n    if (!(_typeof(localNames) === \"object\" && typeof localNames.length !== \"undefined\")) {\n      throw new Error('typeof localNames === \"object\" && typeof localNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (producers !== null && producers !== undefined) {\n    if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n      throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"ModuleMetadata\",\n    sections: sections\n  };\n\n  if (typeof functionNames !== \"undefined\" && functionNames.length > 0) {\n    node.functionNames = functionNames;\n  }\n\n  if (typeof localNames !== \"undefined\" && localNames.length > 0) {\n    node.localNames = localNames;\n  }\n\n  if (typeof producers !== \"undefined\" && producers.length > 0) {\n    node.producers = producers;\n  }\n\n  return node;\n}\n\nfunction moduleNameMetadata(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleNameMetadata\",\n    value: value\n  };\n  return node;\n}\n\nfunction functionNameMetadata(value, index) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof index === \"number\")) {\n    throw new Error('typeof index === \"number\"' + \" error: \" + (\"Argument index must be of type number, given: \" + _typeof(index) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FunctionNameMetadata\",\n    value: value,\n    index: index\n  };\n  return node;\n}\n\nfunction localNameMetadata(value, localIndex, functionIndex) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof localIndex === \"number\")) {\n    throw new Error('typeof localIndex === \"number\"' + \" error: \" + (\"Argument localIndex must be of type number, given: \" + _typeof(localIndex) || \"unknown\"));\n  }\n\n  if (!(typeof functionIndex === \"number\")) {\n    throw new Error('typeof functionIndex === \"number\"' + \" error: \" + (\"Argument functionIndex must be of type number, given: \" + _typeof(functionIndex) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LocalNameMetadata\",\n    value: value,\n    localIndex: localIndex,\n    functionIndex: functionIndex\n  };\n  return node;\n}\n\nfunction binaryModule(id, blob) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(blob) === \"object\" && typeof blob.length !== \"undefined\")) {\n    throw new Error('typeof blob === \"object\" && typeof blob.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BinaryModule\",\n    id: id,\n    blob: blob\n  };\n  return node;\n}\n\nfunction quoteModule(id, string) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(string) === \"object\" && typeof string.length !== \"undefined\")) {\n    throw new Error('typeof string === \"object\" && typeof string.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"QuoteModule\",\n    id: id,\n    string: string\n  };\n  return node;\n}\n\nfunction sectionMetadata(section, startOffset, size, vectorOfSize) {\n  if (!(typeof startOffset === \"number\")) {\n    throw new Error('typeof startOffset === \"number\"' + \" error: \" + (\"Argument startOffset must be of type number, given: \" + _typeof(startOffset) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"SectionMetadata\",\n    section: section,\n    startOffset: startOffset,\n    size: size,\n    vectorOfSize: vectorOfSize\n  };\n  return node;\n}\n\nfunction producersSectionMetadata(producers) {\n  if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n    throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducersSectionMetadata\",\n    producers: producers\n  };\n  return node;\n}\n\nfunction producerMetadata(language, processedBy, sdk) {\n  if (!(_typeof(language) === \"object\" && typeof language.length !== \"undefined\")) {\n    throw new Error('typeof language === \"object\" && typeof language.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(processedBy) === \"object\" && typeof processedBy.length !== \"undefined\")) {\n    throw new Error('typeof processedBy === \"object\" && typeof processedBy.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(sdk) === \"object\" && typeof sdk.length !== \"undefined\")) {\n    throw new Error('typeof sdk === \"object\" && typeof sdk.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadata\",\n    language: language,\n    processedBy: processedBy,\n    sdk: sdk\n  };\n  return node;\n}\n\nfunction producerMetadataVersionedName(name, version) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  if (!(typeof version === \"string\")) {\n    throw new Error('typeof version === \"string\"' + \" error: \" + (\"Argument version must be of type string, given: \" + _typeof(version) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadataVersionedName\",\n    name: name,\n    version: version\n  };\n  return node;\n}\n\nfunction loopInstruction(label, resulttype, instr) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LoopInstruction\",\n    id: \"loop\",\n    label: label,\n    resulttype: resulttype,\n    instr: instr\n  };\n  return node;\n}\n\nfunction instr(id, object, args, namedArgs) {\n  if (!(typeof id === \"string\")) {\n    throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n  }\n\n  if (!(_typeof(args) === \"object\" && typeof args.length !== \"undefined\")) {\n    throw new Error('typeof args === \"object\" && typeof args.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Instr\",\n    id: id,\n    args: args\n  };\n\n  if (typeof object !== \"undefined\") {\n    node.object = object;\n  }\n\n  if (typeof namedArgs !== \"undefined\" && Object.keys(namedArgs).length !== 0) {\n    node.namedArgs = namedArgs;\n  }\n\n  return node;\n}\n\nfunction ifInstruction(testLabel, test, result, consequent, alternate) {\n  if (!(_typeof(test) === \"object\" && typeof test.length !== \"undefined\")) {\n    throw new Error('typeof test === \"object\" && typeof test.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(consequent) === \"object\" && typeof consequent.length !== \"undefined\")) {\n    throw new Error('typeof consequent === \"object\" && typeof consequent.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(alternate) === \"object\" && typeof alternate.length !== \"undefined\")) {\n    throw new Error('typeof alternate === \"object\" && typeof alternate.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"IfInstruction\",\n    id: \"if\",\n    testLabel: testLabel,\n    test: test,\n    result: result,\n    consequent: consequent,\n    alternate: alternate\n  };\n  return node;\n}\n\nfunction stringLiteral(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"StringLiteral\",\n    value: value\n  };\n  return node;\n}\n\nfunction numberLiteral(value, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"NumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction longNumberLiteral(value, raw) {\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LongNumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction floatLiteral(value, nan, inf, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (nan !== null && nan !== undefined) {\n    if (!(typeof nan === \"boolean\")) {\n      throw new Error('typeof nan === \"boolean\"' + \" error: \" + (\"Argument nan must be of type boolean, given: \" + _typeof(nan) || \"unknown\"));\n    }\n  }\n\n  if (inf !== null && inf !== undefined) {\n    if (!(typeof inf === \"boolean\")) {\n      throw new Error('typeof inf === \"boolean\"' + \" error: \" + (\"Argument inf must be of type boolean, given: \" + _typeof(inf) || \"unknown\"));\n    }\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FloatLiteral\",\n    value: value,\n    raw: raw\n  };\n\n  if (nan === true) {\n    node.nan = true;\n  }\n\n  if (inf === true) {\n    node.inf = true;\n  }\n\n  return node;\n}\n\nfunction elem(table, offset, funcs) {\n  if (!(_typeof(offset) === \"object\" && typeof offset.length !== \"undefined\")) {\n    throw new Error('typeof offset === \"object\" && typeof offset.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(funcs) === \"object\" && typeof funcs.length !== \"undefined\")) {\n    throw new Error('typeof funcs === \"object\" && typeof funcs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Elem\",\n    table: table,\n    offset: offset,\n    funcs: funcs\n  };\n  return node;\n}\n\nfunction indexInFuncSection(index) {\n  var node = {\n    type: \"IndexInFuncSection\",\n    index: index\n  };\n  return node;\n}\n\nfunction valtypeLiteral(name) {\n  var node = {\n    type: \"ValtypeLiteral\",\n    name: name\n  };\n  return node;\n}\n\nfunction typeInstruction(id, functype) {\n  var node = {\n    type: \"TypeInstruction\",\n    id: id,\n    functype: functype\n  };\n  return node;\n}\n\nfunction start(index) {\n  var node = {\n    type: \"Start\",\n    index: index\n  };\n  return node;\n}\n\nfunction globalType(valtype, mutability) {\n  var node = {\n    type: \"GlobalType\",\n    valtype: valtype,\n    mutability: mutability\n  };\n  return node;\n}\n\nfunction leadingComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LeadingComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction blockComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction data(memoryIndex, offset, init) {\n  var node = {\n    type: \"Data\",\n    memoryIndex: memoryIndex,\n    offset: offset,\n    init: init\n  };\n  return node;\n}\n\nfunction global(globalType, init, name) {\n  if (!(_typeof(init) === \"object\" && typeof init.length !== \"undefined\")) {\n    throw new Error('typeof init === \"object\" && typeof init.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Global\",\n    globalType: globalType,\n    init: init,\n    name: name\n  };\n  return node;\n}\n\nfunction table(elementType, limits, name, elements) {\n  if (!(limits.type === \"Limit\")) {\n    throw new Error('limits.type === \"Limit\"' + \" error: \" + (\"Argument limits must be of type Limit, given: \" + limits.type || \"unknown\"));\n  }\n\n  if (elements !== null && elements !== undefined) {\n    if (!(_typeof(elements) === \"object\" && typeof elements.length !== \"undefined\")) {\n      throw new Error('typeof elements === \"object\" && typeof elements.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Table\",\n    elementType: elementType,\n    limits: limits,\n    name: name\n  };\n\n  if (typeof elements !== \"undefined\" && elements.length > 0) {\n    node.elements = elements;\n  }\n\n  return node;\n}\n\nfunction memory(limits, id) {\n  var node = {\n    type: \"Memory\",\n    limits: limits,\n    id: id\n  };\n  return node;\n}\n\nfunction funcImportDescr(id, signature) {\n  var node = {\n    type: \"FuncImportDescr\",\n    id: id,\n    signature: signature\n  };\n  return node;\n}\n\nfunction moduleImport(module, name, descr) {\n  if (!(typeof module === \"string\")) {\n    throw new Error('typeof module === \"string\"' + \" error: \" + (\"Argument module must be of type string, given: \" + _typeof(module) || \"unknown\"));\n  }\n\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleImport\",\n    module: module,\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction moduleExportDescr(exportType, id) {\n  var node = {\n    type: \"ModuleExportDescr\",\n    exportType: exportType,\n    id: id\n  };\n  return node;\n}\n\nfunction moduleExport(name, descr) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleExport\",\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction limit(min, max) {\n  if (!(typeof min === \"number\")) {\n    throw new Error('typeof min === \"number\"' + \" error: \" + (\"Argument min must be of type number, given: \" + _typeof(min) || \"unknown\"));\n  }\n\n  if (max !== null && max !== undefined) {\n    if (!(typeof max === \"number\")) {\n      throw new Error('typeof max === \"number\"' + \" error: \" + (\"Argument max must be of type number, given: \" + _typeof(max) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Limit\",\n    min: min\n  };\n\n  if (typeof max !== \"undefined\") {\n    node.max = max;\n  }\n\n  return node;\n}\n\nfunction signature(params, results) {\n  if (!(_typeof(params) === \"object\" && typeof params.length !== \"undefined\")) {\n    throw new Error('typeof params === \"object\" && typeof params.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(results) === \"object\" && typeof results.length !== \"undefined\")) {\n    throw new Error('typeof results === \"object\" && typeof results.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Signature\",\n    params: params,\n    results: results\n  };\n  return node;\n}\n\nfunction program(body) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Program\",\n    body: body\n  };\n  return node;\n}\n\nfunction identifier(value, raw) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (raw !== null && raw !== undefined) {\n    if (!(typeof raw === \"string\")) {\n      throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Identifier\",\n    value: value\n  };\n\n  if (typeof raw !== \"undefined\") {\n    node.raw = raw;\n  }\n\n  return node;\n}\n\nfunction blockInstruction(label, instr, result) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockInstruction\",\n    id: \"block\",\n    label: label,\n    instr: instr,\n    result: result\n  };\n  return node;\n}\n\nfunction callInstruction(index, instrArgs, numeric) {\n  if (instrArgs !== null && instrArgs !== undefined) {\n    if (!(_typeof(instrArgs) === \"object\" && typeof instrArgs.length !== \"undefined\")) {\n      throw new Error('typeof instrArgs === \"object\" && typeof instrArgs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallInstruction\",\n    id: \"call\",\n    index: index\n  };\n\n  if (typeof instrArgs !== \"undefined\" && instrArgs.length > 0) {\n    node.instrArgs = instrArgs;\n  }\n\n  if (typeof numeric !== \"undefined\") {\n    node.numeric = numeric;\n  }\n\n  return node;\n}\n\nfunction callIndirectInstruction(signature, intrs) {\n  if (intrs !== null && intrs !== undefined) {\n    if (!(_typeof(intrs) === \"object\" && typeof intrs.length !== \"undefined\")) {\n      throw new Error('typeof intrs === \"object\" && typeof intrs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallIndirectInstruction\",\n    id: \"call_indirect\",\n    signature: signature\n  };\n\n  if (typeof intrs !== \"undefined\" && intrs.length > 0) {\n    node.intrs = intrs;\n  }\n\n  return node;\n}\n\nfunction byteArray(values) {\n  if (!(_typeof(values) === \"object\" && typeof values.length !== \"undefined\")) {\n    throw new Error('typeof values === \"object\" && typeof values.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ByteArray\",\n    values: values\n  };\n  return node;\n}\n\nfunction func(name, signature, body, isExternal, metadata) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (isExternal !== null && isExternal !== undefined) {\n    if (!(typeof isExternal === \"boolean\")) {\n      throw new Error('typeof isExternal === \"boolean\"' + \" error: \" + (\"Argument isExternal must be of type boolean, given: \" + _typeof(isExternal) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Func\",\n    name: name,\n    signature: signature,\n    body: body\n  };\n\n  if (isExternal === true) {\n    node.isExternal = true;\n  }\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction internalBrUnless(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalBrUnless\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalGoto(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalGoto\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalCallExtern(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalCallExtern\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalEndAndReturn() {\n  var node = {\n    type: \"InternalEndAndReturn\"\n  };\n  return node;\n}\n\nvar isModule = isTypeOf(\"Module\");\nexports.isModule = isModule;\nvar isModuleMetadata = isTypeOf(\"ModuleMetadata\");\nexports.isModuleMetadata = isModuleMetadata;\nvar isModuleNameMetadata = isTypeOf(\"ModuleNameMetadata\");\nexports.isModuleNameMetadata = isModuleNameMetadata;\nvar isFunctionNameMetadata = isTypeOf(\"FunctionNameMetadata\");\nexports.isFunctionNameMetadata = isFunctionNameMetadata;\nvar isLocalNameMetadata = isTypeOf(\"LocalNameMetadata\");\nexports.isLocalNameMetadata = isLocalNameMetadata;\nvar isBinaryModule = isTypeOf(\"BinaryModule\");\nexports.isBinaryModule = isBinaryModule;\nvar isQuoteModule = isTypeOf(\"QuoteModule\");\nexports.isQuoteModule = isQuoteModule;\nvar isSectionMetadata = isTypeOf(\"SectionMetadata\");\nexports.isSectionMetadata = isSectionMetadata;\nvar isProducersSectionMetadata = isTypeOf(\"ProducersSectionMetadata\");\nexports.isProducersSectionMetadata = isProducersSectionMetadata;\nvar isProducerMetadata = isTypeOf(\"ProducerMetadata\");\nexports.isProducerMetadata = isProducerMetadata;\nvar isProducerMetadataVersionedName = isTypeOf(\"ProducerMetadataVersionedName\");\nexports.isProducerMetadataVersionedName = isProducerMetadataVersionedName;\nvar isLoopInstruction = isTypeOf(\"LoopInstruction\");\nexports.isLoopInstruction = isLoopInstruction;\nvar isInstr = isTypeOf(\"Instr\");\nexports.isInstr = isInstr;\nvar isIfInstruction = isTypeOf(\"IfInstruction\");\nexports.isIfInstruction = isIfInstruction;\nvar isStringLiteral = isTypeOf(\"StringLiteral\");\nexports.isStringLiteral = isStringLiteral;\nvar isNumberLiteral = isTypeOf(\"NumberLiteral\");\nexports.isNumberLiteral = isNumberLiteral;\nvar isLongNumberLiteral = isTypeOf(\"LongNumberLiteral\");\nexports.isLongNumberLiteral = isLongNumberLiteral;\nvar isFloatLiteral = isTypeOf(\"FloatLiteral\");\nexports.isFloatLiteral = isFloatLiteral;\nvar isElem = isTypeOf(\"Elem\");\nexports.isElem = isElem;\nvar isIndexInFuncSection = isTypeOf(\"IndexInFuncSection\");\nexports.isIndexInFuncSection = isIndexInFuncSection;\nvar isValtypeLiteral = isTypeOf(\"ValtypeLiteral\");\nexports.isValtypeLiteral = isValtypeLiteral;\nvar isTypeInstruction = isTypeOf(\"TypeInstruction\");\nexports.isTypeInstruction = isTypeInstruction;\nvar isStart = isTypeOf(\"Start\");\nexports.isStart = isStart;\nvar isGlobalType = isTypeOf(\"GlobalType\");\nexports.isGlobalType = isGlobalType;\nvar isLeadingComment = isTypeOf(\"LeadingComment\");\nexports.isLeadingComment = isLeadingComment;\nvar isBlockComment = isTypeOf(\"BlockComment\");\nexports.isBlockComment = isBlockComment;\nvar isData = isTypeOf(\"Data\");\nexports.isData = isData;\nvar isGlobal = isTypeOf(\"Global\");\nexports.isGlobal = isGlobal;\nvar isTable = isTypeOf(\"Table\");\nexports.isTable = isTable;\nvar isMemory = isTypeOf(\"Memory\");\nexports.isMemory = isMemory;\nvar isFuncImportDescr = isTypeOf(\"FuncImportDescr\");\nexports.isFuncImportDescr = isFuncImportDescr;\nvar isModuleImport = isTypeOf(\"ModuleImport\");\nexports.isModuleImport = isModuleImport;\nvar isModuleExportDescr = isTypeOf(\"ModuleExportDescr\");\nexports.isModuleExportDescr = isModuleExportDescr;\nvar isModuleExport = isTypeOf(\"ModuleExport\");\nexports.isModuleExport = isModuleExport;\nvar isLimit = isTypeOf(\"Limit\");\nexports.isLimit = isLimit;\nvar isSignature = isTypeOf(\"Signature\");\nexports.isSignature = isSignature;\nvar isProgram = isTypeOf(\"Program\");\nexports.isProgram = isProgram;\nvar isIdentifier = isTypeOf(\"Identifier\");\nexports.isIdentifier = isIdentifier;\nvar isBlockInstruction = isTypeOf(\"BlockInstruction\");\nexports.isBlockInstruction = isBlockInstruction;\nvar isCallInstruction = isTypeOf(\"CallInstruction\");\nexports.isCallInstruction = isCallInstruction;\nvar isCallIndirectInstruction = isTypeOf(\"CallIndirectInstruction\");\nexports.isCallIndirectInstruction = isCallIndirectInstruction;\nvar isByteArray = isTypeOf(\"ByteArray\");\nexports.isByteArray = isByteArray;\nvar isFunc = isTypeOf(\"Func\");\nexports.isFunc = isFunc;\nvar isInternalBrUnless = isTypeOf(\"InternalBrUnless\");\nexports.isInternalBrUnless = isInternalBrUnless;\nvar isInternalGoto = isTypeOf(\"InternalGoto\");\nexports.isInternalGoto = isInternalGoto;\nvar isInternalCallExtern = isTypeOf(\"InternalCallExtern\");\nexports.isInternalCallExtern = isInternalCallExtern;\nvar isInternalEndAndReturn = isTypeOf(\"InternalEndAndReturn\");\nexports.isInternalEndAndReturn = isInternalEndAndReturn;\n\nvar isNode = function isNode(node) {\n  return isModule(node) || isModuleMetadata(node) || isModuleNameMetadata(node) || isFunctionNameMetadata(node) || isLocalNameMetadata(node) || isBinaryModule(node) || isQuoteModule(node) || isSectionMetadata(node) || isProducersSectionMetadata(node) || isProducerMetadata(node) || isProducerMetadataVersionedName(node) || isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isElem(node) || isIndexInFuncSection(node) || isValtypeLiteral(node) || isTypeInstruction(node) || isStart(node) || isGlobalType(node) || isLeadingComment(node) || isBlockComment(node) || isData(node) || isGlobal(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node) || isModuleImport(node) || isModuleExportDescr(node) || isModuleExport(node) || isLimit(node) || isSignature(node) || isProgram(node) || isIdentifier(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node) || isByteArray(node) || isFunc(node) || isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isNode = isNode;\n\nvar isBlock = function isBlock(node) {\n  return isLoopInstruction(node) || isBlockInstruction(node) || isFunc(node);\n};\n\nexports.isBlock = isBlock;\n\nvar isInstruction = function isInstruction(node) {\n  return isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isTypeInstruction(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node);\n};\n\nexports.isInstruction = isInstruction;\n\nvar isExpression = function isExpression(node) {\n  return isInstr(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isValtypeLiteral(node) || isIdentifier(node);\n};\n\nexports.isExpression = isExpression;\n\nvar isNumericLiteral = function isNumericLiteral(node) {\n  return isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node);\n};\n\nexports.isNumericLiteral = isNumericLiteral;\n\nvar isImportDescr = function isImportDescr(node) {\n  return isGlobalType(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node);\n};\n\nexports.isImportDescr = isImportDescr;\n\nvar isIntrinsic = function isIntrinsic(node) {\n  return isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isIntrinsic = isIntrinsic;\nvar assertModule = assertTypeOf(\"Module\");\nexports.assertModule = assertModule;\nvar assertModuleMetadata = assertTypeOf(\"ModuleMetadata\");\nexports.assertModuleMetadata = assertModuleMetadata;\nvar assertModuleNameMetadata = assertTypeOf(\"ModuleNameMetadata\");\nexports.assertModuleNameMetadata = assertModuleNameMetadata;\nvar assertFunctionNameMetadata = assertTypeOf(\"FunctionNameMetadata\");\nexports.assertFunctionNameMetadata = assertFunctionNameMetadata;\nvar assertLocalNameMetadata = assertTypeOf(\"LocalNameMetadata\");\nexports.assertLocalNameMetadata = assertLocalNameMetadata;\nvar assertBinaryModule = assertTypeOf(\"BinaryModule\");\nexports.assertBinaryModule = assertBinaryModule;\nvar assertQuoteModule = assertTypeOf(\"QuoteModule\");\nexports.assertQuoteModule = assertQuoteModule;\nvar assertSectionMetadata = assertTypeOf(\"SectionMetadata\");\nexports.assertSectionMetadata = assertSectionMetadata;\nvar assertProducersSectionMetadata = assertTypeOf(\"ProducersSectionMetadata\");\nexports.assertProducersSectionMetadata = assertProducersSectionMetadata;\nvar assertProducerMetadata = assertTypeOf(\"ProducerMetadata\");\nexports.assertProducerMetadata = assertProducerMetadata;\nvar assertProducerMetadataVersionedName = assertTypeOf(\"ProducerMetadataVersionedName\");\nexports.assertProducerMetadataVersionedName = assertProducerMetadataVersionedName;\nvar assertLoopInstruction = assertTypeOf(\"LoopInstruction\");\nexports.assertLoopInstruction = assertLoopInstruction;\nvar assertInstr = assertTypeOf(\"Instr\");\nexports.assertInstr = assertInstr;\nvar assertIfInstruction = assertTypeOf(\"IfInstruction\");\nexports.assertIfInstruction = assertIfInstruction;\nvar assertStringLiteral = assertTypeOf(\"StringLiteral\");\nexports.assertStringLiteral = assertStringLiteral;\nvar assertNumberLiteral = assertTypeOf(\"NumberLiteral\");\nexports.assertNumberLiteral = assertNumberLiteral;\nvar assertLongNumberLiteral = assertTypeOf(\"LongNumberLiteral\");\nexports.assertLongNumberLiteral = assertLongNumberLiteral;\nvar assertFloatLiteral = assertTypeOf(\"FloatLiteral\");\nexports.assertFloatLiteral = assertFloatLiteral;\nvar assertElem = assertTypeOf(\"Elem\");\nexports.assertElem = assertElem;\nvar assertIndexInFuncSection = assertTypeOf(\"IndexInFuncSection\");\nexports.assertIndexInFuncSection = assertIndexInFuncSection;\nvar assertValtypeLiteral = assertTypeOf(\"ValtypeLiteral\");\nexports.assertValtypeLiteral = assertValtypeLiteral;\nvar assertTypeInstruction = assertTypeOf(\"TypeInstruction\");\nexports.assertTypeInstruction = assertTypeInstruction;\nvar assertStart = assertTypeOf(\"Start\");\nexports.assertStart = assertStart;\nvar assertGlobalType = assertTypeOf(\"GlobalType\");\nexports.assertGlobalType = assertGlobalType;\nvar assertLeadingComment = assertTypeOf(\"LeadingComment\");\nexports.assertLeadingComment = assertLeadingComment;\nvar assertBlockComment = assertTypeOf(\"BlockComment\");\nexports.assertBlockComment = assertBlockComment;\nvar assertData = assertTypeOf(\"Data\");\nexports.assertData = assertData;\nvar assertGlobal = assertTypeOf(\"Global\");\nexports.assertGlobal = assertGlobal;\nvar assertTable = assertTypeOf(\"Table\");\nexports.assertTable = assertTable;\nvar assertMemory = assertTypeOf(\"Memory\");\nexports.assertMemory = assertMemory;\nvar assertFuncImportDescr = assertTypeOf(\"FuncImportDescr\");\nexports.assertFuncImportDescr = assertFuncImportDescr;\nvar assertModuleImport = assertTypeOf(\"ModuleImport\");\nexports.assertModuleImport = assertModuleImport;\nvar assertModuleExportDescr = assertTypeOf(\"ModuleExportDescr\");\nexports.assertModuleExportDescr = assertModuleExportDescr;\nvar assertModuleExport = assertTypeOf(\"ModuleExport\");\nexports.assertModuleExport = assertModuleExport;\nvar assertLimit = assertTypeOf(\"Limit\");\nexports.assertLimit = assertLimit;\nvar assertSignature = assertTypeOf(\"Signature\");\nexports.assertSignature = assertSignature;\nvar assertProgram = assertTypeOf(\"Program\");\nexports.assertProgram = assertProgram;\nvar assertIdentifier = assertTypeOf(\"Identifier\");\nexports.assertIdentifier = assertIdentifier;\nvar assertBlockInstruction = assertTypeOf(\"BlockInstruction\");\nexports.assertBlockInstruction = assertBlockInstruction;\nvar assertCallInstruction = assertTypeOf(\"CallInstruction\");\nexports.assertCallInstruction = assertCallInstruction;\nvar assertCallIndirectInstruction = assertTypeOf(\"CallIndirectInstruction\");\nexports.assertCallIndirectInstruction = assertCallIndirectInstruction;\nvar assertByteArray = assertTypeOf(\"ByteArray\");\nexports.assertByteArray = assertByteArray;\nvar assertFunc = assertTypeOf(\"Func\");\nexports.assertFunc = assertFunc;\nvar assertInternalBrUnless = assertTypeOf(\"InternalBrUnless\");\nexports.assertInternalBrUnless = assertInternalBrUnless;\nvar assertInternalGoto = assertTypeOf(\"InternalGoto\");\nexports.assertInternalGoto = assertInternalGoto;\nvar assertInternalCallExtern = assertTypeOf(\"InternalCallExtern\");\nexports.assertInternalCallExtern = assertInternalCallExtern;\nvar assertInternalEndAndReturn = assertTypeOf(\"InternalEndAndReturn\");\nexports.assertInternalEndAndReturn = assertInternalEndAndReturn;\nvar unionTypesMap = {\n  Module: [\"Node\"],\n  ModuleMetadata: [\"Node\"],\n  ModuleNameMetadata: [\"Node\"],\n  FunctionNameMetadata: [\"Node\"],\n  LocalNameMetadata: [\"Node\"],\n  BinaryModule: [\"Node\"],\n  QuoteModule: [\"Node\"],\n  SectionMetadata: [\"Node\"],\n  ProducersSectionMetadata: [\"Node\"],\n  ProducerMetadata: [\"Node\"],\n  ProducerMetadataVersionedName: [\"Node\"],\n  LoopInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  Instr: [\"Node\", \"Expression\", \"Instruction\"],\n  IfInstruction: [\"Node\", \"Instruction\"],\n  StringLiteral: [\"Node\", \"Expression\"],\n  NumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  LongNumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  FloatLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  Elem: [\"Node\"],\n  IndexInFuncSection: [\"Node\"],\n  ValtypeLiteral: [\"Node\", \"Expression\"],\n  TypeInstruction: [\"Node\", \"Instruction\"],\n  Start: [\"Node\"],\n  GlobalType: [\"Node\", \"ImportDescr\"],\n  LeadingComment: [\"Node\"],\n  BlockComment: [\"Node\"],\n  Data: [\"Node\"],\n  Global: [\"Node\"],\n  Table: [\"Node\", \"ImportDescr\"],\n  Memory: [\"Node\", \"ImportDescr\"],\n  FuncImportDescr: [\"Node\", \"ImportDescr\"],\n  ModuleImport: [\"Node\"],\n  ModuleExportDescr: [\"Node\"],\n  ModuleExport: [\"Node\"],\n  Limit: [\"Node\"],\n  Signature: [\"Node\"],\n  Program: [\"Node\"],\n  Identifier: [\"Node\", \"Expression\"],\n  BlockInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  CallInstruction: [\"Node\", \"Instruction\"],\n  CallIndirectInstruction: [\"Node\", \"Instruction\"],\n  ByteArray: [\"Node\"],\n  Func: [\"Node\", \"Block\"],\n  InternalBrUnless: [\"Node\", \"Intrinsic\"],\n  InternalGoto: [\"Node\", \"Intrinsic\"],\n  InternalCallExtern: [\"Node\", \"Intrinsic\"],\n  InternalEndAndReturn: [\"Node\", \"Intrinsic\"]\n};\nexports.unionTypesMap = unionTypesMap;\nvar nodeAndUnionTypes = [\"Module\", \"ModuleMetadata\", \"ModuleNameMetadata\", \"FunctionNameMetadata\", \"LocalNameMetadata\", \"BinaryModule\", \"QuoteModule\", \"SectionMetadata\", \"ProducersSectionMetadata\", \"ProducerMetadata\", \"ProducerMetadataVersionedName\", \"LoopInstruction\", \"Instr\", \"IfInstruction\", \"StringLiteral\", \"NumberLiteral\", \"LongNumberLiteral\", \"FloatLiteral\", \"Elem\", \"IndexInFuncSection\", \"ValtypeLiteral\", \"TypeInstruction\", \"Start\", \"GlobalType\", \"LeadingComment\", \"BlockComment\", \"Data\", \"Global\", \"Table\", \"Memory\", \"FuncImportDescr\", \"ModuleImport\", \"ModuleExportDescr\", \"ModuleExport\", \"Limit\", \"Signature\", \"Program\", \"Identifier\", \"BlockInstruction\", \"CallInstruction\", \"CallIndirectInstruction\", \"ByteArray\", \"Func\", \"InternalBrUnless\", \"InternalGoto\", \"InternalCallExtern\", \"InternalEndAndReturn\", \"Node\", \"Block\", \"Instruction\", \"Expression\", \"NumericLiteral\", \"ImportDescr\", \"Intrinsic\"];\nexports.nodeAndUnionTypes = nodeAndUnionTypes;"},"sourceMaps":null,"error":null,"hash":"8149c6f319da0d4050477b26abd96f89","cacheData":{"env":{}}}