{"id":"../node_modules/inquirer/lib/ui/baseUI.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/package.json","includedInParent":true,"mtime":1594570878526},{"name":"lodash","loc":{"line":2,"column":16},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/ui/baseUI.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/lodash/lodash.js"},{"name":"mute-stream","loc":{"line":3,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/ui/baseUI.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/mute-stream/mute.js"},{"name":"readline","loc":{"line":4,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/ui/baseUI.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/ui/baseUI.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _ = require('lodash');\n\nvar MuteStream = require('mute-stream');\n\nvar readline = require('readline');\n/**\n * Base interface class other can inherits from\n */\n\n\nvar UI = /*#__PURE__*/function () {\n  function UI(opt) {\n    _classCallCheck(this, UI);\n\n    // Instantiate the Readline interface\n    // @Note: Don't reassign if already present (allow test to override the Stream)\n    if (!this.rl) {\n      this.rl = readline.createInterface(setupReadlineOptions(opt));\n    }\n\n    this.rl.resume();\n    this.onForceClose = this.onForceClose.bind(this); // Make sure new prompt start on a newline when closing\n\n    process.on('exit', this.onForceClose); // Terminate process on SIGINT (which will call process.on('exit') in return)\n\n    this.rl.on('SIGINT', this.onForceClose);\n  }\n  /**\n   * Handle the ^C exit\n   * @return {null}\n   */\n\n\n  _createClass(UI, [{\n    key: \"onForceClose\",\n    value: function onForceClose() {\n      this.close();\n      process.kill(process.pid, 'SIGINT');\n      console.log('');\n    }\n    /**\n     * Close the interface and cleanup listeners\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      // Remove events listeners\n      this.rl.removeListener('SIGINT', this.onForceClose);\n      process.removeListener('exit', this.onForceClose);\n      this.rl.output.unmute();\n\n      if (this.activePrompt && typeof this.activePrompt.close === 'function') {\n        this.activePrompt.close();\n      } // Close the readline\n\n\n      this.rl.output.end();\n      this.rl.pause();\n      this.rl.close();\n    }\n  }]);\n\n  return UI;\n}();\n\nfunction setupReadlineOptions(opt) {\n  opt = opt || {}; // Default `input` to stdin\n\n  var input = opt.input || process.stdin; // Add mute capabilities to the output\n\n  var ms = new MuteStream();\n  ms.pipe(opt.output || process.stdout);\n  var output = ms;\n  return _.extend({\n    terminal: true,\n    input: input,\n    output: output\n  }, _.omit(opt, ['input', 'output']));\n}\n\nmodule.exports = UI;"},"sourceMaps":null,"error":null,"hash":"67d3056c10026e095e65faa60f921434","cacheData":{"env":{}}}