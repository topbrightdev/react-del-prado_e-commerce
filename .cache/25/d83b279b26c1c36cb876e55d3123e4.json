{"id":"../node_modules/hpack.js/lib/hpack/decoder.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/package.json","includedInParent":true,"mtime":1594306880054},{"name":"../hpack","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/decoder.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack.js"},{"name":"obuf","loc":{"line":6,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/decoder.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/obuf/index.js"}],"generated":{"js":"var hpack = require('../hpack');\nvar utils = hpack.utils;\nvar huffman = hpack.huffman.decode;\nvar assert = utils.assert;\n\nvar OffsetBuffer = require('obuf');\n\nfunction Decoder() {\n  this.buffer = new OffsetBuffer();\n  this.bitOffset = 0;\n\n  // Used internally in decodeStr\n  this._huffmanNode = null;\n}\nmodule.exports = Decoder;\n\nDecoder.create = function create() {\n  return new Decoder();\n};\n\nDecoder.prototype.isEmpty = function isEmpty() {\n  return this.buffer.isEmpty();\n};\n\nDecoder.prototype.push = function push(chunk) {\n  this.buffer.push(chunk);\n};\n\nDecoder.prototype.decodeBit = function decodeBit() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n\n  var octet;\n  var offset = this.bitOffset;\n\n  if (++this.bitOffset === 8) {\n    octet = this.buffer.readUInt8();\n    this.bitOffset = 0;\n  } else {\n    octet = this.buffer.peekUInt8();\n  }\n  return (octet >>> (7 - offset)) & 1;\n};\n\n// Just for testing\nDecoder.prototype.skipBits = function skipBits(n) {\n  this.bitOffset += n;\n  this.buffer.skip(this.bitOffset >> 3);\n  this.bitOffset &= 0x7;\n};\n\nDecoder.prototype.decodeInt = function decodeInt() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n\n  var prefix = 8 - this.bitOffset;\n\n  // We are going to end up octet-aligned\n  this.bitOffset = 0;\n\n  var max = (1 << prefix) - 1;\n  var octet = this.buffer.readUInt8() & max;\n\n  // Fast case - int fits into the prefix\n  if (octet !== max)\n    return octet;\n\n  // TODO(indutny): what about > 32bit numbers?\n  var res = 0;\n  var isLast = false;\n  var len = 0;\n  do {\n    octet = this.buffer.readUInt8();\n    isLast = (octet & 0x80) === 0;\n\n    res <<= 7;\n    res |= octet & 0x7f;\n    len++;\n  } while (!isLast);\n  assert(isLast, 'Incomplete data for multi-octet integer');\n  assert(len <= 4, 'Integer does not fit into 32 bits');\n\n  // Reverse bits\n  res = (res >>> 21) |\n        (((res >> 14) & 0x7f) << 7) |\n        (((res >> 7) & 0x7f) << 14) |\n        ((res & 0x7f) << 21);\n  res >>= (4 - len) * 7;\n\n  // Append prefix max\n  res += max;\n\n  return res;\n};\n\nDecoder.prototype.decodeHuffmanWord = function decodeHuffmanWord(input,\n                                                                 inputBits,\n                                                                 out) {\n  var root = huffman;\n  var node = this._huffmanNode;\n  var word = input;\n  var bits = inputBits;\n\n  for (; bits > 0; word &= (1 << bits) - 1) {\n    // Nudge the word bit length to match it\n    for (var i = Math.max(0, bits - 8); i < bits; i++) {\n      var subnode = node[word >>> i];\n      if (typeof subnode !== 'number') {\n        node = subnode;\n        bits = i;\n        break;\n      }\n\n      if (subnode === 0)\n        continue;\n\n      // Word bit length should match\n      if ((subnode >>> 9) !== bits - i) {\n        subnode = 0;\n        continue;\n      }\n\n      var octet = subnode & 0x1ff;\n      assert(octet !== 256, 'EOS in encoding');\n      out.push(octet);\n      node = root;\n\n      bits = i;\n      break;\n    }\n    if (subnode === 0)\n      break;\n  }\n  this._huffmanNode = node;\n\n  return bits;\n};\n\nDecoder.prototype.decodeStr = function decodeStr() {\n  var isHuffman = this.decodeBit();\n  var len = this.decodeInt();\n  assert(this.buffer.has(len), 'Not enough octets for string');\n\n  if (!isHuffman)\n    return this.buffer.take(len);\n\n  this._huffmanNode = huffman;\n\n  var out = [];\n\n  var word = 0;\n  var bits = 0;\n  var lastKey = 0;\n  for (var i = 0; i < len; i++) {\n    word <<= 8;\n    word |= this.buffer.readUInt8();\n    bits += 8;\n\n    bits = this.decodeHuffmanWord(word, bits, out);\n    lastKey = word >> bits;\n    word &= (1 << bits) - 1;\n  }\n  assert(this._huffmanNode === huffman, '8-bit EOS');\n  assert(word + 1 === (1 << bits), 'Final sequence is not EOS');\n\n  this._huffmanNode = null;\n\n  return out;\n};\n"},"sourceMaps":null,"error":null,"hash":"d2fca271b2c22480dabb0099d2611a9b","cacheData":{"env":{}}}