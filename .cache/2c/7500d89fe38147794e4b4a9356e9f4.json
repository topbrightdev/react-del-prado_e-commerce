{"id":"../node_modules/cross-spawn/lib/util/resolveCommand.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/cross-spawn/package.json","includedInParent":true,"mtime":1594306879762},{"name":"path","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/cross-spawn/lib/util/resolveCommand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"which","loc":{"line":4,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/cross-spawn/lib/util/resolveCommand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/which/which.js"},{"name":"path-key","loc":{"line":5,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/cross-spawn/lib/util/resolveCommand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-key/index.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/cross-spawn/lib/util/resolveCommand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nconst path = require('path');\n\nconst which = require('which');\n\nconst pathKey = require('path-key')();\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n  const cwd = process.cwd();\n  const hasCustomCwd = parsed.options.cwd != null; // If a custom `cwd` was specified, we need to change the process cwd\n  // because `which` will do stat calls but does not support a custom cwd\n\n  if (hasCustomCwd) {\n    try {\n      process.chdir(parsed.options.cwd);\n    } catch (err) {\n      /* Empty */\n    }\n  }\n\n  let resolved;\n\n  try {\n    resolved = which.sync(parsed.command, {\n      path: (parsed.options.env || process.env)[pathKey],\n      pathExt: withoutPathExt ? path.delimiter : undefined\n    });\n  } catch (e) {\n    /* Empty */\n  } finally {\n    process.chdir(cwd);\n  } // If we successfully resolved, ensure that an absolute path is returned\n  // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n\n\n  if (resolved) {\n    resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n  }\n\n  return resolved;\n}\n\nfunction resolveCommand(parsed) {\n  return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;"},"sourceMaps":null,"error":null,"hash":"ce790a05c8ca6d3c3f3c4ccdb022dd9b","cacheData":{"env":{}}}