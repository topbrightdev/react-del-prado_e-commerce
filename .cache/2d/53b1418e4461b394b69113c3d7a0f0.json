{"id":"../node_modules/webpack/node_modules/tapable/lib/MultiHook.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/tapable/package.json","includedInParent":true,"mtime":1594570878398},{"name":"./Hook","loc":{"line":7,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/tapable/lib/MultiHook.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/tapable/lib/Hook.js"}],"generated":{"js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Hook = require(\"./Hook\");\n\nvar MultiHook = /*#__PURE__*/function () {\n  function MultiHook(hooks) {\n    _classCallCheck(this, MultiHook);\n\n    this.hooks = hooks;\n  }\n\n  _createClass(MultiHook, [{\n    key: \"tap\",\n    value: function tap(options, fn) {\n      for (var hook of this.hooks) {\n        hook.tap(options, fn);\n      }\n    }\n  }, {\n    key: \"tapAsync\",\n    value: function tapAsync(options, fn) {\n      for (var hook of this.hooks) {\n        hook.tapAsync(options, fn);\n      }\n    }\n  }, {\n    key: \"tapPromise\",\n    value: function tapPromise(options, fn) {\n      for (var hook of this.hooks) {\n        hook.tapPromise(options, fn);\n      }\n    }\n  }, {\n    key: \"isUsed\",\n    value: function isUsed() {\n      for (var hook of this.hooks) {\n        if (hook.isUsed()) return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"intercept\",\n    value: function intercept(interceptor) {\n      for (var hook of this.hooks) {\n        hook.intercept(interceptor);\n      }\n    }\n  }, {\n    key: \"withOptions\",\n    value: function withOptions(options) {\n      return new MultiHook(this.hooks.map(function (h) {\n        return h.withOptions(options);\n      }));\n    }\n  }]);\n\n  return MultiHook;\n}();\n\nmodule.exports = MultiHook;"},"sourceMaps":null,"error":null,"hash":"74512dbebebbdd4d986fad175977765f","cacheData":{"env":{}}}