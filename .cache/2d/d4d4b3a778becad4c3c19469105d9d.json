{"id":"../node_modules/serve-index/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/package.json","includedInParent":true,"mtime":1594306881422},{"name":"accepts","loc":{"line":16,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/accepts/index.js"},{"name":"http-errors","loc":{"line":17,"column":26},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-errors/index.js"},{"name":"debug","loc":{"line":18,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/node_modules/debug/src/browser.js"},{"name":"escape-html","loc":{"line":19,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/escape-html/index.js"},{"name":"fs","loc":{"line":20,"column":17},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":29,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"batch","loc":{"line":26,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/batch/index.js"},{"name":"mime-types","loc":{"line":27,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/mime-types/index.js"},{"name":"parseurl","loc":{"line":28,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parseurl/index.js"},{"name":"buffer","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/buffer/index.js"}],"generated":{"js":"var __dirname = \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index\";\nvar Buffer = require(\"buffer\").Buffer;\n/*!\n * serve-index\n * Copyright(c) 2011 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\n\nvar createError = require('http-errors');\n\nvar debug = require('debug')('serve-index');\n\nvar escapeHtml = require('escape-html');\n\nvar fs = require('fs'),\n    path = require('path'),\n    normalize = path.normalize,\n    sep = path.sep,\n    extname = path.extname,\n    join = path.join;\n\nvar Batch = require('batch');\n\nvar mime = require('mime-types');\n\nvar parseUrl = require('parseurl');\n\nvar resolve = require('path').resolve;\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = serveIndex;\n/*!\n * Icon cache.\n */\n\nvar cache = {};\n/*!\n * Default template.\n */\n\nvar defaultTemplate = join(__dirname, 'public', 'directory.html');\n/*!\n * Stylesheet.\n */\n\nvar defaultStylesheet = join(__dirname, 'public', 'style.css');\n/**\n * Media types and the map for content negotiation.\n */\n\nvar mediaTypes = ['text/html', 'text/plain', 'application/json'];\nvar mediaType = {\n  'text/html': 'html',\n  'text/plain': 'plain',\n  'application/json': 'json'\n};\n/**\n * Serve directory listings with the given `root` path.\n *\n * See Readme.md for documentation of options.\n *\n * @param {String} root\n * @param {Object} options\n * @return {Function} middleware\n * @public\n */\n\nfunction serveIndex(root, options) {\n  var opts = options || {}; // root required\n\n  if (!root) {\n    throw new TypeError('serveIndex() root path required');\n  } // resolve root to absolute and normalize\n\n\n  var rootPath = normalize(resolve(root) + sep);\n  var filter = opts.filter;\n  var hidden = opts.hidden;\n  var icons = opts.icons;\n  var stylesheet = opts.stylesheet || defaultStylesheet;\n  var template = opts.template || defaultTemplate;\n  var view = opts.view || 'tiles';\n  return function (req, res, next) {\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      res.statusCode = 'OPTIONS' === req.method ? 200 : 405;\n      res.setHeader('Allow', 'GET, HEAD, OPTIONS');\n      res.setHeader('Content-Length', '0');\n      res.end();\n      return;\n    } // parse URLs\n\n\n    var url = parseUrl(req);\n    var originalUrl = parseUrl.original(req);\n    var dir = decodeURIComponent(url.pathname);\n    var originalDir = decodeURIComponent(originalUrl.pathname); // join / normalize from root dir\n\n    var path = normalize(join(rootPath, dir)); // null byte(s), bad request\n\n    if (~path.indexOf('\\0')) return next(createError(400)); // malicious path\n\n    if ((path + sep).substr(0, rootPath.length) !== rootPath) {\n      debug('malicious path \"%s\"', path);\n      return next(createError(403));\n    } // determine \"..\" display\n\n\n    var showUp = normalize(resolve(path) + sep) !== rootPath; // check if we have a directory\n\n    debug('stat \"%s\"', path);\n    fs.stat(path, function (err, stat) {\n      if (err && err.code === 'ENOENT') {\n        return next();\n      }\n\n      if (err) {\n        err.status = err.code === 'ENAMETOOLONG' ? 414 : 500;\n        return next(err);\n      }\n\n      if (!stat.isDirectory()) return next(); // fetch files\n\n      debug('readdir \"%s\"', path);\n      fs.readdir(path, function (err, files) {\n        if (err) return next(err);\n        if (!hidden) files = removeHidden(files);\n        if (filter) files = files.filter(function (filename, index, list) {\n          return filter(filename, index, list, path);\n        });\n        files.sort(); // content-negotiation\n\n        var accept = accepts(req);\n        var type = accept.type(mediaTypes); // not acceptable\n\n        if (!type) return next(createError(406));\n        serveIndex[mediaType[type]](req, res, files, next, originalDir, showUp, icons, path, view, template, stylesheet);\n      });\n    });\n  };\n}\n\n;\n/**\n * Respond with text/html.\n */\n\nserveIndex.html = function _html(req, res, files, next, dir, showUp, icons, path, view, template, stylesheet) {\n  var render = typeof template !== 'function' ? createHtmlRender(template) : template;\n\n  if (showUp) {\n    files.unshift('..');\n  } // stat all files\n\n\n  stat(path, files, function (err, stats) {\n    if (err) return next(err); // combine the stats into the file list\n\n    var fileList = files.map(function (file, i) {\n      return {\n        name: file,\n        stat: stats[i]\n      };\n    }); // sort file list\n\n    fileList.sort(fileSort); // read stylesheet\n\n    fs.readFile(stylesheet, 'utf8', function (err, style) {\n      if (err) return next(err); // create locals for rendering\n\n      var locals = {\n        directory: dir,\n        displayIcons: Boolean(icons),\n        fileList: fileList,\n        path: path,\n        style: style,\n        viewName: view\n      }; // render html\n\n      render(locals, function (err, body) {\n        if (err) return next(err);\n        send(res, 'text/html', body);\n      });\n    });\n  });\n};\n/**\n * Respond with application/json.\n */\n\n\nserveIndex.json = function _json(req, res, files) {\n  send(res, 'application/json', JSON.stringify(files));\n};\n/**\n * Respond with text/plain.\n */\n\n\nserveIndex.plain = function _plain(req, res, files) {\n  send(res, 'text/plain', files.join('\\n') + '\\n');\n};\n/**\n * Map html `files`, returning an html unordered list.\n * @private\n */\n\n\nfunction createHtmlFileList(files, dir, useIcons, view) {\n  var html = '<ul id=\"files\" class=\"view-' + escapeHtml(view) + '\">' + (view == 'details' ? '<li class=\"header\">' + '<span class=\"name\">Name</span>' + '<span class=\"size\">Size</span>' + '<span class=\"date\">Modified</span>' + '</li>' : '');\n  html += files.map(function (file) {\n    var classes = [];\n    var isDir = file.stat && file.stat.isDirectory();\n    var path = dir.split('/').map(function (c) {\n      return encodeURIComponent(c);\n    });\n\n    if (useIcons) {\n      classes.push('icon');\n\n      if (isDir) {\n        classes.push('icon-directory');\n      } else {\n        var ext = extname(file.name);\n        var icon = iconLookup(file.name);\n        classes.push('icon');\n        classes.push('icon-' + ext.substring(1));\n\n        if (classes.indexOf(icon.className) === -1) {\n          classes.push(icon.className);\n        }\n      }\n    }\n\n    path.push(encodeURIComponent(file.name));\n    var date = file.stat && file.name !== '..' ? file.stat.mtime.toLocaleDateString() + ' ' + file.stat.mtime.toLocaleTimeString() : '';\n    var size = file.stat && !isDir ? file.stat.size : '';\n    return '<li><a href=\"' + escapeHtml(normalizeSlashes(normalize(path.join('/')))) + '\" class=\"' + escapeHtml(classes.join(' ')) + '\"' + ' title=\"' + escapeHtml(file.name) + '\">' + '<span class=\"name\">' + escapeHtml(file.name) + '</span>' + '<span class=\"size\">' + escapeHtml(size) + '</span>' + '<span class=\"date\">' + escapeHtml(date) + '</span>' + '</a></li>';\n  }).join('\\n');\n  html += '</ul>';\n  return html;\n}\n/**\n * Create function to render html.\n */\n\n\nfunction createHtmlRender(template) {\n  return function render(locals, callback) {\n    // read template\n    fs.readFile(template, 'utf8', function (err, str) {\n      if (err) return callback(err);\n      var body = str.replace(/\\{style\\}/g, locals.style.concat(iconStyle(locals.fileList, locals.displayIcons))).replace(/\\{files\\}/g, createHtmlFileList(locals.fileList, locals.directory, locals.displayIcons, locals.viewName)).replace(/\\{directory\\}/g, escapeHtml(locals.directory)).replace(/\\{linked-path\\}/g, htmlPath(locals.directory));\n      callback(null, body);\n    });\n  };\n}\n/**\n * Sort function for with directories first.\n */\n\n\nfunction fileSort(a, b) {\n  // sort \"..\" to the top\n  if (a.name === '..' || b.name === '..') {\n    return a.name === b.name ? 0 : a.name === '..' ? -1 : 1;\n  }\n\n  return Number(b.stat && b.stat.isDirectory()) - Number(a.stat && a.stat.isDirectory()) || String(a.name).toLocaleLowerCase().localeCompare(String(b.name).toLocaleLowerCase());\n}\n/**\n * Map html `dir`, returning a linked path.\n */\n\n\nfunction htmlPath(dir) {\n  var parts = dir.split('/');\n  var crumb = new Array(parts.length);\n\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i];\n\n    if (part) {\n      parts[i] = encodeURIComponent(part);\n      crumb[i] = '<a href=\"' + escapeHtml(parts.slice(0, i + 1).join('/')) + '\">' + escapeHtml(part) + '</a>';\n    }\n  }\n\n  return crumb.join(' / ');\n}\n/**\n * Get the icon data for the file name.\n */\n\n\nfunction iconLookup(filename) {\n  var ext = extname(filename); // try by extension\n\n  if (icons[ext]) {\n    return {\n      className: 'icon-' + ext.substring(1),\n      fileName: icons[ext]\n    };\n  }\n\n  var mimetype = mime.lookup(ext); // default if no mime type\n\n  if (mimetype === false) {\n    return {\n      className: 'icon-default',\n      fileName: icons.default\n    };\n  } // try by mime type\n\n\n  if (icons[mimetype]) {\n    return {\n      className: 'icon-' + mimetype.replace('/', '-'),\n      fileName: icons[mimetype]\n    };\n  }\n\n  var suffix = mimetype.split('+')[1];\n\n  if (suffix && icons['+' + suffix]) {\n    return {\n      className: 'icon-' + suffix,\n      fileName: icons['+' + suffix]\n    };\n  }\n\n  var type = mimetype.split('/')[0]; // try by type only\n\n  if (icons[type]) {\n    return {\n      className: 'icon-' + type,\n      fileName: icons[type]\n    };\n  }\n\n  return {\n    className: 'icon-default',\n    fileName: icons.default\n  };\n}\n/**\n * Load icon images, return css string.\n */\n\n\nfunction iconStyle(files, useIcons) {\n  if (!useIcons) return '';\n  var i;\n  var list = [];\n  var rules = {};\n  var selector;\n  var selectors = {};\n  var style = '';\n\n  for (i = 0; i < files.length; i++) {\n    var file = files[i];\n    var isDir = file.stat && file.stat.isDirectory();\n    var icon = isDir ? {\n      className: 'icon-directory',\n      fileName: icons.folder\n    } : iconLookup(file.name);\n    var iconName = icon.fileName;\n    selector = '#files .' + icon.className + ' .name';\n\n    if (!rules[iconName]) {\n      rules[iconName] = 'background-image: url(data:image/png;base64,' + load(iconName) + ');';\n      selectors[iconName] = [];\n      list.push(iconName);\n    }\n\n    if (selectors[iconName].indexOf(selector) === -1) {\n      selectors[iconName].push(selector);\n    }\n  }\n\n  for (i = 0; i < list.length; i++) {\n    iconName = list[i];\n    style += selectors[iconName].join(',\\n') + ' {\\n  ' + rules[iconName] + '\\n}\\n';\n  }\n\n  return style;\n}\n/**\n * Load and cache the given `icon`.\n *\n * @param {String} icon\n * @return {String}\n * @api private\n */\n\n\nfunction load(icon) {\n  if (cache[icon]) return cache[icon];\n  return cache[icon] = fs.readFileSync(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index\" + '/public/icons/' + icon, 'base64');\n}\n/**\n * Normalizes the path separator from system separator\n * to URL separator, aka `/`.\n *\n * @param {String} path\n * @return {String}\n * @api private\n */\n\n\nfunction normalizeSlashes(path) {\n  return path.split(sep).join('/');\n}\n\n;\n/**\n * Filter \"hidden\" `files`, aka files\n * beginning with a `.`.\n *\n * @param {Array} files\n * @return {Array}\n * @api private\n */\n\nfunction removeHidden(files) {\n  return files.filter(function (file) {\n    return '.' != file[0];\n  });\n}\n/**\n * Send a response.\n * @private\n */\n\n\nfunction send(res, type, body) {\n  // security header for content sniffing\n  res.setHeader('X-Content-Type-Options', 'nosniff'); // standard headers\n\n  res.setHeader('Content-Type', type + '; charset=utf-8');\n  res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8')); // body\n\n  res.end(body, 'utf8');\n}\n/**\n * Stat all files and return array of stat\n * in same order.\n */\n\n\nfunction stat(dir, files, cb) {\n  var batch = new Batch();\n  batch.concurrency(10);\n  files.forEach(function (file) {\n    batch.push(function (done) {\n      fs.stat(join(dir, file), function (err, stat) {\n        if (err && err.code !== 'ENOENT') return done(err); // pass ENOENT as null stat, not error\n\n        done(null, stat || null);\n      });\n    });\n  });\n  batch.end(cb);\n}\n/**\n * Icon map.\n */\n\n\nvar icons = {\n  // base icons\n  'default': 'page_white.png',\n  'folder': 'folder.png',\n  // generic mime type icons\n  'image': 'image.png',\n  'text': 'page_white_text.png',\n  'video': 'film.png',\n  // generic mime suffix icons\n  '+json': 'page_white_code.png',\n  '+xml': 'page_white_code.png',\n  '+zip': 'box.png',\n  // specific mime type icons\n  'application/font-woff': 'font.png',\n  'application/javascript': 'page_white_code_red.png',\n  'application/json': 'page_white_code.png',\n  'application/msword': 'page_white_word.png',\n  'application/pdf': 'page_white_acrobat.png',\n  'application/postscript': 'page_white_vector.png',\n  'application/rtf': 'page_white_word.png',\n  'application/vnd.ms-excel': 'page_white_excel.png',\n  'application/vnd.ms-powerpoint': 'page_white_powerpoint.png',\n  'application/vnd.oasis.opendocument.presentation': 'page_white_powerpoint.png',\n  'application/vnd.oasis.opendocument.spreadsheet': 'page_white_excel.png',\n  'application/vnd.oasis.opendocument.text': 'page_white_word.png',\n  'application/x-7z-compressed': 'box.png',\n  'application/x-sh': 'application_xp_terminal.png',\n  'application/x-font-ttf': 'font.png',\n  'application/x-msaccess': 'page_white_database.png',\n  'application/x-shockwave-flash': 'page_white_flash.png',\n  'application/x-sql': 'page_white_database.png',\n  'application/x-tar': 'box.png',\n  'application/x-xz': 'box.png',\n  'application/xml': 'page_white_code.png',\n  'application/zip': 'box.png',\n  'image/svg+xml': 'page_white_vector.png',\n  'text/css': 'page_white_code.png',\n  'text/html': 'page_white_code.png',\n  'text/less': 'page_white_code.png',\n  // other, extension-specific icons\n  '.accdb': 'page_white_database.png',\n  '.apk': 'box.png',\n  '.app': 'application_xp.png',\n  '.as': 'page_white_actionscript.png',\n  '.asp': 'page_white_code.png',\n  '.aspx': 'page_white_code.png',\n  '.bat': 'application_xp_terminal.png',\n  '.bz2': 'box.png',\n  '.c': 'page_white_c.png',\n  '.cab': 'box.png',\n  '.cfm': 'page_white_coldfusion.png',\n  '.clj': 'page_white_code.png',\n  '.cc': 'page_white_cplusplus.png',\n  '.cgi': 'application_xp_terminal.png',\n  '.cpp': 'page_white_cplusplus.png',\n  '.cs': 'page_white_csharp.png',\n  '.db': 'page_white_database.png',\n  '.dbf': 'page_white_database.png',\n  '.deb': 'box.png',\n  '.dll': 'page_white_gear.png',\n  '.dmg': 'drive.png',\n  '.docx': 'page_white_word.png',\n  '.erb': 'page_white_ruby.png',\n  '.exe': 'application_xp.png',\n  '.fnt': 'font.png',\n  '.gam': 'controller.png',\n  '.gz': 'box.png',\n  '.h': 'page_white_h.png',\n  '.ini': 'page_white_gear.png',\n  '.iso': 'cd.png',\n  '.jar': 'box.png',\n  '.java': 'page_white_cup.png',\n  '.jsp': 'page_white_cup.png',\n  '.lua': 'page_white_code.png',\n  '.lz': 'box.png',\n  '.lzma': 'box.png',\n  '.m': 'page_white_code.png',\n  '.map': 'map.png',\n  '.msi': 'box.png',\n  '.mv4': 'film.png',\n  '.otf': 'font.png',\n  '.pdb': 'page_white_database.png',\n  '.php': 'page_white_php.png',\n  '.pl': 'page_white_code.png',\n  '.pkg': 'box.png',\n  '.pptx': 'page_white_powerpoint.png',\n  '.psd': 'page_white_picture.png',\n  '.py': 'page_white_code.png',\n  '.rar': 'box.png',\n  '.rb': 'page_white_ruby.png',\n  '.rm': 'film.png',\n  '.rom': 'controller.png',\n  '.rpm': 'box.png',\n  '.sass': 'page_white_code.png',\n  '.sav': 'controller.png',\n  '.scss': 'page_white_code.png',\n  '.srt': 'page_white_text.png',\n  '.tbz2': 'box.png',\n  '.tgz': 'box.png',\n  '.tlz': 'box.png',\n  '.vb': 'page_white_code.png',\n  '.vbs': 'page_white_code.png',\n  '.xcf': 'page_white_picture.png',\n  '.xlsx': 'page_white_excel.png',\n  '.yaws': 'page_white_code.png'\n};"},"sourceMaps":null,"error":null,"hash":"5ad5925baf288aacc4988dd7bf5dcaba","cacheData":{"env":{}}}