{"id":"../node_modules/body-parser/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/package.json","includedInParent":true,"mtime":1594641343125},{"name":"depd","loc":{"line":14,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/depd/lib/browser/index.js"},{"name":"./lib/types/json","loc":{"line":142,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/lib/types/json.js"},{"name":"./lib/types/raw","loc":{"line":145,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/lib/types/raw.js"},{"name":"./lib/types/text","loc":{"line":148,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/lib/types/text.js"},{"name":"./lib/types/urlencoded","loc":{"line":151,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/body-parser/lib/types/urlencoded.js"}],"generated":{"js":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar deprecate = require('depd')('body-parser');\n/**\n * Cache of loaded parsers.\n * @private\n */\n\n\nvar parsers = Object.create(null);\n/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */\n\n/**\n * Module exports.\n * @type {Parsers}\n */\n\nexports = module.exports = deprecate.function(bodyParser, 'bodyParser: use individual json/urlencoded middlewares');\n/**\n * JSON parser.\n * @public\n */\n\nObject.defineProperty(exports, 'json', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('json')\n});\n/**\n * Raw parser.\n * @public\n */\n\nObject.defineProperty(exports, 'raw', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('raw')\n});\n/**\n * Text parser.\n * @public\n */\n\nObject.defineProperty(exports, 'text', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('text')\n});\n/**\n * URL-encoded parser.\n * @public\n */\n\nObject.defineProperty(exports, 'urlencoded', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('urlencoded')\n});\n/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */\n\nfunction bodyParser(options) {\n  var opts = {}; // exclude type option\n\n  if (options) {\n    for (var prop in options) {\n      if (prop !== 'type') {\n        opts[prop] = options[prop];\n      }\n    }\n  }\n\n  var _urlencoded = exports.urlencoded(opts);\n\n  var _json = exports.json(opts);\n\n  return function bodyParser(req, res, next) {\n    _json(req, res, function (err) {\n      if (err) return next(err);\n\n      _urlencoded(req, res, next);\n    });\n  };\n}\n/**\n * Create a getter for loading a parser.\n * @private\n */\n\n\nfunction createParserGetter(name) {\n  return function get() {\n    return loadParser(name);\n  };\n}\n/**\n * Load a parser module.\n * @private\n */\n\n\nfunction loadParser(parserName) {\n  var parser = parsers[parserName];\n\n  if (parser !== undefined) {\n    return parser;\n  } // this uses a switch for static require analysis\n\n\n  switch (parserName) {\n    case 'json':\n      parser = require('./lib/types/json');\n      break;\n\n    case 'raw':\n      parser = require('./lib/types/raw');\n      break;\n\n    case 'text':\n      parser = require('./lib/types/text');\n      break;\n\n    case 'urlencoded':\n      parser = require('./lib/types/urlencoded');\n      break;\n  } // store to prevent invoking require()\n\n\n  return parsers[parserName] = parser;\n}"},"sourceMaps":null,"error":null,"hash":"e72d22823aef996fce4bb78be8b70975","cacheData":{"env":{}}}