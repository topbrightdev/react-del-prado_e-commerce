{"id":"../node_modules/webpack/node_modules/watchpack/lib/DirectoryWatcher.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/package.json","includedInParent":true,"mtime":1594578778153},{"name":"events","loc":{"line":7,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/lib/DirectoryWatcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/events/events.js"},{"name":"neo-async","loc":{"line":8,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/lib/DirectoryWatcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/neo-async/async.min.js"},{"name":"./chokidar","loc":{"line":9,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/lib/DirectoryWatcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/lib/chokidar.js"},{"name":"graceful-fs","loc":{"line":10,"column":17},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/lib/DirectoryWatcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/graceful-fs/graceful-fs.js"},{"name":"path","loc":{"line":11,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/lib/DirectoryWatcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"./watcherManager","loc":{"line":13,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/lib/DirectoryWatcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/lib/watcherManager.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/watchpack/lib/DirectoryWatcher.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar EventEmitter = require(\"events\").EventEmitter;\nvar async = require(\"neo-async\");\nvar chokidar = require(\"./chokidar\");\nvar fs = require(\"graceful-fs\");\nvar path = require(\"path\");\n\nvar watcherManager = require(\"./watcherManager\");\n\nvar FS_ACCURACY = 1000;\n\n\nfunction withoutCase(str) {\n\treturn str.toLowerCase();\n}\n\n\nfunction Watcher(directoryWatcher, filePath, startTime) {\n\tEventEmitter.call(this);\n\tthis.directoryWatcher = directoryWatcher;\n\tthis.path = filePath;\n\tthis.startTime = startTime && +startTime;\n\t// TODO this.data seem to be only read, weird\n\tthis.data = 0;\n}\n\nWatcher.prototype = Object.create(EventEmitter.prototype);\nWatcher.prototype.constructor = Watcher;\n\nWatcher.prototype.checkStartTime = function checkStartTime(mtime, initial) {\n\tif(typeof this.startTime !== \"number\") return !initial;\n\tvar startTime = this.startTime;\n\treturn startTime <= mtime;\n};\n\nWatcher.prototype.close = function close() {\n\tthis.emit(\"closed\");\n};\n\n\nfunction DirectoryWatcher(directoryPath, options) {\n\tEventEmitter.call(this);\n\tthis.options = options;\n\tthis.path = directoryPath;\n\tthis.files = Object.create(null);\n\tthis.directories = Object.create(null);\n\tvar interval = typeof options.poll === \"number\" ? options.poll : undefined;\n\tthis.watcher = chokidar.watch(directoryPath, {\n\t\tignoreInitial: true,\n\t\tpersistent: true,\n\t\tfollowSymlinks: false,\n\t\tdepth: 0,\n\t\tatomic: false,\n\t\talwaysStat: true,\n\t\tignorePermissionErrors: true,\n\t\tignored: options.ignored,\n\t\tusePolling: options.poll ? true : undefined,\n\t\tinterval: interval,\n\t\tbinaryInterval: interval,\n\t\tdisableGlobbing: true\n\t});\n\tthis.watcher.on(\"add\", this.onFileAdded.bind(this));\n\tthis.watcher.on(\"addDir\", this.onDirectoryAdded.bind(this));\n\tthis.watcher.on(\"change\", this.onChange.bind(this));\n\tthis.watcher.on(\"unlink\", this.onFileUnlinked.bind(this));\n\tthis.watcher.on(\"unlinkDir\", this.onDirectoryUnlinked.bind(this));\n\tthis.watcher.on(\"error\", this.onWatcherError.bind(this));\n\tthis.initialScan = true;\n\tthis.nestedWatching = false;\n\tthis.initialScanRemoved = [];\n\tthis.doInitialScan();\n\tthis.watchers = Object.create(null);\n\tthis.parentWatcher = null;\n\tthis.refs = 0;\n}\nmodule.exports = DirectoryWatcher;\n\nDirectoryWatcher.prototype = Object.create(EventEmitter.prototype);\nDirectoryWatcher.prototype.constructor = DirectoryWatcher;\n\nDirectoryWatcher.prototype.setFileTime = function setFileTime(filePath, mtime, initial, type) {\n\tvar now = Date.now();\n\tvar old = this.files[filePath];\n\n\tthis.files[filePath] = [initial ? Math.min(now, mtime) : now, mtime];\n\n\t// we add the fs accuracy to reach the maximum possible mtime\n\tif(mtime)\n\t\tmtime = mtime + FS_ACCURACY;\n\n\tif(!old) {\n\t\tif(mtime) {\n\t\t\tif(this.watchers[withoutCase(filePath)]) {\n\t\t\t\tthis.watchers[withoutCase(filePath)].forEach(function(w) {\n\t\t\t\t\tif(!initial || w.checkStartTime(mtime, initial)) {\n\t\t\t\t\t\tw.emit(\"change\", mtime, initial ? \"initial\" : type);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t} else if(!initial && mtime) {\n\t\tif(this.watchers[withoutCase(filePath)]) {\n\t\t\tthis.watchers[withoutCase(filePath)].forEach(function(w) {\n\t\t\t\tw.emit(\"change\", mtime, type);\n\t\t\t});\n\t\t}\n\t} else if(!initial && !mtime) {\n\t\tif(this.watchers[withoutCase(filePath)]) {\n\t\t\tthis.watchers[withoutCase(filePath)].forEach(function(w) {\n\t\t\t\tw.emit(\"remove\", type);\n\t\t\t});\n\t\t}\n\t}\n\tif(this.watchers[withoutCase(this.path)]) {\n\t\tthis.watchers[withoutCase(this.path)].forEach(function(w) {\n\t\t\tif(!initial || w.checkStartTime(mtime, initial)) {\n\t\t\t\tw.emit(\"change\", filePath, mtime, initial ? \"initial\" : type);\n\t\t\t}\n\t\t});\n\t}\n};\n\nDirectoryWatcher.prototype.setDirectory = function setDirectory(directoryPath, exist, initial, type) {\n\tif(directoryPath === this.path) {\n\t\tif(!initial && this.watchers[withoutCase(this.path)]) {\n\t\t\tthis.watchers[withoutCase(this.path)].forEach(function(w) {\n\t\t\t\tw.emit(\"change\", directoryPath, w.data, initial ? \"initial\" : type);\n\t\t\t});\n\t\t}\n\t} else {\n\t\tvar old = this.directories[directoryPath];\n\t\tif(!old) {\n\t\t\tif(exist) {\n\t\t\t\tif(this.nestedWatching) {\n\t\t\t\t\tthis.createNestedWatcher(directoryPath);\n\t\t\t\t} else {\n\t\t\t\t\tthis.directories[directoryPath] = true;\n\t\t\t\t}\n\t\t\t\tif(!initial && this.watchers[withoutCase(this.path)]) {\n\t\t\t\t\tthis.watchers[withoutCase(this.path)].forEach(function(w) {\n\t\t\t\t\t\tw.emit(\"change\", directoryPath, w.data, initial ? \"initial\" : type);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif(this.watchers[withoutCase(directoryPath) + \"#directory\"]) {\n\t\t\t\t\tthis.watchers[withoutCase(directoryPath) + \"#directory\"].forEach(function(w) {\n\t\t\t\t\t\tw.emit(\"change\", w.data, initial ? \"initial\" : type);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif(!exist) {\n\t\t\t\tif(this.nestedWatching)\n\t\t\t\t\tthis.directories[directoryPath].close();\n\t\t\t\tdelete this.directories[directoryPath];\n\t\t\t\tif(!initial && this.watchers[withoutCase(this.path)]) {\n\t\t\t\t\tthis.watchers[withoutCase(this.path)].forEach(function(w) {\n\t\t\t\t\t\tw.emit(\"change\", directoryPath, w.data, initial ? \"initial\" : type);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif(this.watchers[withoutCase(directoryPath) + \"#directory\"]) {\n\t\t\t\t\tthis.watchers[withoutCase(directoryPath) + \"#directory\"].forEach(function(w) {\n\t\t\t\t\t\tw.emit(\"change\", directoryPath, w.data, initial ? \"initial\" : type);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nDirectoryWatcher.prototype.createNestedWatcher = function(directoryPath) {\n\tthis.directories[directoryPath] = watcherManager.watchDirectory(directoryPath, this.options, 1);\n\tthis.directories[directoryPath].on(\"change\", function(filePath, mtime, type) {\n\t\tif(this.watchers[withoutCase(this.path)]) {\n\t\t\tthis.watchers[withoutCase(this.path)].forEach(function(w) {\n\t\t\t\tif(w.checkStartTime(mtime, false)) {\n\t\t\t\t\tw.emit(\"change\", filePath, mtime, type);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}.bind(this));\n};\n\nDirectoryWatcher.prototype.setNestedWatching = function(flag) {\n\tif(this.nestedWatching !== !!flag) {\n\t\tthis.nestedWatching = !!flag;\n\t\tif(this.nestedWatching) {\n\t\t\tObject.keys(this.directories).forEach(function(directory) {\n\t\t\t\tthis.createNestedWatcher(directory);\n\t\t\t}, this);\n\t\t} else {\n\t\t\tObject.keys(this.directories).forEach(function(directory) {\n\t\t\t\tthis.directories[directory].close();\n\t\t\t\tthis.directories[directory] = true;\n\t\t\t}, this);\n\t\t}\n\t}\n};\n\nDirectoryWatcher.prototype.watch = function watch(filePath, startTime) {\n\tthis.watchers[withoutCase(filePath)] = this.watchers[withoutCase(filePath)] || [];\n\tthis.refs++;\n\tvar watcher = new Watcher(this, filePath, startTime);\n\twatcher.on(\"closed\", function() {\n\t\tvar idx = this.watchers[withoutCase(filePath)].indexOf(watcher);\n\t\tthis.watchers[withoutCase(filePath)].splice(idx, 1);\n\t\tif(this.watchers[withoutCase(filePath)].length === 0) {\n\t\t\tdelete this.watchers[withoutCase(filePath)];\n\t\t\tif(this.path === filePath)\n\t\t\t\tthis.setNestedWatching(false);\n\t\t}\n\t\tif(--this.refs <= 0)\n\t\t\tthis.close();\n\t}.bind(this));\n\tthis.watchers[withoutCase(filePath)].push(watcher);\n\tvar data;\n\tif(filePath === this.path) {\n\t\tthis.setNestedWatching(true);\n\t\tdata = false;\n\t\tObject.keys(this.files).forEach(function(file) {\n\t\t\tvar d = this.files[file];\n\t\t\tif(!data)\n\t\t\t\tdata = d;\n\t\t\telse\n\t\t\t\tdata = [Math.max(data[0], d[0]), Math.max(data[1], d[1])];\n\t\t}, this);\n\t} else {\n\t\tdata = this.files[filePath];\n\t}\n\tprocess.nextTick(function() {\n\t\tif(data) {\n\t\t\tvar ts = data[0] === data[1] ? data[0] + FS_ACCURACY : data[0];\n\t\t\tif(ts >= startTime)\n\t\t\t\twatcher.emit(\"change\", data[1]);\n\t\t} else if(this.initialScan && this.initialScanRemoved.indexOf(filePath) >= 0) {\n\t\t\twatcher.emit(\"remove\");\n\t\t}\n\t}.bind(this));\n\treturn watcher;\n};\n\nDirectoryWatcher.prototype.onFileAdded = function onFileAdded(filePath, stat) {\n\tif(filePath.indexOf(this.path) !== 0) return;\n\tif(/[\\\\\\/]/.test(filePath.substr(this.path.length + 1))) return;\n\n\tthis.setFileTime(filePath, +stat.mtime || +stat.ctime || 1, false, \"add\");\n};\n\nDirectoryWatcher.prototype.onDirectoryAdded = function onDirectoryAdded(directoryPath /*, stat */) {\n\tif(directoryPath.indexOf(this.path) !== 0) return;\n\tif(/[\\\\\\/]/.test(directoryPath.substr(this.path.length + 1))) return;\n\tthis.setDirectory(directoryPath, true, false, \"add\");\n};\n\nDirectoryWatcher.prototype.onChange = function onChange(filePath, stat) {\n\tif(filePath.indexOf(this.path) !== 0) return;\n\tif(/[\\\\\\/]/.test(filePath.substr(this.path.length + 1))) return;\n\tvar mtime = +stat.mtime || +stat.ctime || 1;\n\tensureFsAccuracy(mtime);\n\tthis.setFileTime(filePath, mtime, false, \"change\");\n};\n\nDirectoryWatcher.prototype.onFileUnlinked = function onFileUnlinked(filePath) {\n\tif(filePath.indexOf(this.path) !== 0) return;\n\tif(/[\\\\\\/]/.test(filePath.substr(this.path.length + 1))) return;\n\tthis.setFileTime(filePath, null, false, \"unlink\");\n\tif(this.initialScan) {\n\t\tthis.initialScanRemoved.push(filePath);\n\t}\n};\n\nDirectoryWatcher.prototype.onDirectoryUnlinked = function onDirectoryUnlinked(directoryPath) {\n\tif(directoryPath.indexOf(this.path) !== 0) return;\n\tif(/[\\\\\\/]/.test(directoryPath.substr(this.path.length + 1))) return;\n\tthis.setDirectory(directoryPath, false, false, \"unlink\");\n\tif(this.initialScan) {\n\t\tthis.initialScanRemoved.push(directoryPath);\n\t}\n};\n\nDirectoryWatcher.prototype.onWatcherError = function onWatcherError(err) {\n\tconsole.warn(\"Error from chokidar (\" + this.path + \"): \" + err);\n};\n\nDirectoryWatcher.prototype.doInitialScan = function doInitialScan() {\n\tfs.readdir(this.path, function(err, items) {\n\t\tif(err) {\n\t\t\tthis.parentWatcher = watcherManager.watchFile(this.path + \"#directory\", this.options, 1);\n\t\t\tthis.parentWatcher.on(\"change\", function(mtime, type) {\n\t\t\t\tif(this.watchers[withoutCase(this.path)]) {\n\t\t\t\t\tthis.watchers[withoutCase(this.path)].forEach(function(w) {\n\t\t\t\t\t\tw.emit(\"change\", this.path, mtime, type);\n\t\t\t\t\t}, this);\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t\tthis.initialScan = false;\n\t\t\treturn;\n\t\t}\n\t\tasync.forEach(items, function(item, callback) {\n\t\t\tvar itemPath = path.join(this.path, item);\n\t\t\tfs.stat(itemPath, function(err2, stat) {\n\t\t\t\tif(!this.initialScan) return;\n\t\t\t\tif(err2) {\n\t\t\t\t\tcallback();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif(stat.isFile()) {\n\t\t\t\t\tif(!this.files[itemPath])\n\t\t\t\t\t\tthis.setFileTime(itemPath, +stat.mtime || +stat.ctime || 1, true);\n\t\t\t\t} else if(stat.isDirectory()) {\n\t\t\t\t\tif(!this.directories[itemPath])\n\t\t\t\t\t\tthis.setDirectory(itemPath, true, true);\n\t\t\t\t}\n\t\t\t\tcallback();\n\t\t\t}.bind(this));\n\t\t}.bind(this), function() {\n\t\t\tthis.initialScan = false;\n\t\t\tthis.initialScanRemoved = null;\n\t\t}.bind(this));\n\t}.bind(this));\n};\n\nDirectoryWatcher.prototype.getTimes = function() {\n\tvar obj = Object.create(null);\n\tvar selfTime = 0;\n\tObject.keys(this.files).forEach(function(file) {\n\t\tvar data = this.files[file];\n\t\tvar time;\n\t\tif(data[1]) {\n\t\t\ttime = Math.max(data[0], data[1] + FS_ACCURACY);\n\t\t} else {\n\t\t\ttime = data[0];\n\t\t}\n\t\tobj[file] = time;\n\t\tif(time > selfTime)\n\t\t\tselfTime = time;\n\t}, this);\n\tif(this.nestedWatching) {\n\t\tObject.keys(this.directories).forEach(function(dir) {\n\t\t\tvar w = this.directories[dir];\n\t\t\tvar times = w.directoryWatcher.getTimes();\n\t\t\tObject.keys(times).forEach(function(file) {\n\t\t\t\tvar time = times[file];\n\t\t\t\tobj[file] = time;\n\t\t\t\tif(time > selfTime)\n\t\t\t\t\tselfTime = time;\n\t\t\t});\n\t\t}, this);\n\t\tobj[this.path] = selfTime;\n\t}\n\treturn obj;\n};\n\nDirectoryWatcher.prototype.close = function() {\n\tthis.initialScan = false;\n\tvar p = this.watcher.close();\n\tif(p && p.catch) p.catch(this.onWatcherError.bind(this));\n\tif(this.nestedWatching) {\n\t\tObject.keys(this.directories).forEach(function(dir) {\n\t\t\tthis.directories[dir].close();\n\t\t}, this);\n\t}\n\tif(this.parentWatcher) this.parentWatcher.close();\n\tthis.emit(\"closed\");\n};\n\nfunction ensureFsAccuracy(mtime) {\n\tif(!mtime) return;\n\tif(FS_ACCURACY > 1 && mtime % 1 !== 0)\n\t\tFS_ACCURACY = 1;\n\telse if(FS_ACCURACY > 10 && mtime % 10 !== 0)\n\t\tFS_ACCURACY = 10;\n\telse if(FS_ACCURACY > 100 && mtime % 100 !== 0)\n\t\tFS_ACCURACY = 100;\n}\n"},"sourceMaps":null,"error":null,"hash":"3c37b998c0c1b858f11ee046befd28ee","cacheData":{"env":{}}}