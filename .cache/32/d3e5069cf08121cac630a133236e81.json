{"id":"../node_modules/spdy-transport/lib/spdy-transport/utils.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/package.json","includedInParent":true,"mtime":1594570878662},{"name":"util","loc":{"line":3,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/utils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"detect-node","loc":{"line":4,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/utils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/detect-node/browser.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/utils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict'\n\nvar util = require('util')\nvar isNode = require('detect-node')\n\n// Node.js 0.8, 0.10 and 0.12 support\nObject.assign = (process.versions.modules >= 46 || !isNode)\n  ? Object.assign // eslint-disable-next-line\n  : util._extend\n\nfunction QueueItem () {\n  this.prev = null\n  this.next = null\n}\nexports.QueueItem = QueueItem\n\nfunction Queue () {\n  QueueItem.call(this)\n\n  this.prev = this\n  this.next = this\n}\nutil.inherits(Queue, QueueItem)\nexports.Queue = Queue\n\nQueue.prototype.insertTail = function insertTail (item) {\n  item.prev = this.prev\n  item.next = this\n  item.prev.next = item\n  item.next.prev = item\n}\n\nQueue.prototype.remove = function remove (item) {\n  var next = item.next\n  var prev = item.prev\n\n  item.next = item\n  item.prev = item\n  next.prev = prev\n  prev.next = next\n}\n\nQueue.prototype.head = function head () {\n  return this.next\n}\n\nQueue.prototype.tail = function tail () {\n  return this.prev\n}\n\nQueue.prototype.isEmpty = function isEmpty () {\n  return this.next === this\n}\n\nQueue.prototype.isRoot = function isRoot (item) {\n  return this === item\n}\n\nfunction LockStream (stream) {\n  this.locked = false\n  this.queue = []\n  this.stream = stream\n}\nexports.LockStream = LockStream\n\nLockStream.prototype.write = function write (chunks, callback) {\n  var self = this\n\n  // Do not let it interleave\n  if (this.locked) {\n    this.queue.push(function () {\n      return self.write(chunks, callback)\n    })\n    return\n  }\n\n  this.locked = true\n\n  function done (err, chunks) {\n    self.stream.removeListener('error', done)\n\n    self.locked = false\n    if (self.queue.length > 0) { self.queue.shift()() }\n    callback(err, chunks)\n  }\n\n  this.stream.on('error', done)\n\n  // Accumulate all output data\n  var output = []\n  function onData (chunk) {\n    output.push(chunk)\n  }\n  this.stream.on('data', onData)\n\n  function next (err) {\n    self.stream.removeListener('data', onData)\n    if (err) {\n      return done(err)\n    }\n\n    done(null, output)\n  }\n\n  for (var i = 0; i < chunks.length - 1; i++) { this.stream.write(chunks[i]) }\n\n  if (chunks.length > 0) {\n    this.stream.write(chunks[i], next)\n  } else { process.nextTick(next) }\n\n  if (this.stream.execute) {\n    this.stream.execute(function (err) {\n      if (err) { return done(err) }\n    })\n  }\n}\n\n// Just finds the place in array to insert\nfunction binaryLookup (list, item, compare) {\n  var start = 0\n  var end = list.length\n\n  while (start < end) {\n    var pos = (start + end) >> 1\n    var cmp = compare(item, list[pos])\n\n    if (cmp === 0) {\n      start = pos\n      end = pos\n      break\n    } else if (cmp < 0) {\n      end = pos\n    } else {\n      start = pos + 1\n    }\n  }\n\n  return start\n}\nexports.binaryLookup = binaryLookup\n\nfunction binaryInsert (list, item, compare) {\n  var index = binaryLookup(list, item, compare)\n\n  list.splice(index, 0, item)\n}\nexports.binaryInsert = binaryInsert\n\nfunction binarySearch (list, item, compare) {\n  var index = binaryLookup(list, item, compare)\n\n  if (index >= list.length) {\n    return -1\n  }\n\n  if (compare(item, list[index]) === 0) {\n    return index\n  }\n\n  return -1\n}\nexports.binarySearch = binarySearch\n\nfunction Timeout (object) {\n  this.delay = 0\n  this.timer = null\n  this.object = object\n}\nexports.Timeout = Timeout\n\nTimeout.prototype.set = function set (delay, callback) {\n  this.delay = delay\n  this.reset()\n  if (!callback) { return }\n\n  if (this.delay === 0) {\n    this.object.removeListener('timeout', callback)\n  } else {\n    this.object.once('timeout', callback)\n  }\n}\n\nTimeout.prototype.reset = function reset () {\n  if (this.timer !== null) {\n    clearTimeout(this.timer)\n    this.timer = null\n  }\n\n  if (this.delay === 0) { return }\n\n  var self = this\n  this.timer = setTimeout(function () {\n    self.timer = null\n    self.object.emit('timeout')\n  }, this.delay)\n}\n"},"sourceMaps":null,"error":null,"hash":"b9b9ec6361319383277ab6da943a16c6","cacheData":{"env":{}}}