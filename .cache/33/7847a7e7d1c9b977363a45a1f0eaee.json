{"id":"../node_modules/webpack-dev-middleware/lib/context.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/package.json","includedInParent":true,"mtime":1594306881658},{"name":"webpack-log","loc":{"line":3,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/context.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/src/index.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/context.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nvar weblog = require('webpack-log');\n\nmodule.exports = function ctx(compiler, options) {\n  var context = {\n    state: false,\n    webpackStats: null,\n    callbacks: [],\n    options,\n    compiler,\n    watching: null,\n    forceRebuild: false\n  };\n\n  if (options.logger) {\n    context.log = options.logger;\n  } else {\n    context.log = weblog({\n      level: options.logLevel || 'info',\n      name: 'wdm',\n      timestamp: options.logTime\n    });\n  }\n\n  var {\n    log\n  } = context;\n\n  function done(stats) {\n    // We are now on valid state\n    context.state = true;\n    context.webpackStats = stats; // Do the stuff in nextTick, because bundle may be invalidated\n    // if a change happened while compiling\n\n    process.nextTick(function () {\n      // check if still in valid state\n      if (!context.state) {\n        return;\n      } // print webpack output\n\n\n      context.options.reporter(context.options, {\n        log,\n        state: true,\n        stats\n      }); // execute callback that are delayed\n\n      var cbs = context.callbacks;\n      context.callbacks = [];\n      cbs.forEach(function (cb) {\n        cb(stats);\n      });\n    }); // In lazy mode, we may issue another rebuild\n\n    if (context.forceRebuild) {\n      context.forceRebuild = false;\n      rebuild();\n    }\n  }\n\n  function invalid(callback) {\n    if (context.state) {\n      context.options.reporter(context.options, {\n        log,\n        state: false\n      });\n    } // We are now in invalid state\n\n\n    context.state = false;\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n\n  function rebuild() {\n    if (context.state) {\n      context.state = false;\n      context.compiler.run(function (err) {\n        if (err) {\n          log.error(err.stack || err);\n\n          if (err.details) {\n            log.error(err.details);\n          }\n        }\n      });\n    } else {\n      context.forceRebuild = true;\n    }\n  }\n\n  context.rebuild = rebuild;\n  context.compiler.hooks.invalid.tap('WebpackDevMiddleware', invalid);\n  context.compiler.hooks.run.tap('WebpackDevMiddleware', invalid);\n  context.compiler.hooks.done.tap('WebpackDevMiddleware', done);\n  context.compiler.hooks.watchRun.tap('WebpackDevMiddleware', function (comp, callback) {\n    invalid(callback);\n  });\n  return context;\n};"},"sourceMaps":null,"error":null,"hash":"5c02d1dcd037dac73fd2fc575e5db744","cacheData":{"env":{}}}