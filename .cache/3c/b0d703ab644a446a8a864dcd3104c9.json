{"id":"../node_modules/webpack-dev-middleware/lib/middleware.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/package.json","includedInParent":true,"mtime":1594306881658},{"name":"path","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/middleware.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"mime","loc":{"line":4,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/middleware.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/mime/index.js"},{"name":"./DevMiddlewareError","loc":{"line":5,"column":35},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/middleware.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/DevMiddlewareError.js"},{"name":"./util","loc":{"line":6,"column":81},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/middleware.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/util.js"}],"generated":{"js":"'use strict';\n\nvar path = require('path');\n\nvar mime = require('mime');\n\nvar DevMiddlewareError = require('./DevMiddlewareError');\n\nvar {\n  getFilenameFromUrl,\n  handleRangeHeaders,\n  handleRequest,\n  ready\n} = require('./util');\n\nmodule.exports = function wrapper(context) {\n  return function middleware(req, res, next) {\n    // fixes #282. credit @cexoso. in certain edge situations res.locals is\n    // undefined.\n    res.locals = res.locals || {};\n\n    function goNext() {\n      if (!context.options.serverSideRender) {\n        return next();\n      }\n\n      return new Promise(function (resolve) {\n        ready(context, function () {\n          res.locals.webpackStats = context.webpackStats;\n          res.locals.fs = context.fs;\n          resolve(next());\n        }, req);\n      });\n    }\n\n    var acceptedMethods = context.options.methods || ['GET'];\n\n    if (acceptedMethods.indexOf(req.method) === -1) {\n      return goNext();\n    }\n\n    var filename = getFilenameFromUrl(context.options.publicPath, context.compiler, req.url);\n\n    if (filename === false) {\n      return goNext();\n    }\n\n    return new Promise(function (resolve) {\n      handleRequest(context, filename, processRequest, req);\n\n      function processRequest() {\n        try {\n          var stat = context.fs.statSync(filename);\n\n          if (!stat.isFile()) {\n            if (stat.isDirectory()) {\n              var {\n                index\n              } = context.options;\n\n              if (index === undefined || index === true) {\n                index = 'index.html';\n              } else if (!index) {\n                throw new DevMiddlewareError('next');\n              }\n\n              filename = path.posix.join(filename, index);\n              stat = context.fs.statSync(filename);\n\n              if (!stat.isFile()) {\n                throw new DevMiddlewareError('next');\n              }\n            } else {\n              throw new DevMiddlewareError('next');\n            }\n          }\n        } catch (e) {\n          return resolve(goNext());\n        } // server content\n\n\n        var content = context.fs.readFileSync(filename);\n        content = handleRangeHeaders(content, req, res);\n        var contentType = mime.getType(filename); // do not add charset to WebAssembly files, otherwise compileStreaming will fail in the client\n\n        if (!/\\.wasm$/.test(filename)) {\n          contentType += '; charset=UTF-8';\n        }\n\n        res.setHeader('Content-Type', contentType);\n        res.setHeader('Content-Length', content.length);\n        var {\n          headers\n        } = context.options;\n\n        if (headers) {\n          for (var name in headers) {\n            if ({}.hasOwnProperty.call(headers, name)) {\n              res.setHeader(name, context.options.headers[name]);\n            }\n          }\n        } // Express automatically sets the statusCode to 200, but not all servers do (Koa).\n\n\n        res.statusCode = res.statusCode || 200;\n        if (res.send) res.send(content);else res.end(content);\n        resolve();\n      }\n    });\n  };\n};"},"sourceMaps":null,"error":null,"hash":"3946818d1e42e28d042877d0ea23298f","cacheData":{"env":{}}}