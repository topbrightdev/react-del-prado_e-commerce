{"id":"../node_modules/webpack/node_modules/cacache/lib/content/read.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/package.json","includedInParent":true,"mtime":1594578778157},{"name":"bluebird","loc":{"line":3,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/read.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/bluebird/js/browser/bluebird.js"},{"name":"./path","loc":{"line":5,"column":28},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/read.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/path.js"},{"name":"figgy-pudding","loc":{"line":6,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/read.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/figgy-pudding/index.js"},{"name":"graceful-fs","loc":{"line":7,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/read.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/graceful-fs/graceful-fs.js"},{"name":"stream","loc":{"line":8,"column":28},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/read.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/stream-browserify/index.js"},{"name":"mississippi","loc":{"line":9,"column":34},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/read.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/mississippi/index.js"},{"name":"ssri","loc":{"line":10,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/read.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/ssri/index.js"},{"name":"../util/y.js","loc":{"line":11,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/read.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/util/y.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/read.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict'\n\nconst BB = require('bluebird')\n\nconst contentPath = require('./path')\nconst figgyPudding = require('figgy-pudding')\nconst fs = require('graceful-fs')\nconst PassThrough = require('stream').PassThrough\nconst pipe = BB.promisify(require('mississippi').pipe)\nconst ssri = require('ssri')\nconst Y = require('../util/y.js')\n\nconst lstatAsync = BB.promisify(fs.lstat)\nconst readFileAsync = BB.promisify(fs.readFile)\n\nconst ReadOpts = figgyPudding({\n  size: {}\n})\n\nmodule.exports = read\nfunction read (cache, integrity, opts) {\n  opts = ReadOpts(opts)\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return readFileAsync(cpath, null).then(data => {\n      if (typeof opts.size === 'number' && opts.size !== data.length) {\n        throw sizeError(opts.size, data.length)\n      } else if (ssri.checkData(data, sri)) {\n        return data\n      } else {\n        throw integrityError(sri, cpath)\n      }\n    })\n  })\n}\n\nmodule.exports.sync = readSync\nfunction readSync (cache, integrity, opts) {\n  opts = ReadOpts(opts)\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath)\n    if (typeof opts.size === 'number' && opts.size !== data.length) {\n      throw sizeError(opts.size, data.length)\n    } else if (ssri.checkData(data, sri)) {\n      return data\n    } else {\n      throw integrityError(sri, cpath)\n    }\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\nfunction readStream (cache, integrity, opts) {\n  opts = ReadOpts(opts)\n  const stream = new PassThrough()\n  withContentSri(cache, integrity, (cpath, sri) => {\n    return lstatAsync(cpath).then(stat => ({ cpath, sri, stat }))\n  }).then(({ cpath, sri, stat }) => {\n    return pipe(\n      fs.createReadStream(cpath),\n      ssri.integrityStream({\n        integrity: sri,\n        size: opts.size\n      }),\n      stream\n    )\n  }).catch(err => {\n    stream.emit('error', err)\n  })\n  return stream\n}\n\nlet copyFileAsync\nif (fs.copyFile) {\n  module.exports.copy = copy\n  module.exports.copy.sync = copySync\n  copyFileAsync = BB.promisify(fs.copyFile)\n}\n\nfunction copy (cache, integrity, dest, opts) {\n  opts = ReadOpts(opts)\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFileAsync(cpath, dest)\n  })\n}\n\nfunction copySync (cache, integrity, dest, opts) {\n  opts = ReadOpts(opts)\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\nfunction hasContent (cache, integrity) {\n  if (!integrity) { return BB.resolve(false) }\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstatAsync(cpath).then(stat => ({ size: stat.size, sri, stat }))\n  }).catch(err => {\n    if (err.code === 'ENOENT') { return false }\n    if (err.code === 'EPERM') {\n      if (process.platform !== 'win32') {\n        throw err\n      } else {\n        return false\n      }\n    }\n  })\n}\n\nmodule.exports.hasContent.sync = hasContentSync\nfunction hasContentSync (cache, integrity) {\n  if (!integrity) { return false }\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath)\n      return { size: stat.size, sri, stat }\n    } catch (err) {\n      if (err.code === 'ENOENT') { return false }\n      if (err.code === 'EPERM') {\n        if (process.platform !== 'win32') {\n          throw err\n        } else {\n          return false\n        }\n      }\n    }\n  })\n}\n\nfunction withContentSri (cache, integrity, fn) {\n  return BB.try(() => {\n    const sri = ssri.parse(integrity)\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm()\n    const digests = sri[algo]\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0])\n      return fn(cpath, digests[0])\n    } else {\n      return BB.any(sri[sri.pickAlgorithm()].map(meta => {\n        return withContentSri(cache, meta, fn)\n      }, { concurrency: 1 }))\n        .catch(err => {\n          if ([].some.call(err, e => e.code === 'ENOENT')) {\n            throw Object.assign(\n              new Error('No matching content found for ' + sri.toString()),\n              { code: 'ENOENT' }\n            )\n          } else {\n            throw err[0]\n          }\n        })\n    }\n  })\n}\n\nfunction withContentSriSync (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    let lastErr = null\n    for (const meta of sri[sri.pickAlgorithm()]) {\n      try {\n        return withContentSriSync(cache, meta, fn)\n      } catch (err) {\n        lastErr = err\n      }\n    }\n    if (lastErr) { throw lastErr }\n  }\n}\n\nfunction sizeError (expected, found) {\n  var err = new Error(Y`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  var err = new Error(Y`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"},"sourceMaps":null,"error":null,"hash":"52907cf2488aec4f9649658b39b0fb73","cacheData":{"env":{}}}