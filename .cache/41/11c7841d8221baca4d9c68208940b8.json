{"id":"../node_modules/postcss-color-mod-function/index.es.mjs","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-mod-function/package.json","includedInParent":true,"mtime":1594306880402},{"name":"postcss-values-parser","loc":{"line":1,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-mod-function/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-values-parser/lib/index.js"},{"name":"fs","loc":{"line":2,"column":15},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-mod-function/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":3,"column":17},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-mod-function/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"postcss","loc":{"line":4,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-mod-function/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-mod-function/node_modules/postcss/lib/postcss.js"},{"name":"@csstools/convert-colors","loc":{"line":5,"column":78},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-mod-function/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/@csstools/convert-colors/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcssValuesParser = _interopRequireDefault(require(\"postcss-values-parser\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _convertColors = require(\"@csstools/convert-colors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray2(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction getCustomProperties(root, opts) {\n  // initialize custom selectors\n  var customPropertiesFromHtmlElement = {};\n  var customPropertiesFromRootPsuedo = {}; // for each html or :root rule\n\n  root.nodes.slice().forEach(function (rule) {\n    var customPropertiesObject = isHtmlRule(rule) ? customPropertiesFromHtmlElement : isRootRule(rule) ? customPropertiesFromRootPsuedo : null; // for each custom property\n\n    if (customPropertiesObject) {\n      rule.nodes.slice().forEach(function (decl) {\n        if (isCustomDecl(decl)) {\n          var prop = decl.prop; // write the parsed value to the custom property\n\n          customPropertiesObject[prop] = (0, _postcssValuesParser.default)(decl.value).parse(); // conditionally remove the custom property declaration\n\n          if (!opts.preserve) {\n            decl.remove();\n          }\n        }\n      }); // conditionally remove the empty html or :root rule\n\n      if (!opts.preserve && isEmptyParent(rule)) {\n        rule.remove();\n      }\n    }\n  }); // return all custom properties, preferring :root properties over html properties\n\n  return _objectSpread({}, customPropertiesFromHtmlElement, customPropertiesFromRootPsuedo);\n} // match html and :root rules\n\n\nvar htmlSelectorRegExp = /^html$/i;\nvar rootSelectorRegExp = /^:root$/i;\nvar customPropertyRegExp = /^--[A-z][\\w-]*$/; // whether the node is an html or :root rule\n\nvar isHtmlRule = function (node) {\n  return node.type === 'rule' && htmlSelectorRegExp.test(node.selector) && Object(node.nodes).length;\n};\n\nvar isRootRule = function (node) {\n  return node.type === 'rule' && rootSelectorRegExp.test(node.selector) && Object(node.nodes).length;\n}; // whether the node is an custom property\n\n\nvar isCustomDecl = function (node) {\n  return node.type === 'decl' && customPropertyRegExp.test(node.prop);\n}; // whether the node is a parent without children\n\n\nvar isEmptyParent = function (node) {\n  return Object(node.nodes).length === 0;\n};\n/* Import Custom Properties from CSS AST\n/* ========================================================================== */\n\n\nfunction importCustomPropertiesFromCSSAST(root) {\n  return getCustomProperties(root, {\n    preserve: true\n  });\n}\n/* Import Custom Properties from CSS File\n/* ========================================================================== */\n\n\nfunction importCustomPropertiesFromCSSFile(_x) {\n  return _importCustomPropertiesFromCSSFile.apply(this, arguments);\n}\n/* Import Custom Properties from Object\n/* ========================================================================== */\n\n\nfunction _importCustomPropertiesFromCSSFile() {\n  _importCustomPropertiesFromCSSFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(from) {\n    var css, root;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return readFile(from);\n\n          case 2:\n            css = _context.sent;\n            root = _postcss.default.parse(css, {\n              from\n            });\n            return _context.abrupt(\"return\", importCustomPropertiesFromCSSAST(root));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _importCustomPropertiesFromCSSFile.apply(this, arguments);\n}\n\nfunction importCustomPropertiesFromObject(object) {\n  var customProperties = Object.assign({}, Object(object).customProperties || Object(object)['custom-properties']);\n\n  for (var prop in customProperties) {\n    customProperties[prop] = (0, _postcssValuesParser.default)(customProperties[prop]).parse();\n  }\n\n  return customProperties;\n}\n/* Import Custom Properties from JSON file\n/* ========================================================================== */\n\n\nfunction importCustomPropertiesFromJSONFile(_x2) {\n  return _importCustomPropertiesFromJSONFile.apply(this, arguments);\n}\n/* Import Custom Properties from JS file\n/* ========================================================================== */\n\n\nfunction _importCustomPropertiesFromJSONFile() {\n  _importCustomPropertiesFromJSONFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(from) {\n    var object;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return readJSON(from);\n\n          case 2:\n            object = _context2.sent;\n            return _context2.abrupt(\"return\", importCustomPropertiesFromObject(object));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _importCustomPropertiesFromJSONFile.apply(this, arguments);\n}\n\nfunction importCustomPropertiesFromJSFile(_x3) {\n  return _importCustomPropertiesFromJSFile.apply(this, arguments);\n}\n/* Import Custom Properties from Sources\n/* ========================================================================== */\n\n\nfunction _importCustomPropertiesFromJSFile() {\n  _importCustomPropertiesFromJSFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(from) {\n    var object;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return import(from);\n\n          case 2:\n            object = _context3.sent;\n            return _context3.abrupt(\"return\", importCustomPropertiesFromObject(object));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _importCustomPropertiesFromJSFile.apply(this, arguments);\n}\n\nfunction importCustomPropertiesFromSources(sources) {\n  return sources.map(function (source) {\n    if (source instanceof Promise) {\n      return source;\n    } else if (source instanceof Function) {\n      return source();\n    } // read the source as an object\n\n\n    var opts = source === Object(source) ? source : {\n      from: String(source)\n    }; // skip objects with Custom Properties\n\n    if (opts.customProperties || opts['custom-properties']) {\n      return opts;\n    } // source pathname\n\n\n    var from = _path.default.resolve(String(opts.from || '')); // type of file being read from\n\n\n    var type = (opts.type || _path.default.extname(from).slice(1)).toLowerCase();\n\n    return {\n      type,\n      from\n    };\n  }).reduce( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(customProperties, source) {\n      var _ref2, type, from;\n\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return source;\n\n            case 2:\n              _ref2 = _context4.sent;\n              type = _ref2.type;\n              from = _ref2.from;\n\n              if (!(type === 'ast')) {\n                _context4.next = 12;\n                break;\n              }\n\n              _context4.t0 = Object;\n              _context4.next = 9;\n              return customProperties;\n\n            case 9:\n              _context4.t1 = _context4.sent;\n              _context4.t2 = importCustomPropertiesFromCSSAST(from);\n              return _context4.abrupt(\"return\", _context4.t0.assign.call(_context4.t0, _context4.t1, _context4.t2));\n\n            case 12:\n              if (!(type === 'css')) {\n                _context4.next = 21;\n                break;\n              }\n\n              _context4.t3 = Object;\n              _context4.next = 16;\n              return customProperties;\n\n            case 16:\n              _context4.t4 = _context4.sent;\n              _context4.next = 19;\n              return importCustomPropertiesFromCSSFile(from);\n\n            case 19:\n              _context4.t5 = _context4.sent;\n              return _context4.abrupt(\"return\", _context4.t3.assign.call(_context4.t3, _context4.t4, _context4.t5));\n\n            case 21:\n              if (!(type === 'js')) {\n                _context4.next = 30;\n                break;\n              }\n\n              _context4.t6 = Object;\n              _context4.next = 25;\n              return customProperties;\n\n            case 25:\n              _context4.t7 = _context4.sent;\n              _context4.next = 28;\n              return importCustomPropertiesFromJSFile(from);\n\n            case 28:\n              _context4.t8 = _context4.sent;\n              return _context4.abrupt(\"return\", _context4.t6.assign.call(_context4.t6, _context4.t7, _context4.t8));\n\n            case 30:\n              if (!(type === 'json')) {\n                _context4.next = 39;\n                break;\n              }\n\n              _context4.t9 = Object;\n              _context4.next = 34;\n              return customProperties;\n\n            case 34:\n              _context4.t10 = _context4.sent;\n              _context4.next = 37;\n              return importCustomPropertiesFromJSONFile(from);\n\n            case 37:\n              _context4.t11 = _context4.sent;\n              return _context4.abrupt(\"return\", _context4.t9.assign.call(_context4.t9, _context4.t10, _context4.t11));\n\n            case 39:\n              _context4.t12 = Object;\n              _context4.next = 42;\n              return customProperties;\n\n            case 42:\n              _context4.t13 = _context4.sent;\n              _context4.t14 = importCustomPropertiesFromObject;\n              _context4.next = 46;\n              return source;\n\n            case 46:\n              _context4.t15 = _context4.sent;\n              _context4.next = 49;\n              return (0, _context4.t14)(_context4.t15);\n\n            case 49:\n              _context4.t16 = _context4.sent;\n              return _context4.abrupt(\"return\", _context4.t12.assign.call(_context4.t12, _context4.t13, _context4.t16));\n\n            case 51:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }(), {});\n}\n/* Helper utilities\n/* ========================================================================== */\n\n\nvar readFile = function (from) {\n  return new Promise(function (resolve, reject) {\n    _fs.default.readFile(from, 'utf8', function (error, result) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\nvar readJSON = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(from) {\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.t0 = JSON;\n            _context5.next = 3;\n            return readFile(from);\n\n          case 3:\n            _context5.t1 = _context5.sent;\n            return _context5.abrupt(\"return\", _context5.t0.parse.call(_context5.t0, _context5.t1));\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function readJSON(_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/* Convert Degree to Hue Degree\n/* ========================================================================== */\n\n\nfunction convertDtoD(deg) {\n  return deg % 360;\n}\n/* Convert Gradian to Hue Degree\n/* ========================================================================== */\n\n\nfunction convertGtoD(grad) {\n  return grad * 0.9 % 360;\n}\n/* Convert Radian to Hue Degree\n/* ========================================================================== */\n\n\nfunction convertRtoD(rad) {\n  return rad * 180 / Math.PI % 360;\n}\n/* Convert Turn to Hue Degree\n/* ========================================================================== */\n\n\nfunction convertTtoD(turn) {\n  return turn * 360 % 360;\n}\n/* Convert a Name to Red/Green/Blue\n/* ========================================================================== */\n\n\nfunction convertNtoRGB(name) {\n  var names = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 134, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 250, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 221],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [112, 128, 144],\n    slategrey: [112, 128, 144],\n    snow: [255, 250, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    tomato: [255, 99, 71],\n    transparent: [0, 0, 0],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 50]\n  };\n  return names[name] && names[name].map(function (c) {\n    return c / 2.55;\n  });\n}\n/* Convert a Hex to Red/Green/Blue\n/* ========================================================================== */\n\n\nfunction convertHtoRGB(hex) {\n  // #<hex-color>{3,4,6,8}\n  var _slice = (hex.match(hexColorMatch) || []).slice(1),\n      _slice2 = _slicedToArray(_slice, 8),\n      r = _slice2[0],\n      g = _slice2[1],\n      b = _slice2[2],\n      a = _slice2[3],\n      rr = _slice2[4],\n      gg = _slice2[5],\n      bb = _slice2[6],\n      aa = _slice2[7];\n\n  if (rr !== undefined || r !== undefined) {\n    var red = rr !== undefined ? parseInt(rr, 16) : r !== undefined ? parseInt(r + r, 16) : 0;\n    var green = gg !== undefined ? parseInt(gg, 16) : g !== undefined ? parseInt(g + g, 16) : 0;\n    var blue = bb !== undefined ? parseInt(bb, 16) : b !== undefined ? parseInt(b + b, 16) : 0;\n    var alpha = aa !== undefined ? parseInt(aa, 16) : a !== undefined ? parseInt(a + a, 16) : 255;\n    return [red, green, blue, alpha].map(function (c) {\n      return c / 2.55;\n    });\n  }\n\n  return undefined;\n}\n\nvar hexColorMatch = /^#(?:([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?|([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?)$/i;\n\nvar Color = /*#__PURE__*/function () {\n  function Color(color) {\n    _classCallCheck(this, Color);\n\n    this.color = Object(Object(color).color || color);\n    this.color.colorspace = this.color.colorspace ? this.color.colorspace : 'red' in color && 'green' in color && 'blue' in color ? 'rgb' : 'hue' in color && 'saturation' in color && 'lightness' in color ? 'hsl' : 'hue' in color && 'whiteness' in color && 'blackness' in color ? 'hwb' : 'unknown';\n\n    if (color.colorspace === 'rgb') {\n      this.color.hue = (0, _convertColors.rgb2hue)(color.red, color.green, color.blue, color.hue || 0);\n    }\n  }\n\n  _createClass(Color, [{\n    key: \"alpha\",\n    value: function alpha(_alpha) {\n      var color = this.color;\n      return _alpha === undefined ? color.alpha : new Color(assign(color, {\n        alpha: _alpha\n      }));\n    }\n  }, {\n    key: \"blackness\",\n    value: function blackness(_blackness) {\n      var hwb = color2hwb(this.color);\n      return _blackness === undefined ? hwb.blackness : new Color(assign(hwb, {\n        blackness: _blackness\n      }));\n    }\n  }, {\n    key: \"blend\",\n    value: function blend(color, percentage) {\n      var colorspace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rgb';\n      var base = this.color;\n      return new Color(_blend(base, color, percentage, colorspace));\n    }\n  }, {\n    key: \"blenda\",\n    value: function blenda(color, percentage) {\n      var colorspace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rgb';\n      var base = this.color;\n      return new Color(_blend(base, color, percentage, colorspace, true));\n    }\n  }, {\n    key: \"blue\",\n    value: function blue(_blue) {\n      var rgb = color2rgb(this.color);\n      return _blue === undefined ? rgb.blue : new Color(assign(rgb, {\n        blue: _blue\n      }));\n    }\n  }, {\n    key: \"contrast\",\n    value: function contrast(percentage) {\n      var base = this.color;\n      return new Color(_contrast(base, percentage));\n    }\n  }, {\n    key: \"green\",\n    value: function green(_green) {\n      var rgb = color2rgb(this.color);\n      return _green === undefined ? rgb.green : new Color(assign(rgb, {\n        green: _green\n      }));\n    }\n  }, {\n    key: \"hue\",\n    value: function hue(_hue) {\n      var hsl = color2hsl(this.color);\n      return _hue === undefined ? hsl.hue : new Color(assign(hsl, {\n        hue: _hue\n      }));\n    }\n  }, {\n    key: \"lightness\",\n    value: function lightness(_lightness) {\n      var hsl = color2hsl(this.color);\n      return _lightness === undefined ? hsl.lightness : new Color(assign(hsl, {\n        lightness: _lightness\n      }));\n    }\n  }, {\n    key: \"red\",\n    value: function red(_red) {\n      var rgb = color2rgb(this.color);\n      return _red === undefined ? rgb.red : new Color(assign(rgb, {\n        red: _red\n      }));\n    }\n  }, {\n    key: \"rgb\",\n    value: function rgb(red, green, blue) {\n      var rgb = color2rgb(this.color);\n      return new Color(assign(rgb, {\n        red,\n        green,\n        blue\n      }));\n    }\n  }, {\n    key: \"saturation\",\n    value: function saturation(_saturation) {\n      var hsl = color2hsl(this.color);\n      return _saturation === undefined ? hsl.saturation : new Color(assign(hsl, {\n        saturation: _saturation\n      }));\n    }\n  }, {\n    key: \"shade\",\n    value: function shade(percentage) {\n      var hwb = color2hwb(this.color);\n      var shade = {\n        hue: 0,\n        whiteness: 0,\n        blackness: 100,\n        colorspace: 'hwb'\n      };\n      var colorspace = 'rgb';\n      return percentage === undefined ? hwb.blackness : new Color(_blend(hwb, shade, percentage, colorspace));\n    }\n  }, {\n    key: \"tint\",\n    value: function tint(percentage) {\n      var hwb = color2hwb(this.color);\n      var tint = {\n        hue: 0,\n        whiteness: 100,\n        blackness: 0,\n        colorspace: 'hwb'\n      };\n      var colorspace = 'rgb';\n      return percentage === undefined ? hwb.blackness : new Color(_blend(hwb, tint, percentage, colorspace));\n    }\n  }, {\n    key: \"whiteness\",\n    value: function whiteness(_whiteness) {\n      var hwb = color2hwb(this.color);\n      return _whiteness === undefined ? hwb.whiteness : new Color(assign(hwb, {\n        whiteness: _whiteness\n      }));\n    }\n  }, {\n    key: \"toHSL\",\n    value: function toHSL() {\n      return color2hslString(this.color);\n    }\n  }, {\n    key: \"toHWB\",\n    value: function toHWB() {\n      return color2hwbString(this.color);\n    }\n  }, {\n    key: \"toLegacy\",\n    value: function toLegacy() {\n      return color2legacyString(this.color);\n    }\n  }, {\n    key: \"toRGB\",\n    value: function toRGB() {\n      return color2rgbString(this.color);\n    }\n  }, {\n    key: \"toRGBLegacy\",\n    value: function toRGBLegacy() {\n      return color2rgbLegacyString(this.color);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return color2string(this.color);\n    }\n  }]);\n\n  return Color;\n}();\n/* Blending\n/* ========================================================================== */\n\n\nfunction _blend(base, color, percentage, colorspace, isBlendingAlpha) {\n  var addition = percentage / 100;\n  var subtraction = 1 - addition;\n\n  if (colorspace === 'hsl') {\n    var _color2hsl = color2hsl(base),\n        h1 = _color2hsl.hue,\n        s1 = _color2hsl.saturation,\n        l1 = _color2hsl.lightness,\n        a1 = _color2hsl.alpha;\n\n    var _color2hsl2 = color2hsl(color),\n        h2 = _color2hsl2.hue,\n        s2 = _color2hsl2.saturation,\n        l2 = _color2hsl2.lightness,\n        a2 = _color2hsl2.alpha;\n\n    var hue = h1 * subtraction + h2 * addition,\n        saturation = s1 * subtraction + s2 * addition,\n        lightness = l1 * subtraction + l2 * addition,\n        alpha = isBlendingAlpha ? a1 * subtraction + a2 * addition : a1;\n    return {\n      hue,\n      saturation,\n      lightness,\n      alpha,\n      colorspace: 'hsl'\n    };\n  } else if (colorspace === 'hwb') {\n    var _color2hwb = color2hwb(base),\n        _h = _color2hwb.hue,\n        w1 = _color2hwb.whiteness,\n        b1 = _color2hwb.blackness,\n        _a = _color2hwb.alpha;\n\n    var _color2hwb2 = color2hwb(color),\n        _h2 = _color2hwb2.hue,\n        w2 = _color2hwb2.whiteness,\n        b2 = _color2hwb2.blackness,\n        _a2 = _color2hwb2.alpha;\n\n    var _hue2 = _h * subtraction + _h2 * addition,\n        whiteness = w1 * subtraction + w2 * addition,\n        blackness = b1 * subtraction + b2 * addition,\n        _alpha2 = isBlendingAlpha ? _a * subtraction + _a2 * addition : _a;\n\n    return {\n      hue: _hue2,\n      whiteness,\n      blackness,\n      alpha: _alpha2,\n      colorspace: 'hwb'\n    };\n  } else {\n    var _color2rgb = color2rgb(base),\n        r1 = _color2rgb.red,\n        g1 = _color2rgb.green,\n        _b = _color2rgb.blue,\n        _a3 = _color2rgb.alpha;\n\n    var _color2rgb2 = color2rgb(color),\n        r2 = _color2rgb2.red,\n        g2 = _color2rgb2.green,\n        _b2 = _color2rgb2.blue,\n        _a4 = _color2rgb2.alpha;\n\n    var red = r1 * subtraction + r2 * addition,\n        green = g1 * subtraction + g2 * addition,\n        blue = _b * subtraction + _b2 * addition,\n        _alpha3 = isBlendingAlpha ? _a3 * subtraction + _a4 * addition : _a3;\n\n    return {\n      red,\n      green,\n      blue,\n      alpha: _alpha3,\n      colorspace: 'rgb'\n    };\n  }\n}\n/* Assign channels to a new instance of a base color\n/* ========================================================================== */\n\n\nfunction assign(base, channels) {\n  var color = Object.assign({}, base);\n  Object.keys(channels).forEach(function (channel) {\n    // detect channel\n    var isHue = channel === 'hue';\n    var isRGB = !isHue && blueGreenRedMatch.test(channel); // normalized value of the channel\n\n    var value = normalize(channels[channel], channel); // assign channel to new object\n\n    color[channel] = value;\n\n    if (isRGB) {\n      // conditionally preserve the hue\n      color.hue = (0, _convertColors.rgb2hue)(color.red, color.green, color.blue, base.hue || 0);\n    }\n  });\n  return color;\n}\n\nfunction normalize(value, channel) {\n  // detect channel\n  var isHue = channel === 'hue'; // value limitations\n\n  var min = 0;\n  var max = isHue ? 360 : 100;\n  var normalizedValue = Math.min(Math.max(isHue ? value % 360 : value, min), max);\n  return normalizedValue;\n}\n/* Convert colors\n/* ========================================================================== */\n\n\nfunction color2rgb(color) {\n  var _ref = color.colorspace === 'hsl' ? (0, _convertColors.hsl2rgb)(color.hue, color.saturation, color.lightness) : color.colorspace === 'hwb' ? (0, _convertColors.hwb2rgb)(color.hue, color.whiteness, color.blackness) : [color.red, color.green, color.blue],\n      _ref2 = _slicedToArray(_ref, 3),\n      red = _ref2[0],\n      green = _ref2[1],\n      blue = _ref2[2];\n\n  return {\n    red,\n    green,\n    blue,\n    hue: color.hue,\n    alpha: color.alpha,\n    colorspace: 'rgb'\n  };\n}\n\nfunction color2hsl(color) {\n  var _ref3 = color.colorspace === 'rgb' ? (0, _convertColors.rgb2hsl)(color.red, color.green, color.blue, color.hue) : color.colorspace === 'hwb' ? (0, _convertColors.hwb2hsl)(color.hue, color.whiteness, color.blackness) : [color.hue, color.saturation, color.lightness],\n      _ref4 = _slicedToArray(_ref3, 3),\n      hue = _ref4[0],\n      saturation = _ref4[1],\n      lightness = _ref4[2];\n\n  return {\n    hue,\n    saturation,\n    lightness,\n    alpha: color.alpha,\n    colorspace: 'hsl'\n  };\n}\n\nfunction color2hwb(color) {\n  var _ref5 = color.colorspace === 'rgb' ? (0, _convertColors.rgb2hwb)(color.red, color.green, color.blue, color.hue) : color.colorspace === 'hsl' ? (0, _convertColors.hsl2hwb)(color.hue, color.saturation, color.lightness) : [color.hue, color.whiteness, color.blackness],\n      _ref6 = _slicedToArray(_ref5, 3),\n      hue = _ref6[0],\n      whiteness = _ref6[1],\n      blackness = _ref6[2];\n\n  return {\n    hue,\n    whiteness,\n    blackness,\n    alpha: color.alpha,\n    colorspace: 'hwb'\n  };\n}\n/* Contrast functions\n/* ========================================================================== */\n\n\nfunction _contrast(color, percentage) {\n  // https://drafts.csswg.org/css-color/#contrast-adjuster\n  var hwb = color2hwb(color);\n  var rgb = color2rgb(color); // compute the luminance of the color.\n\n  var luminance = rgb2luminance(rgb.red, rgb.green, rgb.blue); // the maximum-contrast color, if it is less than .5\n\n  var maxContrastColor = luminance < 0.5 // hwb(X, 100%, 0%), where X is the hue angle of the color\n  ? {\n    hue: hwb.hue,\n    whiteness: 100,\n    blackness: 0,\n    alpha: hwb.alpha,\n    colorspace: 'hwb' // otherwise, hwb(X, 0%, 100%), where X is the hue angle of the color\n\n  } : {\n    hue: hwb.hue,\n    whiteness: 0,\n    blackness: 100,\n    alpha: hwb.alpha,\n    colorspace: 'hwb'\n  }; // contrast ratio\n\n  var contrastRatio = colors2contrast(color, maxContrastColor);\n  var minContrastColor = contrastRatio > 4.5 // the color with the smallest contrast ratio with the base color that is greater than 4.5\n  ? colors2contrastRatioColor(hwb, maxContrastColor) // otherwise, the maximum-contrast color\n  : maxContrastColor; // color(maximum-contrast blend(minimum-contrast <percentage> hwb)));\n\n  return _blend(maxContrastColor, minContrastColor, percentage, 'hwb', false);\n}\n\nfunction colors2contrast(color1, color2) {\n  // https://drafts.csswg.org/css-color/#contrast-ratio\n  var rgb1 = color2rgb(color1);\n  var rgb2 = color2rgb(color2);\n  var l1 = rgb2luminance(rgb1.red, rgb1.green, rgb1.blue);\n  var l2 = rgb2luminance(rgb2.red, rgb2.green, rgb2.blue);\n  return l1 > l2 // if l1 is the relative luminance of the lighter of the colors\n  ? (l1 + 0.05) / (l2 + 0.05) // otherwise, if l2 is the relative luminance of the lighter of the colors\n  : (l2 + 0.05) / (l1 + 0.05);\n}\n\nfunction rgb2luminance(red, green, blue) {\n  var _ref7 = [channel2luminance(red), channel2luminance(green), channel2luminance(blue)],\n      redLuminance = _ref7[0],\n      greenLuminance = _ref7[1],\n      blueLuminance = _ref7[2]; // https://drafts.csswg.org/css-color/#luminance\n\n  var luminance = 0.2126 * redLuminance + 0.7152 * greenLuminance + 0.0722 * blueLuminance;\n  return luminance;\n}\n\nfunction channel2luminance(value) {\n  // https://drafts.csswg.org/css-color/#luminance\n  var luminance = value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4);\n  return luminance;\n} // return the smallest contrast ratio from a color and a maximum contrast (credit: @thetalecrafter)\n\n\nfunction colors2contrastRatioColor(hwb, maxHWB) {\n  var modifiedHWB = Object.assign({}, hwb); // values to be used for linear interpolations in HWB space\n\n  var minW = hwb.whiteness;\n  var minB = hwb.blackness;\n  var maxW = maxHWB.whiteness;\n  var maxB = maxHWB.blackness; // find the color with the smallest contrast ratio with the base color that is greater than 4.5\n\n  while (Math.abs(minW - maxW) > 100 || Math.abs(minB - maxB) > 100) {\n    var midW = Math.round((maxW + minW) / 2);\n    var midB = Math.round((maxB + minB) / 2);\n    modifiedHWB.whiteness = midW;\n    modifiedHWB.blackness = midB;\n\n    if (colors2contrast(modifiedHWB, hwb) > 4.5) {\n      maxW = midW;\n      maxB = midB;\n    } else {\n      minW = midW;\n      minB = midB;\n    }\n  }\n\n  return modifiedHWB;\n}\n/* Match\n/* ========================================================================== */\n\n\nvar blueGreenRedMatch = /^(blue|green|red)$/i;\n/* Stringifiers\n/* ========================================================================== */\n\nfunction color2string(color) {\n  return color.colorspace === 'hsl' ? color2hslString(color) : color.colorspace === 'hwb' ? color2hwbString(color) : color2rgbString(color);\n}\n\nfunction color2hslString(color) {\n  var hsl = color2hsl(color);\n  var isOpaque = hsl.alpha === 100;\n  var hue = hsl.hue;\n  var saturation = Math.round(hsl.saturation * 10000000000) / 10000000000;\n  var lightness = Math.round(hsl.lightness * 10000000000) / 10000000000;\n  var alpha = Math.round(hsl.alpha * 10000000000) / 10000000000;\n  return \"hsl(\".concat(hue, \" \").concat(saturation, \"% \").concat(lightness, \"%\").concat(isOpaque ? '' : \" / \".concat(alpha, \"%\"), \")\");\n}\n\nfunction color2hwbString(color) {\n  var hwb = color2hwb(color);\n  var isOpaque = hwb.alpha === 100;\n  var hue = hwb.hue;\n  var whiteness = Math.round(hwb.whiteness * 10000000000) / 10000000000;\n  var blackness = Math.round(hwb.blackness * 10000000000) / 10000000000;\n  var alpha = Math.round(hwb.alpha * 10000000000) / 10000000000;\n  return \"hwb(\".concat(hue, \" \").concat(whiteness, \"% \").concat(blackness, \"%\").concat(isOpaque ? '' : \" / \".concat(alpha, \"%\"), \")\");\n}\n\nfunction color2rgbString(color) {\n  var rgb = color2rgb(color);\n  var isOpaque = rgb.alpha === 100;\n  var red = Math.round(rgb.red * 10000000000) / 10000000000;\n  var green = Math.round(rgb.green * 10000000000) / 10000000000;\n  var blue = Math.round(rgb.blue * 10000000000) / 10000000000;\n  var alpha = Math.round(rgb.alpha * 10000000000) / 10000000000;\n  return \"rgb(\".concat(red, \"% \").concat(green, \"% \").concat(blue, \"%\").concat(isOpaque ? '' : \" / \".concat(alpha, \"%\"), \")\");\n}\n\nfunction color2legacyString(color) {\n  return color.colorspace === 'hsl' ? color2hslLegacyString(color) : color2rgbLegacyString(color);\n}\n\nfunction color2rgbLegacyString(color) {\n  var rgb = color2rgb(color);\n  var isOpaque = rgb.alpha === 100;\n  var name = isOpaque ? 'rgb' : 'rgba';\n  var red = Math.round(rgb.red * 255 / 100);\n  var green = Math.round(rgb.green * 255 / 100);\n  var blue = Math.round(rgb.blue * 255 / 100);\n  var alpha = Math.round(rgb.alpha / 100 * 10000000000) / 10000000000;\n  return \"\".concat(name, \"(\").concat(red, \", \").concat(green, \", \").concat(blue).concat(isOpaque ? '' : \", \".concat(alpha), \")\");\n}\n\nfunction color2hslLegacyString(color) {\n  var hsl = color2hsl(color);\n  var isOpaque = hsl.alpha === 100;\n  var name = isOpaque ? 'hsl' : 'hsla';\n  var hue = hsl.hue;\n  var saturation = Math.round(hsl.saturation * 10000000000) / 10000000000;\n  var lightness = Math.round(hsl.lightness * 10000000000) / 10000000000;\n  var alpha = Math.round(hsl.alpha / 100 * 10000000000) / 10000000000;\n  return \"\".concat(name, \"(\").concat(hue, \", \").concat(saturation, \"%, \").concat(lightness, \"%\").concat(isOpaque ? '' : \", \".concat(alpha), \")\");\n}\n\nfunction manageUnresolved(node, opts, word, message) {\n  if ('warn' === opts.unresolved) {\n    opts.decl.warn(opts.result, message, {\n      word\n    });\n  } else if ('ignore' !== opts.unresolved) {\n    throw opts.decl.error(message, {\n      word\n    });\n  }\n}\n/* Transform AST\n/* ========================================================================== */\n\n\nfunction transformAST(node, opts) {\n  node.nodes.slice(0).forEach(function (child) {\n    if (isColorModFunction(child)) {\n      // transform any variables within the color-mod() function\n      if (opts.transformVars) {\n        transformVariables(child, opts);\n      } // transform any color-mod() functions\n\n\n      var color = transformColorModFunction(child, opts);\n\n      if (color) {\n        // update the color-mod() function with the transformed value\n        child.replaceWith(_postcssValuesParser.default.word({\n          raws: child.raws,\n          value: opts.stringifier(color)\n        }));\n      }\n    } else if (child.nodes && Object(child.nodes).length) {\n      transformAST(child, opts);\n    }\n  });\n}\n/* Transform <var> functions\n/* ========================================================================== */\n\n\nfunction transformVariables(node, opts) {\n  walk(node, function (child) {\n    if (isVariable(child)) {\n      // get the custom property and fallback value from var()\n      var _transformArgsByParam = transformArgsByParams(child, [// <value> , [ <fallback> ]?\n      [transformWord, isComma, transformNode]]),\n          _transformArgsByParam2 = _slicedToArray(_transformArgsByParam, 2),\n          prop = _transformArgsByParam2[0],\n          fallbackNode = _transformArgsByParam2[1]; // if the custom property is known\n\n\n      if (prop in opts.customProperties) {\n        var customPropertyValue = opts.customProperties[prop]; // follow custom properties referencing custom properties\n\n        if (looseVarMatch.test(customPropertyValue)) {\n          var rootChildAST = customPropertyValue.clone();\n          transformVariables(rootChildAST, opts);\n          customPropertyValue = rootChildAST;\n        } // replace var() with the custom property value\n\n\n        if (customPropertyValue.nodes.length === 1 && customPropertyValue.nodes[0].nodes.length) {\n          customPropertyValue.nodes[0].nodes.forEach(function (customPropertyChild) {\n            child.parent.insertBefore(child, customPropertyChild);\n          });\n        }\n\n        child.remove();\n      } else if (fallbackNode && fallbackNode.nodes.length === 1 && fallbackNode.nodes[0].nodes.length) {\n        // otherwise, replace var() with the fallback value\n        transformVariables(fallbackNode, opts);\n        child.replaceWith.apply(child, _toConsumableArray(fallbackNode.nodes[0].nodes[0]));\n      }\n    }\n  });\n}\n/* Transform <color> functions\n/* ========================================================================== */\n\n\nfunction transformColor(node, opts) {\n  if (isRGBFunction(node)) {\n    return transformRGBFunction(node, opts);\n  } else if (isHSLFunction(node)) {\n    return transformHSLFunction(node, opts);\n  } else if (isHWBFunction(node)) {\n    return transformHWBFunction(node, opts);\n  } else if (isColorModFunction(node)) {\n    return transformColorModFunction(node, opts);\n  } else if (isHexColor(node)) {\n    return transformHexColor(node, opts);\n  } else if (isNamedColor(node)) {\n    return transformNamedColor(node, opts);\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a color\");\n  }\n} // return a transformed rgb/rgba color function\n\n\nfunction transformRGBFunction(node, opts) {\n  var _transformArgsByParam3 = transformArgsByParams(node, [// <percentage> <percentage> <percentage> [ , <alpha-value> ]?\n  [transformPercentage, transformPercentage, transformPercentage, isSlash, transformAlpha], // <number> <number> <number> [ , <alpha-value> ]?\n  [transformRGBNumber, transformRGBNumber, transformRGBNumber, isSlash, transformAlpha], // <percentage> , <percentage> , <percentage> [ , <alpha-value> ]?\n  [transformPercentage, isComma, transformPercentage, isComma, transformPercentage, isComma, transformAlpha], // <number> , <number> , <number> [ , <alpha-value> ]?\n  [transformRGBNumber, isComma, transformRGBNumber, isComma, transformRGBNumber, isComma, transformAlpha]]),\n      _transformArgsByParam4 = _slicedToArray(_transformArgsByParam3, 4),\n      red = _transformArgsByParam4[0],\n      green = _transformArgsByParam4[1],\n      blue = _transformArgsByParam4[2],\n      _transformArgsByParam5 = _transformArgsByParam4[3],\n      alpha = _transformArgsByParam5 === void 0 ? 100 : _transformArgsByParam5;\n\n  if (red !== undefined) {\n    var color = new Color({\n      red,\n      green,\n      blue,\n      alpha,\n      colorspace: 'rgb'\n    });\n    return color;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid rgb() function\");\n  }\n} // return a transformed hsl/hsla color function\n\n\nfunction transformHSLFunction(node, opts) {\n  var _transformArgsByParam6 = transformArgsByParams(node, [// <hue> <percentage> <percentage> [ / <alpha-value> ]?\n  [transformHue, transformPercentage, transformPercentage, isSlash, transformAlpha], // <hue> , <percentage> , <percentage> [ , <alpha-value> ]?\n  [transformHue, isComma, transformPercentage, isComma, transformPercentage, isComma, transformAlpha]]),\n      _transformArgsByParam7 = _slicedToArray(_transformArgsByParam6, 4),\n      hue = _transformArgsByParam7[0],\n      saturation = _transformArgsByParam7[1],\n      lightness = _transformArgsByParam7[2],\n      _transformArgsByParam8 = _transformArgsByParam7[3],\n      alpha = _transformArgsByParam8 === void 0 ? 100 : _transformArgsByParam8;\n\n  if (lightness !== undefined) {\n    var color = new Color({\n      hue,\n      saturation,\n      lightness,\n      alpha,\n      colorspace: 'hsl'\n    });\n    return color;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid hsl() function\");\n  }\n} // return a transformed hwb color function\n\n\nfunction transformHWBFunction(node, opts) {\n  var _transformArgsByParam9 = transformArgsByParams(node, [// <hue> <percentage> <percentage> [ / <alpha-value> ]?\n  [transformHue, transformPercentage, transformPercentage, isSlash, transformAlpha]]),\n      _transformArgsByParam10 = _slicedToArray(_transformArgsByParam9, 4),\n      hue = _transformArgsByParam10[0],\n      whiteness = _transformArgsByParam10[1],\n      blackness = _transformArgsByParam10[2],\n      _transformArgsByParam11 = _transformArgsByParam10[3],\n      alpha = _transformArgsByParam11 === void 0 ? 100 : _transformArgsByParam11;\n\n  if (blackness !== undefined) {\n    var color = new Color({\n      hue,\n      whiteness,\n      blackness,\n      alpha,\n      colorspace: 'hwb'\n    });\n    return color;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid hwb() function\");\n  }\n} // return a transformed color-mod color function\n\n\nfunction transformColorModFunction(node, opts) {\n  // [ <color> | <hue> ] <color-adjuster>*\n  var _ref = (node.nodes || []).slice(1, -1) || [],\n      _ref2 = _toArray(_ref),\n      colorOrHueNode = _ref2[0],\n      adjusterNodes = _ref2.slice(1);\n\n  if (colorOrHueNode !== undefined) {\n    var color = isHue(colorOrHueNode) ? new Color({\n      hue: transformHue(colorOrHueNode, opts),\n      saturation: 100,\n      lightness: 50,\n      alpha: 100,\n      colorspace: 'hsl'\n    }) : transformColor(colorOrHueNode, opts);\n\n    if (color) {\n      var adjustedColor = transformColorByAdjusters(color, adjusterNodes, opts);\n      return adjustedColor;\n    } else {\n      return manageUnresolved(node, opts, node.value, \"Expected a valid color\");\n    }\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid color-mod() function\");\n  }\n} // return a transformed hex color\n\n\nfunction transformHexColor(node, opts) {\n  if (hexColorMatch$1.test(node.value)) {\n    // #<hex-color>{3,4,6,8}\n    var _convertHtoRGB = convertHtoRGB(node.value),\n        _convertHtoRGB2 = _slicedToArray(_convertHtoRGB, 4),\n        red = _convertHtoRGB2[0],\n        green = _convertHtoRGB2[1],\n        blue = _convertHtoRGB2[2],\n        alpha = _convertHtoRGB2[3];\n\n    var color = new Color({\n      red,\n      green,\n      blue,\n      alpha\n    });\n    return color;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid hex color\");\n  }\n} // return a transformed named-color\n\n\nfunction transformNamedColor(node, opts) {\n  if (isNamedColor(node)) {\n    // <named-color>\n    var _convertNtoRGB = convertNtoRGB(node.value),\n        _convertNtoRGB2 = _slicedToArray(_convertNtoRGB, 3),\n        red = _convertNtoRGB2[0],\n        green = _convertNtoRGB2[1],\n        blue = _convertNtoRGB2[2];\n\n    var color = new Color({\n      red,\n      green,\n      blue,\n      alpha: 100,\n      colorspace: 'rgb'\n    });\n    return color;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid named-color\");\n  }\n}\n/* Transform <color-adjuster> functions\n/* ========================================================================== */\n// return a transformed color using adjustments\n\n\nfunction transformColorByAdjusters(color, adjusterNodes, opts) {\n  var adjustedColor = adjusterNodes.reduce(function (base, node) {\n    if (isAlphaBlueGreenRedAdjuster(node)) {\n      return transformAlphaBlueGreenRedAdjuster(base, node, opts);\n    } else if (isRGBAdjuster(node)) {\n      return transformRGBAdjuster(base, node, opts);\n    } else if (isHueAdjuster(node)) {\n      return transformHueAdjuster(base, node, opts);\n    } else if (isBlacknessLightnessSaturationWhitenessAdjuster(node)) {\n      return transformBlacknessLightnessSaturationWhitenessAdjuster(base, node, opts);\n    } else if (isShadeTintAdjuster(node)) {\n      return transformShadeTintAdjuster(base, node, opts);\n    } else if (isBlendAdjuster(node)) {\n      return transformBlendAdjuster(base, node, node.value === 'blenda', opts);\n    } else if (isContrastAdjuster(node)) {\n      return transformContrastAdjuster(base, node, opts);\n    } else {\n      manageUnresolved(node, opts, node.value, \"Expected a valid color adjuster\");\n      return base;\n    }\n  }, color);\n  return adjustedColor;\n} // return a transformed color using a/alpha/blue/green/red adjustments\n\n\nfunction transformAlphaBlueGreenRedAdjuster(base, node, opts) {\n  var _transformArgsByParam12 = transformArgsByParams(node, alphaMatch.test(node.value) // a/alpha adjustments\n  ? [// [ + | - ] <alpha-value>\n  [transformMinusPlusOperator, transformAlpha], // * <percentage>\n  [transformTimesOperator, transformPercentage], // <alpha-value>\n  [transformAlpha]] // blue/green/red adjustments\n  : [// [ + | - ] <percentage>\n  [transformMinusPlusOperator, transformPercentage], // [ + | - ] <number>\n  [transformMinusPlusOperator, transformRGBNumber], // * <percentage>\n  [transformTimesOperator, transformPercentage], // <percentage>\n  [transformPercentage], // <number>\n  [transformRGBNumber]]),\n      _transformArgsByParam13 = _slicedToArray(_transformArgsByParam12, 2),\n      operatorOrValue = _transformArgsByParam13[0],\n      adjustment = _transformArgsByParam13[1];\n\n  if (operatorOrValue !== undefined) {\n    // normalized channel name\n    var channel = node.value.toLowerCase().replace(alphaMatch, 'alpha');\n    var existingValue = base[channel]();\n    var modifiedValue = adjustment !== undefined ? operatorOrValue === '+' ? existingValue + Number(adjustment) : operatorOrValue === '-' ? existingValue - Number(adjustment) : operatorOrValue === '*' ? existingValue * Number(adjustment) : Number(adjustment) : Number(operatorOrValue);\n    var modifiedColor = base[channel](modifiedValue);\n    return modifiedColor;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid modifier()\");\n  }\n} // return a transformed color using an rgb adjustment\n\n\nfunction transformRGBAdjuster(base, node, opts) {\n  var _transformArgsByParam14 = transformArgsByParams(node, [// [ + | - ] <percentage> <percentage> <percentage>\n  [transformMinusPlusOperator, transformPercentage, transformPercentage, transformPercentage], // [ + | - ] <number> <number> <number>\n  [transformMinusPlusOperator, transformRGBNumber, transformRGBNumber, transformRGBNumber], // [ + | - ] <hash-token>\n  [transformMinusPlusOperator, transformHexColor], // [ * ] <percentage>\n  [transformTimesOperator, transformPercentage]]),\n      _transformArgsByParam15 = _slicedToArray(_transformArgsByParam14, 4),\n      arg1 = _transformArgsByParam15[0],\n      arg2 = _transformArgsByParam15[1],\n      arg3 = _transformArgsByParam15[2],\n      arg4 = _transformArgsByParam15[3];\n\n  if (arg2 !== undefined && arg2.color) {\n    var modifiedColor = base.rgb(arg1 === '+' ? base.red() + arg2.red() : base.red() - arg2.red(), arg1 === '+' ? base.green() + arg2.green() : base.green() - arg2.green(), arg1 === '+' ? base.blue() + arg2.blue() : base.blue() - arg2.blue());\n    return modifiedColor;\n  } else if (arg1 !== undefined && minusPlusMatch.test(arg1)) {\n    var _modifiedColor = base.rgb(arg1 === '+' ? base.red() + arg2 : base.red() - arg2, arg1 === '+' ? base.green() + arg3 : base.green() - arg3, arg1 === '+' ? base.blue() + arg4 : base.blue() - arg4);\n\n    return _modifiedColor;\n  } else if (arg1 !== undefined && arg2 !== undefined) {\n    var _modifiedColor2 = base.rgb(base.red() * arg2, base.green() * arg2, base.blue() * arg2);\n\n    return _modifiedColor2;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid rgb() adjuster\");\n  }\n} // return a transformed color using a blend/blenda adjustment\n\n\nfunction transformBlendAdjuster(base, node, isAlphaBlend, opts) {\n  var _transformArgsByParam16 = transformArgsByParams(node, [[transformColor, transformPercentage, transformColorSpace]]),\n      _transformArgsByParam17 = _slicedToArray(_transformArgsByParam16, 3),\n      color = _transformArgsByParam17[0],\n      percentage = _transformArgsByParam17[1],\n      _transformArgsByParam18 = _transformArgsByParam17[2],\n      colorspace = _transformArgsByParam18 === void 0 ? 'rgb' : _transformArgsByParam18;\n\n  if (percentage !== undefined) {\n    var modifiedColor = isAlphaBlend ? base.blenda(color.color, percentage, colorspace) : base.blend(color.color, percentage, colorspace);\n    return modifiedColor;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid blend() adjuster)\");\n  }\n} // return a transformed color using a contrast adjustment\n\n\nfunction transformContrastAdjuster(base, node, opts) {\n  var _transformArgsByParam19 = transformArgsByParams(node, [// <percentage>\n  [transformPercentage]]),\n      _transformArgsByParam20 = _slicedToArray(_transformArgsByParam19, 1),\n      percentage = _transformArgsByParam20[0];\n\n  if (percentage !== undefined) {\n    var modifiedColor = base.contrast(percentage);\n    return modifiedColor;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid contrast() adjuster)\");\n  }\n} // return a transformed color using a hue adjustment\n\n\nfunction transformHueAdjuster(base, node, opts) {\n  var _transformArgsByParam21 = transformArgsByParams(node, [// [ + | - | * ] <angle>\n  [transformMinusPlusTimesOperator, transformHue], // <angle>\n  [transformHue]]),\n      _transformArgsByParam22 = _slicedToArray(_transformArgsByParam21, 2),\n      operatorOrHue = _transformArgsByParam22[0],\n      adjustment = _transformArgsByParam22[1];\n\n  if (operatorOrHue !== undefined) {\n    var existingHue = base.hue();\n    var modifiedValue = adjustment !== undefined ? operatorOrHue === '+' ? existingHue + Number(adjustment) : operatorOrHue === '-' ? existingHue - Number(adjustment) : operatorOrHue === '*' ? existingHue * Number(adjustment) : Number(adjustment) : Number(operatorOrHue);\n    return base.hue(modifiedValue);\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid hue() function)\");\n  }\n} // [ b | blackness | l | lightness | s | saturation | w | whiteness ]( [ + | - | * ]? <percentage> )\n\n\nfunction transformBlacknessLightnessSaturationWhitenessAdjuster(base, node, opts) {\n  var channel = node.value.toLowerCase().replace(/^b$/, 'blackness').replace(/^l$/, 'lightness').replace(/^s$/, 'saturation').replace(/^w$/, 'whiteness');\n\n  var _transformArgsByParam23 = transformArgsByParams(node, [[transformMinusPlusTimesOperator, transformPercentage], [transformPercentage]]),\n      _transformArgsByParam24 = _slicedToArray(_transformArgsByParam23, 2),\n      operatorOrValue = _transformArgsByParam24[0],\n      adjustment = _transformArgsByParam24[1];\n\n  if (operatorOrValue !== undefined) {\n    var existingValue = base[channel]();\n    var modifiedValue = adjustment !== undefined ? operatorOrValue === '+' ? existingValue + Number(adjustment) : operatorOrValue === '-' ? existingValue - Number(adjustment) : operatorOrValue === '*' ? existingValue * Number(adjustment) : Number(adjustment) : Number(operatorOrValue);\n    return base[channel](modifiedValue);\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid \".concat(channel, \"() function)\"));\n  }\n} // return a transformed color using shade/tint adjustments\n\n\nfunction transformShadeTintAdjuster(base, node, opts) {\n  var channel = node.value.toLowerCase();\n\n  var _transformArgsByParam25 = transformArgsByParams(node, [// [ shade | tint ]( <percentage> )\n  [transformPercentage]]),\n      _transformArgsByParam26 = _slicedToArray(_transformArgsByParam25, 1),\n      percentage = _transformArgsByParam26[0];\n\n  if (percentage !== undefined) {\n    var modifiedValue = Number(percentage);\n    return base[channel](modifiedValue);\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected valid \".concat(channel, \"() arguments\"));\n  }\n}\n/* Argument Transforms\n/* ========================================================================== */\n// return a transformed color space\n\n\nfunction transformColorSpace(node, opts) {\n  if (isColorSpace(node)) {\n    // [ hsl | hwb | rgb ]\n    return node.value;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid color space)\");\n  }\n} // return a transformed alpha value\n\n\nfunction transformAlpha(node, opts) {\n  if (isNumber(node)) {\n    // <number>\n    return node.value * 100;\n  } else if (isPercentage(node)) {\n    // <percentage>\n    return transformPercentage(node, opts);\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid alpha value)\");\n  }\n} // return a transformed rgb number\n\n\nfunction transformRGBNumber(node, opts) {\n  if (isNumber(node)) {\n    // <number>\n    return node.value / 2.55;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid RGB value)\");\n  }\n} // return a transformed hue\n\n\nfunction transformHue(node, opts) {\n  if (isHue(node)) {\n    // <hue> = <number> | <angle>\n    var unit = node.unit.toLowerCase();\n\n    if (unit === 'grad') {\n      // if <angle> = <gradian> (400 per circle)\n      return convertGtoD(node.value);\n    } else if (unit === 'rad') {\n      // if <angle> = <radian> (2π per circle)\n      return convertRtoD(node.value);\n    } else if (unit === 'turn') {\n      // if <angle> = <turn> (1 per circle)\n      return convertTtoD(node.value);\n    } else {\n      // if <angle> = [ <degree> | <number> ] (360 per circle)\n      return convertDtoD(node.value);\n    }\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid hue\");\n  }\n} // return a transformed percentage\n\n\nfunction transformPercentage(node, opts) {\n  if (isPercentage(node)) {\n    // <percentage>\n    return Number(node.value);\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid hue\");\n  }\n} // return a transformed minus-plus operator\n\n\nfunction transformMinusPlusOperator(node, opts) {\n  if (isMinusPlusOperator(node)) {\n    // [ - | + ]\n    return node.value;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a plus or minus operator\");\n  }\n} // return a transformed times operator\n\n\nfunction transformTimesOperator(node, opts) {\n  if (isTimesOperator(node)) {\n    // [ * ]\n    return node.value;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a times operator\");\n  }\n} // return a transformed minus-plus-times operator\n\n\nfunction transformMinusPlusTimesOperator(node, opts) {\n  if (isMinusPlusTimesOperator(node)) {\n    // [ - | + | * ]\n    return node.value;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a plus, minus, or times operator\");\n  }\n}\n/* Additional transforms\n/* ========================================================================== */\n\n\nfunction transformWord(node, opts) {\n  if (isWord(node)) {\n    return node.value;\n  } else {\n    return manageUnresolved(node, opts, node.value, \"Expected a valid word\");\n  }\n}\n\nfunction transformNode(node) {\n  return Object(node);\n}\n/* Transform helper\n/* ========================================================================== */\n// return the first set of transformed arguments allowable by the parameters\n\n\nfunction transformArgsByParams(node, params) {\n  var nodes = (node.nodes || []).slice(1, -1);\n  var opts = {\n    unresolved: 'ignore'\n  };\n  return params.map(function (param) {\n    return nodes.map(function (childNode, index) {\n      return typeof param[index] === 'function' ? param[index](childNode, opts) : undefined;\n    }).filter(function (child) {\n      return typeof child !== 'boolean';\n    });\n  }).filter(function (param) {\n    return param.every(function (result) {\n      return result !== undefined;\n    });\n  })[0] || [];\n}\n/* Walk helper (required because the default walker is affected by mutations)\n/* ========================================================================== */\n// run a function over each node and hen walk each child node of that node\n\n\nfunction walk(node, fn) {\n  fn(node);\n\n  if (Object(node.nodes).length) {\n    node.nodes.slice().forEach(function (childNode) {\n      walk(childNode, fn);\n    });\n  }\n}\n/* Variable validators\n/* ========================================================================== */\n// return whether the node is a var function\n\n\nfunction isVariable(node) {\n  // var()\n  return Object(node).type === 'func' && varMatch.test(node.value);\n}\n/* Adjustment validators\n/* ========================================================================== */\n// return whether the node is an a/alpha/blue/green/red adjuster\n\n\nfunction isAlphaBlueGreenRedAdjuster(node) {\n  // [ a(), alpha(), blue(), green(), red() ]\n  return Object(node).type === 'func' && alphaBlueGreenRedMatch.test(node.value);\n} // return whether the node is an rgb adjuster\n\n\nfunction isRGBAdjuster(node) {\n  return Object(node).type === 'func' && rgbMatch.test(node.value);\n} // return whether the node is a hue adjuster\n\n\nfunction isHueAdjuster(node) {\n  // [ h() | hue() ]\n  return Object(node).type === 'func' && hueMatch.test(node.value);\n} // return whether the node is a blackness/lightness/saturation/whiteness adjuster\n\n\nfunction isBlacknessLightnessSaturationWhitenessAdjuster(node) {\n  // [ b() | blackness() | l() | lightness() | s() | saturation() | w() | whiteness() ]\n  return Object(node).type === 'func' && blacknessLightnessSaturationWhitenessMatch.test(node.value);\n} // return whether the node is a shade/tint adjuster\n\n\nfunction isShadeTintAdjuster(node) {\n  // [ shade() | tint() ]\n  return Object(node).type === 'func' && shadeTintMatch.test(node.value);\n} // return whether the node is a blend adjuster\n\n\nfunction isBlendAdjuster(node) {\n  // [ blend(), blenda() ]\n  return Object(node).type === 'func' && blendMatch.test(node.value);\n} // return whether the node is a contrast adjuster\n\n\nfunction isContrastAdjuster(node) {\n  // [ contrast() ]\n  return Object(node).type === 'func' && contrastMatch.test(node.value);\n}\n/* Color validators\n/* ========================================================================== */\n// return whether the node is an rgb/rgba color function\n\n\nfunction isRGBFunction(node) {\n  // [ rgb(), rgba() ]\n  return Object(node).type === 'func' && rgbaMatch.test(node.value);\n} // return whether the node is an hsl color function\n\n\nfunction isHSLFunction(node) {\n  // [ hsl(), hsla() ]\n  return Object(node).type === 'func' && hslaMatch.test(node.value);\n} // return whether the node is an hwb color function\n\n\nfunction isHWBFunction(node) {\n  // hwb()\n  return Object(node).type === 'func' && hwbMatch.test(node.value);\n} // return whether the node is a color-mod function\n\n\nfunction isColorModFunction(node) {\n  // color-mod()\n  return Object(node).type === 'func' && colorModMatch.test(node.value);\n} // return whether the node is a valid named-color\n\n\nfunction isNamedColor(node) {\n  return Object(node).type === 'word' && Boolean(convertNtoRGB(node.value));\n} // return whether the node is a valid hex color\n\n\nfunction isHexColor(node) {\n  // #<hex-color>{3,4,6,8}\n  return Object(node).type === 'word' && hexColorMatch$1.test(node.value);\n} // return whether the node is a valid color space\n\n\nfunction isColorSpace(node) {\n  // [ hsl | hwb | rgb ]\n  return Object(node).type === 'word' && colorSpaceMatch.test(node.value);\n}\n/* Additional validators\n/* ========================================================================== */\n// return whether the hue value is valid\n\n\nfunction isHue(node) {\n  return Object(node).type === 'number' && hueUnitMatch.test(node.unit);\n} // return whether the comma is valid\n\n\nfunction isComma(node) {\n  return Object(node).type === 'comma';\n} // return whether the slash operator is valid\n\n\nfunction isSlash(node) {\n  return Object(node).type === 'operator' && node.value === '/';\n} // return whether the number is valid\n\n\nfunction isNumber(node) {\n  return Object(node).type === 'number' && node.unit === '';\n} // return whether the mind-plus operator is valid\n\n\nfunction isMinusPlusOperator(node) {\n  return Object(node).type === 'operator' && minusPlusMatch.test(node.value);\n} // return whether the minus-plus-times operator is valid\n\n\nfunction isMinusPlusTimesOperator(node) {\n  return Object(node).type === 'operator' && minusPlusTimesMatch.test(node.value);\n} // return whether the times operator is valid\n\n\nfunction isTimesOperator(node) {\n  return Object(node).type === 'operator' && timesMatch.test(node.value);\n} // return whether the percentage is valid\n\n\nfunction isPercentage(node) {\n  return Object(node).type === 'number' && (node.unit === '%' || node.value === '0');\n} // return whether the node is a word\n\n\nfunction isWord(node) {\n  // <word>\n  return Object(node).type === 'word';\n}\n/* Matchers\n/* ========================================================================== */\n\n\nvar alphaMatch = /^a(lpha)?$/i;\nvar alphaBlueGreenRedMatch = /^(a(lpha)?|blue|green|red)$/i;\nvar blacknessLightnessSaturationWhitenessMatch = /^(b(lackness)?|l(ightness)?|s(aturation)?|w(hiteness)?)$/i;\nvar blendMatch = /^blenda?$/i;\nvar colorModMatch = /^color-mod$/i;\nvar colorSpaceMatch = /^(hsl|hwb|rgb)$/i;\nvar contrastMatch = /^contrast$/i;\nvar hexColorMatch$1 = /^#(?:([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?|([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?)$/i;\nvar hslaMatch = /^hsla?$/i;\nvar hueUnitMatch = /^(deg|grad|rad|turn)?$/i;\nvar hueMatch = /^h(ue)?$/i;\nvar hwbMatch = /^hwb$/i;\nvar minusPlusMatch = /^[+-]$/;\nvar minusPlusTimesMatch = /^[*+-]$/;\nvar rgbMatch = /^rgb$/i;\nvar rgbaMatch = /^rgba?$/i;\nvar shadeTintMatch = /^(shade|tint)$/i;\nvar varMatch = /^var$/i;\nvar looseVarMatch = /(^|[^\\w-])var\\(/i;\nvar timesMatch = /^[*]$/;\n\nvar index = _postcss.default.plugin('postcss-color-mod-function', function (opts) {\n  // how unresolved functions and arguments should be handled (default: \"throw\")\n  var unresolvedOpt = String(Object(opts).unresolved || 'throw').toLowerCase(); // how transformed colors will be produced in CSS\n\n  var stringifierOpt = Object(opts).stringifier || function (color) {\n    return color.toLegacy();\n  }; // sources to import custom selectors from\n\n\n  var importFrom = [].concat(Object(opts).importFrom || []); //  whether var() within color-mod() should use Custom Properties or var() fallback\n\n  var transformVarsOpt = 'transformVars' in Object(opts) ? opts.transformVars : true; // promise any custom selectors are imported\n\n  var customPropertiesPromise = importCustomPropertiesFromSources(importFrom);\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(root, result) {\n      var customProperties;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.t0 = Object;\n              _context6.next = 3;\n              return customPropertiesPromise;\n\n            case 3:\n              _context6.t1 = _context6.sent;\n              _context6.t2 = getCustomProperties(root, {\n                preserve: true\n              });\n              customProperties = _context6.t0.assign.call(_context6.t0, _context6.t1, _context6.t2);\n              root.walkDecls(function (decl) {\n                var originalValue = decl.value;\n\n                if (colorModFunctionMatch.test(originalValue)) {\n                  var ast = (0, _postcssValuesParser.default)(originalValue, {\n                    loose: true\n                  }).parse();\n                  transformAST(ast, {\n                    unresolved: unresolvedOpt,\n                    stringifier: stringifierOpt,\n                    transformVars: transformVarsOpt,\n                    decl,\n                    result,\n                    customProperties\n                  });\n                  var modifiedValue = ast.toString();\n\n                  if (originalValue !== modifiedValue) {\n                    decl.value = modifiedValue;\n                  }\n                }\n              });\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});\n\nvar colorModFunctionMatch = /(^|[^\\w-])color-mod\\(/i;\nvar _default = index;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"3cf1a9a08cbba2c8e74c5313162f667d","cacheData":{"env":{}}}