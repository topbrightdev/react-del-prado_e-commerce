{"id":"../node_modules/webpack/node_modules/@webassemblyjs/helper-wasm-section/esm/create.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-wasm-section/package.json","includedInParent":true,"mtime":1594578778149},{"name":"@webassemblyjs/wasm-gen","loc":{"line":3,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-wasm-section/esm/create.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/wasm-gen/esm/index.js"},{"name":"@webassemblyjs/helper-buffer","loc":{"line":4,"column":38},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-wasm-section/esm/create.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-buffer/esm/index.js"},{"name":"@webassemblyjs/helper-wasm-bytecode","loc":{"line":5,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-wasm-section/esm/create.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-wasm-bytecode/esm/index.js"},{"name":"@webassemblyjs/ast","loc":{"line":6,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-wasm-section/esm/create.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/ast/esm/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEmptySection = createEmptySection;\n\nvar _wasmGen = require(\"@webassemblyjs/wasm-gen\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nvar _helperWasmBytecode = _interopRequireDefault(require(\"@webassemblyjs/helper-wasm-bytecode\"));\n\nvar t = _interopRequireWildcard(require(\"@webassemblyjs/ast\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction findLastSection(ast, forSection) {\n  var targetSectionId = _helperWasmBytecode.default.sections[forSection]; // $FlowIgnore: metadata can not be empty\n\n  var moduleSections = ast.body[0].metadata.sections;\n  var lastSection;\n  var lastId = 0;\n\n  for (var i = 0, len = moduleSections.length; i < len; i++) {\n    var section = moduleSections[i]; // Ignore custom section since they can actually occur everywhere\n\n    if (section.section === \"custom\") {\n      continue;\n    }\n\n    var sectionId = _helperWasmBytecode.default.sections[section.section];\n\n    if (targetSectionId > lastId && targetSectionId < sectionId) {\n      return lastSection;\n    }\n\n    lastId = sectionId;\n    lastSection = section;\n  }\n\n  return lastSection;\n}\n\nfunction createEmptySection(ast, uint8Buffer, section) {\n  // previous section after which we are going to insert our section\n  var lastSection = findLastSection(ast, section);\n  var start, end;\n  /**\n   * It's the first section\n   */\n\n  if (lastSection == null || lastSection.section === \"custom\") {\n    start = 8\n    /* wasm header size */\n    ;\n    end = start;\n  } else {\n    start = lastSection.startOffset + lastSection.size.value + 1;\n    end = start;\n  } // section id\n\n\n  start += 1;\n  var sizeStartLoc = {\n    line: -1,\n    column: start\n  };\n  var sizeEndLoc = {\n    line: -1,\n    column: start + 1\n  }; // 1 byte for the empty vector\n\n  var size = t.withLoc(t.numberLiteralFromRaw(1), sizeEndLoc, sizeStartLoc);\n  var vectorOfSizeStartLoc = {\n    line: -1,\n    column: sizeEndLoc.column\n  };\n  var vectorOfSizeEndLoc = {\n    line: -1,\n    column: sizeEndLoc.column + 1\n  };\n  var vectorOfSize = t.withLoc(t.numberLiteralFromRaw(0), vectorOfSizeEndLoc, vectorOfSizeStartLoc);\n  var sectionMetadata = t.sectionMetadata(section, start, size, vectorOfSize);\n  var sectionBytes = (0, _wasmGen.encodeNode)(sectionMetadata);\n  uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start - 1, end, sectionBytes); // Add section into the AST for later lookups\n\n  if (_typeof(ast.body[0].metadata) === \"object\") {\n    // $FlowIgnore: metadata can not be empty\n    ast.body[0].metadata.sections.push(sectionMetadata);\n    t.sortSectionMetadata(ast.body[0]);\n  }\n  /**\n   * Update AST\n   */\n  // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var deltaBytes = +sectionBytes.length;\n  var encounteredSection = false;\n  t.traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        t.shiftSection(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return {\n    uint8Buffer: uint8Buffer,\n    sectionMetadata: sectionMetadata\n  };\n}"},"sourceMaps":null,"error":null,"hash":"ea6b44284bdc33ed05098786f8821283","cacheData":{"env":{}}}