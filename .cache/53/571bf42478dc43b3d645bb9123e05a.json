{"id":"../node_modules/webpack/node_modules/@webassemblyjs/helper-code-frame/esm/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-code-frame/package.json","includedInParent":true,"mtime":1594578778153},{"name":"@webassemblyjs/wast-printer","loc":{"line":3,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-code-frame/esm/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/wast-printer/esm/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codeFrameFromAst = codeFrameFromAst;\nexports.codeFrameFromSource = codeFrameFromSource;\n\nvar _wastPrinter = require(\"@webassemblyjs/wast-printer\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar SHOW_LINES_AROUND_POINTER = 5;\n\nfunction repeat(char, nb) {\n  return Array(nb).fill(char).join(\"\");\n} // TODO(sven): allow arbitrary ast nodes\n\n\nfunction codeFrameFromAst(ast, loc) {\n  return codeFrameFromSource((0, _wastPrinter.print)(ast), loc);\n}\n\nfunction codeFrameFromSource(source, loc) {\n  var start = loc.start,\n      end = loc.end;\n  var length = 1;\n\n  if (_typeof(end) === \"object\") {\n    length = end.column - start.column + 1;\n  }\n\n  return source.split(\"\\n\").reduce(function (acc, line, lineNbr) {\n    if (Math.abs(start.line - lineNbr) < SHOW_LINES_AROUND_POINTER) {\n      acc += line + \"\\n\";\n    } // Add a new line with the pointer padded left\n\n\n    if (lineNbr === start.line - 1) {\n      acc += repeat(\" \", start.column - 1);\n      acc += repeat(\"^\", length);\n      acc += \"\\n\";\n    }\n\n    return acc;\n  }, \"\");\n}"},"sourceMaps":null,"error":null,"hash":"657c21dd919f595bfde675c4d0b8b135","cacheData":{"env":{}}}