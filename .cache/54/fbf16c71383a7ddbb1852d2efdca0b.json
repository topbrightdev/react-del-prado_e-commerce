{"id":"../node_modules/connect-history-api-fallback/lib/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/connect-history-api-fallback/package.json","includedInParent":true,"mtime":1594570879522},{"name":"url","loc":{"line":3,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/connect-history-api-fallback/lib/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/url/url.js"}],"generated":{"js":"'use strict';\n\nvar url = require('url');\n\nexports = module.exports = function historyApiFallback(options) {\n  options = options || {};\n  var logger = getLogger(options);\n  return function (req, res, next) {\n    var headers = req.headers;\n\n    if (req.method !== 'GET') {\n      logger('Not rewriting', req.method, req.url, 'because the method is not GET.');\n      return next();\n    } else if (!headers || typeof headers.accept !== 'string') {\n      logger('Not rewriting', req.method, req.url, 'because the client did not send an HTTP accept header.');\n      return next();\n    } else if (headers.accept.indexOf('application/json') === 0) {\n      logger('Not rewriting', req.method, req.url, 'because the client prefers JSON.');\n      return next();\n    } else if (!acceptsHtml(headers.accept, options)) {\n      logger('Not rewriting', req.method, req.url, 'because the client does not accept HTML.');\n      return next();\n    }\n\n    var parsedUrl = url.parse(req.url);\n    var rewriteTarget;\n    options.rewrites = options.rewrites || [];\n\n    for (var i = 0; i < options.rewrites.length; i++) {\n      var rewrite = options.rewrites[i];\n      var match = parsedUrl.pathname.match(rewrite.from);\n\n      if (match !== null) {\n        rewriteTarget = evaluateRewriteRule(parsedUrl, match, rewrite.to, req);\n        logger('Rewriting', req.method, req.url, 'to', rewriteTarget);\n        req.url = rewriteTarget;\n        return next();\n      }\n    }\n\n    var pathname = parsedUrl.pathname;\n\n    if (pathname.lastIndexOf('.') > pathname.lastIndexOf('/') && options.disableDotRule !== true) {\n      logger('Not rewriting', req.method, req.url, 'because the path includes a dot (.) character.');\n      return next();\n    }\n\n    rewriteTarget = options.index || '/index.html';\n    logger('Rewriting', req.method, req.url, 'to', rewriteTarget);\n    req.url = rewriteTarget;\n    next();\n  };\n};\n\nfunction evaluateRewriteRule(parsedUrl, match, rule, req) {\n  if (typeof rule === 'string') {\n    return rule;\n  } else if (typeof rule !== 'function') {\n    throw new Error('Rewrite rule can only be of type string of function.');\n  }\n\n  return rule({\n    parsedUrl: parsedUrl,\n    match: match,\n    request: req\n  });\n}\n\nfunction acceptsHtml(header, options) {\n  options.htmlAcceptHeaders = options.htmlAcceptHeaders || ['text/html', '*/*'];\n\n  for (var i = 0; i < options.htmlAcceptHeaders.length; i++) {\n    if (header.indexOf(options.htmlAcceptHeaders[i]) !== -1) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getLogger(options) {\n  if (options && options.logger) {\n    return options.logger;\n  } else if (options && options.verbose) {\n    return console.log.bind(console);\n  }\n\n  return function () {};\n}"},"sourceMaps":null,"error":null,"hash":"514b132bfc2100a099e1ac4949ca1ebd","cacheData":{"env":{}}}