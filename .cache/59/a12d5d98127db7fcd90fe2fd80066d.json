{"id":"../node_modules/sockjs/lib/trans-websocket.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/package.json","includedInParent":true,"mtime":1594306881442},{"name":"faye-websocket","loc":{"line":7,"column":26},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/trans-websocket.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/node_modules/faye-websocket/lib/faye/websocket.js"},{"name":"./utils","loc":{"line":9,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/trans-websocket.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/utils.js"},{"name":"./transport","loc":{"line":11,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/trans-websocket.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/transport.js"}],"generated":{"js":"// Generated by CoffeeScript 1.12.7\n(function() {\n  var FayeWebsocket, RawWebsocketSessionReceiver, Transport, WebSocketReceiver, transport, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  FayeWebsocket = require('faye-websocket');\n\n  utils = require('./utils');\n\n  transport = require('./transport');\n\n  exports.app = {\n    _websocket_check: function(req, connection, head) {\n      if (!FayeWebsocket.isWebSocket(req)) {\n        throw {\n          status: 400,\n          message: 'Not a valid websocket request'\n        };\n      }\n    },\n    sockjs_websocket: function(req, connection, head) {\n      var ws;\n      this._websocket_check(req, connection, head);\n      ws = new FayeWebsocket(req, connection, head, null, this.options.faye_server_options);\n      ws.onopen = (function(_this) {\n        return function() {\n          return transport.registerNoSession(req, _this, new WebSocketReceiver(ws, connection));\n        };\n      })(this);\n      return true;\n    },\n    raw_websocket: function(req, connection, head) {\n      var ver, ws;\n      this._websocket_check(req, connection, head);\n      ver = req.headers['sec-websocket-version'] || '';\n      if (['8', '13'].indexOf(ver) === -1) {\n        throw {\n          status: 400,\n          message: 'Only supported WebSocket protocol is RFC 6455.'\n        };\n      }\n      ws = new FayeWebsocket(req, connection, head, null, this.options.faye_server_options);\n      ws.onopen = (function(_this) {\n        return function() {\n          return new RawWebsocketSessionReceiver(req, connection, _this, ws);\n        };\n      })(this);\n      return true;\n    }\n  };\n\n  WebSocketReceiver = (function(superClass) {\n    extend(WebSocketReceiver, superClass);\n\n    WebSocketReceiver.prototype.protocol = \"websocket\";\n\n    function WebSocketReceiver(ws1, connection1) {\n      var x;\n      this.ws = ws1;\n      this.connection = connection1;\n      try {\n        this.connection.setKeepAlive(true, 5000);\n        this.connection.setNoDelay(true);\n      } catch (error) {\n        x = error;\n      }\n      this.ws.addEventListener('message', (function(_this) {\n        return function(m) {\n          return _this.didMessage(m.data);\n        };\n      })(this));\n      this.heartbeat_cb = (function(_this) {\n        return function() {\n          return _this.heartbeat_timeout();\n        };\n      })(this);\n      WebSocketReceiver.__super__.constructor.call(this, this.connection);\n    }\n\n    WebSocketReceiver.prototype.setUp = function() {\n      WebSocketReceiver.__super__.setUp.apply(this, arguments);\n      return this.ws.addEventListener('close', this.thingy_end_cb);\n    };\n\n    WebSocketReceiver.prototype.tearDown = function() {\n      this.ws.removeEventListener('close', this.thingy_end_cb);\n      return WebSocketReceiver.__super__.tearDown.apply(this, arguments);\n    };\n\n    WebSocketReceiver.prototype.didMessage = function(payload) {\n      var i, len, message, msg, results, x;\n      if (this.ws && this.session && payload.length > 0) {\n        try {\n          message = JSON.parse(payload);\n        } catch (error) {\n          x = error;\n          return this.didClose(3000, 'Broken framing.');\n        }\n        if (payload[0] === '[') {\n          results = [];\n          for (i = 0, len = message.length; i < len; i++) {\n            msg = message[i];\n            results.push(this.session.didMessage(msg));\n          }\n          return results;\n        } else {\n          return this.session.didMessage(message);\n        }\n      }\n    };\n\n    WebSocketReceiver.prototype.doSendFrame = function(payload) {\n      var x;\n      if (this.ws) {\n        try {\n          this.ws.send(payload);\n          return true;\n        } catch (error) {\n          x = error;\n        }\n      }\n      return false;\n    };\n\n    WebSocketReceiver.prototype.didClose = function(status, reason) {\n      var x;\n      if (status == null) {\n        status = 1000;\n      }\n      if (reason == null) {\n        reason = \"Normal closure\";\n      }\n      WebSocketReceiver.__super__.didClose.apply(this, arguments);\n      try {\n        this.ws.close(status, reason, false);\n      } catch (error) {\n        x = error;\n      }\n      this.ws = null;\n      return this.connection = null;\n    };\n\n    WebSocketReceiver.prototype.heartbeat = function() {\n      var hto_ref, supportsHeartbeats;\n      supportsHeartbeats = this.ws.ping(null, function() {\n        return clearTimeout(hto_ref);\n      });\n      if (supportsHeartbeats) {\n        return hto_ref = setTimeout(this.heartbeat_cb, 10000);\n      } else {\n        return WebSocketReceiver.__super__.heartbeat.apply(this, arguments);\n      }\n    };\n\n    WebSocketReceiver.prototype.heartbeat_timeout = function() {\n      if (this.session != null) {\n        return this.session.close(3000, 'No response from heartbeat');\n      }\n    };\n\n    return WebSocketReceiver;\n\n  })(transport.GenericReceiver);\n\n  Transport = transport.Transport;\n\n  RawWebsocketSessionReceiver = (function(superClass) {\n    extend(RawWebsocketSessionReceiver, superClass);\n\n    function RawWebsocketSessionReceiver(req, conn, server, ws1) {\n      this.ws = ws1;\n      this.prefix = server.options.prefix;\n      this.readyState = Transport.OPEN;\n      this.recv = {\n        connection: conn,\n        protocol: \"websocket-raw\"\n      };\n      this.connection = new transport.SockJSConnection(this);\n      this.decorateConnection(req);\n      server.emit('connection', this.connection);\n      this._end_cb = (function(_this) {\n        return function() {\n          return _this.didClose();\n        };\n      })(this);\n      this.ws.addEventListener('close', this._end_cb);\n      this._message_cb = (function(_this) {\n        return function(m) {\n          return _this.didMessage(m);\n        };\n      })(this);\n      this.ws.addEventListener('message', this._message_cb);\n    }\n\n    RawWebsocketSessionReceiver.prototype.didMessage = function(m) {\n      if (this.readyState === Transport.OPEN) {\n        this.connection.emit('data', m.data);\n      }\n    };\n\n    RawWebsocketSessionReceiver.prototype.send = function(payload) {\n      if (this.readyState !== Transport.OPEN) {\n        return false;\n      }\n      this.ws.send(payload);\n      return true;\n    };\n\n    RawWebsocketSessionReceiver.prototype.close = function(status, reason) {\n      if (status == null) {\n        status = 1000;\n      }\n      if (reason == null) {\n        reason = \"Normal closure\";\n      }\n      if (this.readyState !== Transport.OPEN) {\n        return false;\n      }\n      this.readyState = Transport.CLOSING;\n      this.ws.close(status, reason, false);\n      return true;\n    };\n\n    RawWebsocketSessionReceiver.prototype.didClose = function() {\n      var x;\n      if (!this.ws) {\n        return;\n      }\n      this.ws.removeEventListener('message', this._message_cb);\n      this.ws.removeEventListener('close', this._end_cb);\n      try {\n        this.ws.close(1000, \"Normal closure\", false);\n      } catch (error) {\n        x = error;\n      }\n      this.ws = null;\n      this.readyState = Transport.CLOSED;\n      this.connection.emit('end');\n      this.connection.emit('close');\n      return this.connection = null;\n    };\n\n    return RawWebsocketSessionReceiver;\n\n  })(transport.Session);\n\n}).call(this);\n"},"sourceMaps":null,"error":null,"hash":"13f1bd14fff23f52842adf347a190400","cacheData":{"env":{}}}