{"id":"../node_modules/webpack-log/src/loglevel/MethodFactory.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/package.json","includedInParent":true,"mtime":1594306881666}],"generated":{"js":"'use strict';\n/* eslint-disable\n  arrow-parens,\n  multiline-ternary,\n  consistent-return,\n  no-param-reassign,\n  prefer-destructuring\n*/\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar noop = function () {};\n\nvar levels = Symbol('levels');\nvar instance = Symbol('instance');\n\nvar MethodFactory = /*#__PURE__*/function () {\n  function MethodFactory(logger) {\n    _classCallCheck(this, MethodFactory);\n\n    this[levels] = {\n      TRACE: 0,\n      DEBUG: 1,\n      INFO: 2,\n      WARN: 3,\n      ERROR: 4,\n      SILENT: 5\n    };\n    this[instance] = logger;\n  }\n\n  _createClass(MethodFactory, [{\n    key: \"distillLevel\",\n    value: function distillLevel(level) {\n      var result = level;\n\n      if (typeof result === 'string' && typeof this.levels[result.toUpperCase()] !== 'undefined') {\n        result = this.levels[result.toUpperCase()];\n      }\n\n      if (this.levelValid(result)) {\n        return result;\n      }\n    }\n  }, {\n    key: \"levelValid\",\n    value: function levelValid(level) {\n      if (typeof level === 'number' && level >= 0 && level <= this.levels.SILENT) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Build the best logging method possible for this env\n     * Wherever possible we want to bind, not wrap, to preserve stack traces.\n     * Since we're targeting modern browsers, there's no need to wait for the\n     * console to become available.\n     */\n    // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"make\",\n    value: function make(method) {\n      if (method === 'debug') {\n        method = 'log';\n      }\n      /* eslint-disable no-console */\n\n\n      if (typeof console[method] !== 'undefined') {\n        return this.bindMethod(console, method);\n      } else if (typeof console.log !== 'undefined') {\n        return this.bindMethod(console, 'log');\n      }\n      /* eslint-enable no-console */\n\n\n      return noop;\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"bindMethod\",\n    value: function bindMethod(obj, name) {\n      var method = obj[name];\n\n      if (typeof method.bind === 'function') {\n        return method.bind(obj);\n      }\n\n      try {\n        return Function.prototype.bind.call(method, obj);\n      } catch (err) {\n        // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n        return function result() {\n          // eslint-disable-next-line prefer-rest-params\n          return Function.prototype.apply.apply(method, [obj, arguments]);\n        };\n      }\n    }\n  }, {\n    key: \"replaceMethods\",\n    value: function replaceMethods(logLevel) {\n      var _this = this;\n\n      var level = this.distillLevel(logLevel);\n\n      if (level == null) {\n        throw new Error(\"loglevel: replaceMethods() called with invalid level: \".concat(logLevel));\n      }\n\n      if (!this.logger || this.logger.type !== 'LogLevel') {\n        throw new TypeError('loglevel: Logger is undefined or invalid. Please specify a valid Logger instance.');\n      }\n\n      this.methods.forEach(function (method) {\n        _this.logger[method] = _this.levels[method.toUpperCase()] < level ? noop : _this.make(method);\n      }); // Define log.log as an alias for log.debug\n\n      this.logger.log = this.logger.debug;\n    }\n  }, {\n    key: \"logger\",\n    set: function (logger) {\n      this[instance] = logger;\n    },\n    get: function () {\n      return this[instance];\n    }\n  }, {\n    key: \"levels\",\n    get: function () {\n      return this[levels];\n    }\n  }, {\n    key: \"methods\",\n    get: function () {\n      return Object.keys(this.levels).map(function (key) {\n        return key.toLowerCase();\n      }).filter(function (key) {\n        return key !== 'silent';\n      });\n    }\n  }]);\n\n  return MethodFactory;\n}();\n\nmodule.exports = MethodFactory;"},"sourceMaps":null,"error":null,"hash":"8da1df550c09c1347987cd5ee49a6d28","cacheData":{"env":{}}}