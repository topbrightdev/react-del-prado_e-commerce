{"id":"../node_modules/spdy-transport/lib/spdy-transport/protocol/base/parser.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/package.json","includedInParent":true,"mtime":1594570878662},{"name":"../../../spdy-transport","loc":{"line":3,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/base/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport.js"},{"name":"util","loc":{"line":5,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/base/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"./","loc":{"line":6,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/base/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/base/index.js"},{"name":"obuf","loc":{"line":7,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/base/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/obuf/index.js"},{"name":"readable-stream","loc":{"line":8,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/base/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/readable-stream/readable-browser.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/base/parser.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict'\n\nvar transport = require('../../../spdy-transport')\n\nvar util = require('util')\nvar utils = require('./').utils\nvar OffsetBuffer = require('obuf')\nvar Transform = require('readable-stream').Transform\n\nfunction Parser (options) {\n  Transform.call(this, {\n    readableObjectMode: true\n  })\n\n  this.buffer = new OffsetBuffer()\n  this.partial = false\n  this.waiting = 0\n\n  this.window = options.window\n\n  this.version = null\n  this.decompress = null\n  this.dead = false\n}\nmodule.exports = Parser\nutil.inherits(Parser, Transform)\n\nParser.prototype.error = utils.error\n\nParser.prototype.kill = function kill () {\n  this.dead = true\n}\n\nParser.prototype._transform = function transform (data, encoding, cb) {\n  if (!this.dead) { this.buffer.push(data) }\n\n  this._consume(cb)\n}\n\nParser.prototype._consume = function _consume (cb) {\n  var self = this\n\n  function next (err, frame) {\n    if (err) {\n      return cb(err)\n    }\n\n    if (Array.isArray(frame)) {\n      for (var i = 0; i < frame.length; i++) {\n        self.push(frame[i])\n      }\n    } else if (frame) {\n      self.push(frame)\n    }\n\n    // Consume more packets\n    if (!sync) {\n      return self._consume(cb)\n    }\n\n    process.nextTick(function () {\n      self._consume(cb)\n    })\n  }\n\n  if (this.dead) {\n    return cb()\n  }\n\n  if (this.buffer.size < this.waiting) {\n    // No data at all\n    if (this.buffer.size === 0) {\n      return cb()\n    }\n\n    // Partial DATA frame or something that we can process partially\n    if (this.partial) {\n      var partial = this.buffer.clone(this.buffer.size)\n      this.buffer.skip(partial.size)\n      this.waiting -= partial.size\n\n      this.executePartial(partial, next)\n      return\n    }\n\n    // We shall not do anything until we get all expected data\n    return cb()\n  }\n\n  var sync = true\n\n  var content = this.buffer.clone(this.waiting)\n  this.buffer.skip(this.waiting)\n\n  this.execute(content, next)\n  sync = false\n}\n\nParser.prototype.setVersion = function setVersion (version) {\n  this.version = version\n  this.emit('version', version)\n}\n\nParser.prototype.setCompression = function setCompresion (pair) {\n  this.decompress = new transport.utils.LockStream(pair.decompress)\n}\n"},"sourceMaps":null,"error":null,"hash":"df7a08574d2abd4e4da099d6c0c5e103","cacheData":{"env":{}}}