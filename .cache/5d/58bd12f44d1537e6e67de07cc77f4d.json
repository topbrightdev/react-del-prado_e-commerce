{"id":"../node_modules/react-dev-utils/node_modules/p-limit/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/node_modules/p-limit/package.json","includedInParent":true,"mtime":1594570878970},{"name":"p-try","loc":{"line":2,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/node_modules/p-limit/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/react-dev-utils/node_modules/p-try/index.js"}],"generated":{"js":"'use strict';\n\nvar pTry = require('p-try');\n\nmodule.exports = function (concurrency) {\n  if (concurrency < 1) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n\n  var queue = [];\n  var activeCount = 0;\n\n  var next = function () {\n    activeCount--;\n\n    if (queue.length > 0) {\n      queue.shift()();\n    }\n  };\n\n  var run = function (fn, resolve) {\n    activeCount++;\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    var result = pTry.apply(void 0, [fn].concat(args));\n    resolve(result);\n    result.then(next, next);\n  };\n\n  var enqueue = function (fn, resolve) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    if (activeCount < concurrency) {\n      run.apply(void 0, [fn, resolve].concat(args));\n    } else {\n      queue.push(run.bind.apply(run, [null, fn, resolve].concat(args)));\n    }\n  };\n\n  return function (fn) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return new Promise(function (resolve) {\n      return enqueue.apply(void 0, [fn, resolve].concat(args));\n    });\n  };\n};"},"sourceMaps":null,"error":null,"hash":"c7450131f16c9d51b009375a5b55e93b","cacheData":{"env":{}}}