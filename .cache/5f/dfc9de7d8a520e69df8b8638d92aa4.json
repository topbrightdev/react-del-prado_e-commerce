{"id":"../node_modules/postcss-values-parser/lib/container.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-values-parser/package.json","includedInParent":true,"mtime":1594570879022},{"name":"./node","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-values-parser/lib/container.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-values-parser/lib/node.js"}],"generated":{"js":"'use strict';\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Node = require('./node');\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inherits(Container, _Node);\n\n  var _super = _createSuper(Container);\n\n  function Container(opts) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, opts);\n\n    if (!_this.nodes) {\n      _this.nodes = [];\n    }\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"push\",\n    value: function push(child) {\n      child.parent = this;\n      this.nodes.push(child);\n      return this;\n    }\n  }, {\n    key: \"each\",\n    value: function each(callback) {\n      if (!this.lastEach) this.lastEach = 0;\n      if (!this.indexes) this.indexes = {};\n      this.lastEach += 1;\n      var id = this.lastEach,\n          index,\n          result;\n      this.indexes[id] = 0;\n      if (!this.nodes) return undefined;\n\n      while (this.indexes[id] < this.nodes.length) {\n        index = this.indexes[id];\n        result = callback(this.nodes[index], index);\n        if (result === false) break;\n        this.indexes[id] += 1;\n      }\n\n      delete this.indexes[id];\n      return result;\n    }\n  }, {\n    key: \"walk\",\n    value: function walk(callback) {\n      return this.each(function (child, i) {\n        var result = callback(child, i);\n\n        if (result !== false && child.walk) {\n          result = child.walk(callback);\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"walkType\",\n    value: function walkType(type, callback) {\n      var _this2 = this;\n\n      if (!type || !callback) {\n        throw new Error('Parameters {type} and {callback} are required.');\n      } // allow users to pass a constructor, or node type string; eg. Word.\n\n\n      var isTypeCallable = typeof type === 'function';\n      return this.walk(function (node, index) {\n        if (isTypeCallable && node instanceof type || !isTypeCallable && node.type === type) {\n          return callback.call(_this2, node, index);\n        }\n      });\n    }\n  }, {\n    key: \"append\",\n    value: function append(node) {\n      node.parent = this;\n      this.nodes.push(node);\n      return this;\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend(node) {\n      node.parent = this;\n      this.nodes.unshift(node);\n      return this;\n    }\n  }, {\n    key: \"cleanRaws\",\n    value: function cleanRaws(keepBetween) {\n      _get(_getPrototypeOf(Container.prototype), \"cleanRaws\", this).call(this, keepBetween);\n\n      if (this.nodes) {\n        var _iterator = _createForOfIteratorHelper(this.nodes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value;\n            node.cleanRaws(keepBetween);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(oldNode, newNode) {\n      var oldIndex = this.index(oldNode),\n          index;\n      this.nodes.splice(oldIndex + 1, 0, newNode);\n\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n\n        if (oldIndex <= index) {\n          this.indexes[id] = index + this.nodes.length;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(oldNode, newNode) {\n      var oldIndex = this.index(oldNode),\n          index;\n      this.nodes.splice(oldIndex, 0, newNode);\n\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n\n        if (oldIndex <= index) {\n          this.indexes[id] = index + this.nodes.length;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      child = this.index(child);\n      this.nodes[child].parent = undefined;\n      this.nodes.splice(child, 1);\n      var index;\n\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n\n        if (index >= child) {\n          this.indexes[id] = index - 1;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _iterator2 = _createForOfIteratorHelper(this.nodes),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var node = _step2.value;\n          node.parent = undefined;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.nodes = [];\n      return this;\n    }\n  }, {\n    key: \"every\",\n    value: function every(condition) {\n      return this.nodes.every(condition);\n    }\n  }, {\n    key: \"some\",\n    value: function some(condition) {\n      return this.nodes.some(condition);\n    }\n  }, {\n    key: \"index\",\n    value: function index(child) {\n      if (typeof child === 'number') {\n        return child;\n      } else {\n        return this.nodes.indexOf(child);\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var result = this.nodes.map(String).join('');\n\n      if (this.value) {\n        result = this.value + result;\n      }\n\n      if (this.raws.before) {\n        result = this.raws.before + result;\n      }\n\n      if (this.raws.after) {\n        result += this.raws.after;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"first\",\n    get: function get() {\n      if (!this.nodes) return undefined;\n      return this.nodes[0];\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      if (!this.nodes) return undefined;\n      return this.nodes[this.nodes.length - 1];\n    }\n  }]);\n\n  return Container;\n}(Node);\n\nContainer.registerWalker = function (constructor) {\n  var walkerName = 'walk' + constructor.name; // plural sugar\n\n  if (walkerName.lastIndexOf('s') !== walkerName.length - 1) {\n    walkerName += 's';\n  }\n\n  if (Container.prototype[walkerName]) {\n    return;\n  } // we need access to `this` so we can't use an arrow function\n\n\n  Container.prototype[walkerName] = function (callback) {\n    return this.walkType(constructor, callback);\n  };\n};\n\nmodule.exports = Container;"},"sourceMaps":null,"error":null,"hash":"0de8c53ec67e6dea8452180fabc369fe","cacheData":{"env":{}}}