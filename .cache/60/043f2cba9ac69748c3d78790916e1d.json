{"id":"../node_modules/hpack.js/lib/hpack/decoder.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594658474355},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/package.json","includedInParent":true,"mtime":1594306880054},{"name":"../hpack","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/decoder.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack.js"},{"name":"obuf","loc":{"line":6,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/decoder.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/obuf/index.js"}],"generated":{"js":"var hpack = require('../hpack');\nvar utils = hpack.utils;\nvar huffman = hpack.huffman.decode;\nvar assert = utils.assert;\n\nvar OffsetBuffer = require('obuf');\n\nfunction Decoder() {\n  this.buffer = new OffsetBuffer();\n  this.bitOffset = 0;\n\n  // Used internally in decodeStr\n  this._huffmanNode = null;\n}\nmodule.exports = Decoder;\n\nDecoder.create = function create() {\n  return new Decoder();\n};\n\nDecoder.prototype.isEmpty = function isEmpty() {\n  return this.buffer.isEmpty();\n};\n\nDecoder.prototype.push = function push(chunk) {\n  this.buffer.push(chunk);\n};\n\nDecoder.prototype.decodeBit = function decodeBit() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n\n  var octet;\n  var offset = this.bitOffset;\n\n  if (++this.bitOffset === 8) {\n    octet = this.buffer.readUInt8();\n    this.bitOffset = 0;\n  } else {\n    octet = this.buffer.peekUInt8();\n  }\n  return (octet >>> (7 - offset)) & 1;\n};\n\n// Just for testing\nDecoder.prototype.skipBits = function skipBits(n) {\n  this.bitOffset += n;\n  this.buffer.skip(this.bitOffset >> 3);\n  this.bitOffset &= 0x7;\n};\n\nDecoder.prototype.decodeInt = function decodeInt() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n\n  var prefix = 8 - this.bitOffset;\n\n  // We are going to end up octet-aligned\n  this.bitOffset = 0;\n\n  var max = (1 << prefix) - 1;\n  var octet = this.buffer.readUInt8() & max;\n\n  // Fast case - int fits into the prefix\n  if (octet !== max)\n    return octet;\n\n  // TODO(indutny): what about > 32bit numbers?\n  var res = 0;\n  var isLast = false;\n  var len = 0;\n  do {\n    octet = this.buffer.readUInt8();\n    isLast = (octet & 0x80) === 0;\n\n    res <<= 7;\n    res |= octet & 0x7f;\n    len++;\n  } while (!isLast);\n  assert(isLast, 'Incomplete data for multi-octet integer');\n  assert(len <= 4, 'Integer does not fit into 32 bits');\n\n  // Reverse bits\n  res = (res >>> 21) |\n        (((res >> 14) & 0x7f) << 7) |\n        (((res >> 7) & 0x7f) << 14) |\n        ((res & 0x7f) << 21);\n  res >>= (4 - len) * 7;\n\n  // Append prefix max\n  res += max;\n\n  return res;\n};\n\nDecoder.prototype.decodeHuffmanWord = function decodeHuffmanWord(input,\n                                                                 inputBits,\n                                                                 out) {\n  var root = huffman;\n  var node = this._huffmanNode;\n  var word = input;\n  var bits = inputBits;\n\n  for (; bits > 0; word &= (1 << bits) - 1) {\n    // Nudge the word bit length to match it\n    for (var i = Math.max(0, bits - 8); i < bits; i++) {\n      var subnode = node[word >>> i];\n      if (typeof subnode !== 'number') {\n        node = subnode;\n        bits = i;\n        break;\n      }\n\n      if (subnode === 0)\n        continue;\n\n      // Word bit length should match\n      if ((subnode >>> 9) !== bits - i) {\n        subnode = 0;\n        continue;\n      }\n\n      var octet = subnode & 0x1ff;\n      assert(octet !== 256, 'EOS in encoding');\n      out.push(octet);\n      node = root;\n\n      bits = i;\n      break;\n    }\n    if (subnode === 0)\n      break;\n  }\n  this._huffmanNode = node;\n\n  return bits;\n};\n\nDecoder.prototype.decodeStr = function decodeStr() {\n  var isHuffman = this.decodeBit();\n  var len = this.decodeInt();\n  assert(this.buffer.has(len), 'Not enough octets for string');\n\n  if (!isHuffman)\n    return this.buffer.take(len);\n\n  this._huffmanNode = huffman;\n\n  var out = [];\n\n  var word = 0;\n  var bits = 0;\n  var lastKey = 0;\n  for (var i = 0; i < len; i++) {\n    word <<= 8;\n    word |= this.buffer.readUInt8();\n    bits += 8;\n\n    bits = this.decodeHuffmanWord(word, bits, out);\n    lastKey = word >> bits;\n    word &= (1 << bits) - 1;\n  }\n  assert(this._huffmanNode === huffman, '8-bit EOS');\n  assert(word + 1 === (1 << bits), 'Final sequence is not EOS');\n\n  this._huffmanNode = null;\n\n  return out;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/hpack.js/lib/hpack/decoder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}}],"sources":{"../node_modules/hpack.js/lib/hpack/decoder.js":"var hpack = require('../hpack');\nvar utils = hpack.utils;\nvar huffman = hpack.huffman.decode;\nvar assert = utils.assert;\n\nvar OffsetBuffer = require('obuf');\n\nfunction Decoder() {\n  this.buffer = new OffsetBuffer();\n  this.bitOffset = 0;\n\n  // Used internally in decodeStr\n  this._huffmanNode = null;\n}\nmodule.exports = Decoder;\n\nDecoder.create = function create() {\n  return new Decoder();\n};\n\nDecoder.prototype.isEmpty = function isEmpty() {\n  return this.buffer.isEmpty();\n};\n\nDecoder.prototype.push = function push(chunk) {\n  this.buffer.push(chunk);\n};\n\nDecoder.prototype.decodeBit = function decodeBit() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n\n  var octet;\n  var offset = this.bitOffset;\n\n  if (++this.bitOffset === 8) {\n    octet = this.buffer.readUInt8();\n    this.bitOffset = 0;\n  } else {\n    octet = this.buffer.peekUInt8();\n  }\n  return (octet >>> (7 - offset)) & 1;\n};\n\n// Just for testing\nDecoder.prototype.skipBits = function skipBits(n) {\n  this.bitOffset += n;\n  this.buffer.skip(this.bitOffset >> 3);\n  this.bitOffset &= 0x7;\n};\n\nDecoder.prototype.decodeInt = function decodeInt() {\n  // Need at least one octet\n  assert(this.buffer.has(1), 'Buffer too small for an int');\n\n  var prefix = 8 - this.bitOffset;\n\n  // We are going to end up octet-aligned\n  this.bitOffset = 0;\n\n  var max = (1 << prefix) - 1;\n  var octet = this.buffer.readUInt8() & max;\n\n  // Fast case - int fits into the prefix\n  if (octet !== max)\n    return octet;\n\n  // TODO(indutny): what about > 32bit numbers?\n  var res = 0;\n  var isLast = false;\n  var len = 0;\n  do {\n    octet = this.buffer.readUInt8();\n    isLast = (octet & 0x80) === 0;\n\n    res <<= 7;\n    res |= octet & 0x7f;\n    len++;\n  } while (!isLast);\n  assert(isLast, 'Incomplete data for multi-octet integer');\n  assert(len <= 4, 'Integer does not fit into 32 bits');\n\n  // Reverse bits\n  res = (res >>> 21) |\n        (((res >> 14) & 0x7f) << 7) |\n        (((res >> 7) & 0x7f) << 14) |\n        ((res & 0x7f) << 21);\n  res >>= (4 - len) * 7;\n\n  // Append prefix max\n  res += max;\n\n  return res;\n};\n\nDecoder.prototype.decodeHuffmanWord = function decodeHuffmanWord(input,\n                                                                 inputBits,\n                                                                 out) {\n  var root = huffman;\n  var node = this._huffmanNode;\n  var word = input;\n  var bits = inputBits;\n\n  for (; bits > 0; word &= (1 << bits) - 1) {\n    // Nudge the word bit length to match it\n    for (var i = Math.max(0, bits - 8); i < bits; i++) {\n      var subnode = node[word >>> i];\n      if (typeof subnode !== 'number') {\n        node = subnode;\n        bits = i;\n        break;\n      }\n\n      if (subnode === 0)\n        continue;\n\n      // Word bit length should match\n      if ((subnode >>> 9) !== bits - i) {\n        subnode = 0;\n        continue;\n      }\n\n      var octet = subnode & 0x1ff;\n      assert(octet !== 256, 'EOS in encoding');\n      out.push(octet);\n      node = root;\n\n      bits = i;\n      break;\n    }\n    if (subnode === 0)\n      break;\n  }\n  this._huffmanNode = node;\n\n  return bits;\n};\n\nDecoder.prototype.decodeStr = function decodeStr() {\n  var isHuffman = this.decodeBit();\n  var len = this.decodeInt();\n  assert(this.buffer.has(len), 'Not enough octets for string');\n\n  if (!isHuffman)\n    return this.buffer.take(len);\n\n  this._huffmanNode = huffman;\n\n  var out = [];\n\n  var word = 0;\n  var bits = 0;\n  var lastKey = 0;\n  for (var i = 0; i < len; i++) {\n    word <<= 8;\n    word |= this.buffer.readUInt8();\n    bits += 8;\n\n    bits = this.decodeHuffmanWord(word, bits, out);\n    lastKey = word >> bits;\n    word &= (1 << bits) - 1;\n  }\n  assert(this._huffmanNode === huffman, '8-bit EOS');\n  assert(word + 1 === (1 << bits), 'Final sequence is not EOS');\n\n  this._huffmanNode = null;\n\n  return out;\n};\n"},"lineCount":170}},"error":null,"hash":"0045a32a3494b0dede4cf58437cbc8f9","cacheData":{"env":{}}}