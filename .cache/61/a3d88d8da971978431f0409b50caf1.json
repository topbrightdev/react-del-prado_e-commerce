{"id":"../node_modules/postcss-custom-media/index.es.mjs","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-custom-media/package.json","includedInParent":true,"mtime":1594570879106},{"name":"fs","loc":{"line":1,"column":15},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-custom-media/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":2,"column":17},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-custom-media/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"postcss","loc":{"line":3,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-custom-media/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-custom-media/node_modules/postcss/lib/postcss.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction parse(string, splitByAnd) {\n  var array = [];\n  var buffer = '';\n  var split = false;\n  var func = 0;\n  var i = -1;\n\n  while (++i < string.length) {\n    var char = string[i];\n\n    if (char === '(') {\n      func += 1;\n    } else if (char === ')') {\n      if (func > 0) {\n        func -= 1;\n      }\n    } else if (func === 0) {\n      if (splitByAnd && andRegExp.test(buffer + char)) {\n        split = true;\n      } else if (!splitByAnd && char === ',') {\n        split = true;\n      }\n    }\n\n    if (split) {\n      array.push(splitByAnd ? new MediaExpression(buffer + char) : new MediaQuery(buffer));\n      buffer = '';\n      split = false;\n    } else {\n      buffer += char;\n    }\n  }\n\n  if (buffer !== '') {\n    array.push(splitByAnd ? new MediaExpression(buffer) : new MediaQuery(buffer));\n  }\n\n  return array;\n}\n\nvar MediaQueryList = /*#__PURE__*/function () {\n  function MediaQueryList(string) {\n    _classCallCheck(this, MediaQueryList);\n\n    this.nodes = parse(string);\n  }\n\n  _createClass(MediaQueryList, [{\n    key: \"invert\",\n    value: function invert() {\n      this.nodes.forEach(function (node) {\n        node.invert();\n      });\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new MediaQueryList(String(this));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.nodes.join(',');\n    }\n  }]);\n\n  return MediaQueryList;\n}();\n\nvar MediaQuery = /*#__PURE__*/function () {\n  function MediaQuery(string) {\n    _classCallCheck(this, MediaQuery);\n\n    var _string$match = string.match(spaceWrapRegExp),\n        _string$match2 = _slicedToArray(_string$match, 4),\n        before = _string$match2[1],\n        media = _string$match2[2],\n        after = _string$match2[3];\n\n    var _ref = media.match(mediaRegExp) || [],\n        _ref2 = _slicedToArray(_ref, 9),\n        _ref2$ = _ref2[1],\n        modifier = _ref2$ === void 0 ? '' : _ref2$,\n        _ref2$2 = _ref2[2],\n        afterModifier = _ref2$2 === void 0 ? ' ' : _ref2$2,\n        _ref2$3 = _ref2[3],\n        type = _ref2$3 === void 0 ? '' : _ref2$3,\n        _ref2$4 = _ref2[4],\n        beforeAnd = _ref2$4 === void 0 ? '' : _ref2$4,\n        _ref2$5 = _ref2[5],\n        and = _ref2$5 === void 0 ? '' : _ref2$5,\n        _ref2$6 = _ref2[6],\n        beforeExpression = _ref2$6 === void 0 ? '' : _ref2$6,\n        _ref2$7 = _ref2[7],\n        expression1 = _ref2$7 === void 0 ? '' : _ref2$7,\n        _ref2$8 = _ref2[8],\n        expression2 = _ref2$8 === void 0 ? '' : _ref2$8;\n\n    var raws = {\n      before,\n      after,\n      afterModifier,\n      originalModifier: modifier || '',\n      beforeAnd,\n      and,\n      beforeExpression\n    };\n    var nodes = parse(expression1 || expression2, true);\n    Object.assign(this, {\n      modifier,\n      type,\n      raws,\n      nodes\n    });\n  }\n\n  _createClass(MediaQuery, [{\n    key: \"clone\",\n    value: function clone(overrides) {\n      var instance = new MediaQuery(String(this));\n      Object.assign(instance, overrides);\n      return instance;\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      this.modifier = this.modifier ? '' : this.raws.originalModifier;\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var raws = this.raws;\n      return \"\".concat(raws.before).concat(this.modifier).concat(this.modifier ? \"\".concat(raws.afterModifier) : '').concat(this.type).concat(raws.beforeAnd).concat(raws.and).concat(raws.beforeExpression).concat(this.nodes.join('')).concat(this.raws.after);\n    }\n  }]);\n\n  return MediaQuery;\n}();\n\nvar MediaExpression = /*#__PURE__*/function () {\n  function MediaExpression(string) {\n    _classCallCheck(this, MediaExpression);\n\n    var _ref3 = string.match(andRegExp) || [null, string],\n        _ref4 = _slicedToArray(_ref3, 5),\n        value = _ref4[1],\n        _ref4$ = _ref4[2],\n        after = _ref4$ === void 0 ? '' : _ref4$,\n        _ref4$2 = _ref4[3],\n        and = _ref4$2 === void 0 ? '' : _ref4$2,\n        _ref4$3 = _ref4[4],\n        afterAnd = _ref4$3 === void 0 ? '' : _ref4$3;\n\n    var raws = {\n      after,\n      and,\n      afterAnd\n    };\n    Object.assign(this, {\n      value,\n      raws\n    });\n  }\n\n  _createClass(MediaExpression, [{\n    key: \"clone\",\n    value: function clone(overrides) {\n      var instance = new MediaExpression(String(this));\n      Object.assign(instance, overrides);\n      return instance;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var raws = this.raws;\n      return \"\".concat(this.value).concat(raws.after).concat(raws.and).concat(raws.afterAnd);\n    }\n  }]);\n\n  return MediaExpression;\n}();\n\nvar modifierRE = '(not|only)';\nvar typeRE = '(all|print|screen|speech)';\nvar noExpressionRE = '([\\\\W\\\\w]*)';\nvar expressionRE = '([\\\\W\\\\w]+)';\nvar noSpaceRE = '(\\\\s*)';\nvar spaceRE = '(\\\\s+)';\nvar andRE = '(?:(\\\\s+)(and))';\nvar andRegExp = new RegExp(\"^\".concat(expressionRE, \"(?:\").concat(andRE).concat(spaceRE, \")$\"), 'i');\nvar spaceWrapRegExp = new RegExp(\"^\".concat(noSpaceRE).concat(noExpressionRE).concat(noSpaceRE, \"$\"));\nvar mediaRegExp = new RegExp(\"^(?:\".concat(modifierRE).concat(spaceRE, \")?(?:\").concat(typeRE, \"(?:\").concat(andRE).concat(spaceRE).concat(expressionRE, \")?|\").concat(expressionRE, \")$\"), 'i');\n\nvar mediaASTFromString = function (string) {\n  return new MediaQueryList(string);\n};\n\nvar getCustomMedia = function (root, opts) {\n  // initialize custom selectors\n  var customMedias = {}; // for each custom selector atrule that is a child of the css root\n\n  root.nodes.slice().forEach(function (node) {\n    if (isCustomMedia(node)) {\n      // extract the name and selectors from the params of the custom selector\n      var _node$params$match = node.params.match(customMediaParamsRegExp),\n          _node$params$match2 = _slicedToArray(_node$params$match, 3),\n          name = _node$params$match2[1],\n          selectors = _node$params$match2[2]; // write the parsed selectors to the custom selector\n\n\n      customMedias[name] = mediaASTFromString(selectors); // conditionally remove the custom selector atrule\n\n      if (!Object(opts).preserve) {\n        node.remove();\n      }\n    }\n  });\n  return customMedias;\n}; // match the custom selector name\n\n\nvar customMediaNameRegExp = /^custom-media$/i; // match the custom selector params\n\nvar customMediaParamsRegExp = /^(--[A-z][\\w-]*)\\s+([\\W\\w]+)\\s*$/; // whether the atrule is a custom selector\n\nvar isCustomMedia = function (node) {\n  return node.type === 'atrule' && customMediaNameRegExp.test(node.name) && customMediaParamsRegExp.test(node.params);\n};\n/* Get Custom Media from CSS File\n/* ========================================================================== */\n\n\nfunction getCustomMediaFromCSSFile(_x) {\n  return _getCustomMediaFromCSSFile.apply(this, arguments);\n}\n/* Get Custom Media from Object\n/* ========================================================================== */\n\n\nfunction _getCustomMediaFromCSSFile() {\n  _getCustomMediaFromCSSFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(from) {\n    var css, root;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return readFile(from);\n\n          case 2:\n            css = _context.sent;\n            root = _postcss.default.parse(css, {\n              from\n            });\n            return _context.abrupt(\"return\", getCustomMedia(root, {\n              preserve: true\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getCustomMediaFromCSSFile.apply(this, arguments);\n}\n\nfunction getCustomMediaFromObject(object) {\n  var customMedia = Object.assign({}, Object(object).customMedia, Object(object)['custom-media']);\n\n  for (var key in customMedia) {\n    customMedia[key] = mediaASTFromString(customMedia[key]);\n  }\n\n  return customMedia;\n}\n/* Get Custom Media from JSON file\n/* ========================================================================== */\n\n\nfunction getCustomMediaFromJSONFile(_x2) {\n  return _getCustomMediaFromJSONFile.apply(this, arguments);\n}\n/* Get Custom Media from JS file\n/* ========================================================================== */\n\n\nfunction _getCustomMediaFromJSONFile() {\n  _getCustomMediaFromJSONFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(from) {\n    var object;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return readJSON(from);\n\n          case 2:\n            object = _context2.sent;\n            return _context2.abrupt(\"return\", getCustomMediaFromObject(object));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getCustomMediaFromJSONFile.apply(this, arguments);\n}\n\nfunction getCustomMediaFromJSFile(_x3) {\n  return _getCustomMediaFromJSFile.apply(this, arguments);\n}\n/* Get Custom Media from Sources\n/* ========================================================================== */\n\n\nfunction _getCustomMediaFromJSFile() {\n  _getCustomMediaFromJSFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(from) {\n    var object;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return import(from);\n\n          case 2:\n            object = _context3.sent;\n            return _context3.abrupt(\"return\", getCustomMediaFromObject(object));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getCustomMediaFromJSFile.apply(this, arguments);\n}\n\nfunction getCustomMediaFromSources(sources) {\n  return sources.map(function (source) {\n    if (source instanceof Promise) {\n      return source;\n    } else if (source instanceof Function) {\n      return source();\n    } // read the source as an object\n\n\n    var opts = source === Object(source) ? source : {\n      from: String(source)\n    }; // skip objects with custom media\n\n    if (Object(opts).customMedia || Object(opts)['custom-media']) {\n      return opts;\n    } // source pathname\n\n\n    var from = _path.default.resolve(String(opts.from || '')); // type of file being read from\n\n\n    var type = (opts.type || _path.default.extname(from).slice(1)).toLowerCase();\n\n    return {\n      type,\n      from\n    };\n  }).reduce( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(customMedia, source) {\n      var _ref2, type, from;\n\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return source;\n\n            case 2:\n              _ref2 = _context4.sent;\n              type = _ref2.type;\n              from = _ref2.from;\n\n              if (!(type === 'css')) {\n                _context4.next = 14;\n                break;\n              }\n\n              _context4.t0 = Object;\n              _context4.next = 9;\n              return customMedia;\n\n            case 9:\n              _context4.t1 = _context4.sent;\n              _context4.next = 12;\n              return getCustomMediaFromCSSFile(from);\n\n            case 12:\n              _context4.t2 = _context4.sent;\n              return _context4.abrupt(\"return\", _context4.t0.assign.call(_context4.t0, _context4.t1, _context4.t2));\n\n            case 14:\n              if (!(type === 'js')) {\n                _context4.next = 23;\n                break;\n              }\n\n              _context4.t3 = Object;\n              _context4.next = 18;\n              return customMedia;\n\n            case 18:\n              _context4.t4 = _context4.sent;\n              _context4.next = 21;\n              return getCustomMediaFromJSFile(from);\n\n            case 21:\n              _context4.t5 = _context4.sent;\n              return _context4.abrupt(\"return\", _context4.t3.assign.call(_context4.t3, _context4.t4, _context4.t5));\n\n            case 23:\n              if (!(type === 'json')) {\n                _context4.next = 32;\n                break;\n              }\n\n              _context4.t6 = Object;\n              _context4.next = 27;\n              return customMedia;\n\n            case 27:\n              _context4.t7 = _context4.sent;\n              _context4.next = 30;\n              return getCustomMediaFromJSONFile(from);\n\n            case 30:\n              _context4.t8 = _context4.sent;\n              return _context4.abrupt(\"return\", _context4.t6.assign.call(_context4.t6, _context4.t7, _context4.t8));\n\n            case 32:\n              _context4.t9 = Object;\n              _context4.next = 35;\n              return customMedia;\n\n            case 35:\n              _context4.t10 = _context4.sent;\n              _context4.t11 = getCustomMediaFromObject;\n              _context4.next = 39;\n              return source;\n\n            case 39:\n              _context4.t12 = _context4.sent;\n              _context4.t13 = (0, _context4.t11)(_context4.t12);\n              return _context4.abrupt(\"return\", _context4.t9.assign.call(_context4.t9, _context4.t10, _context4.t13));\n\n            case 42:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }(), {});\n}\n/* Helper utilities\n/* ========================================================================== */\n\n\nvar readFile = function (from) {\n  return new Promise(function (resolve, reject) {\n    _fs.default.readFile(from, 'utf8', function (error, result) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\n\nvar readJSON = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(from) {\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.t0 = JSON;\n            _context5.next = 3;\n            return readFile(from);\n\n          case 3:\n            _context5.t1 = _context5.sent;\n            return _context5.abrupt(\"return\", _context5.t0.parse.call(_context5.t0, _context5.t1));\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function readJSON(_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // return transformed medias, replacing custom pseudo medias with custom medias\n\n\nfunction transformMediaList(mediaList, customMedias) {\n  var index = mediaList.nodes.length - 1;\n\n  while (index >= 0) {\n    var transformedMedias = transformMedia(mediaList.nodes[index], customMedias);\n\n    if (transformedMedias.length) {\n      var _mediaList$nodes;\n\n      (_mediaList$nodes = mediaList.nodes).splice.apply(_mediaList$nodes, [index, 1].concat(_toConsumableArray(transformedMedias)));\n    }\n\n    --index;\n  }\n\n  return mediaList;\n} // return custom pseudo medias replaced with custom medias\n\n\nfunction transformMedia(media, customMedias) {\n  var transpiledMedias = [];\n\n  var _loop = function (_index) {\n    var _media$nodes$index = media.nodes[_index],\n        value = _media$nodes$index.value,\n        nodes = _media$nodes$index.nodes;\n    var key = value.replace(customPseudoRegExp, '$1');\n\n    if (key in customMedias) {\n      _iteratorNormalCompletion = true;\n      _didIteratorError = false;\n      _iteratorError = undefined;\n\n      try {\n        for (_iterator = customMedias[key].nodes[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _mediaClone$nodes;\n\n          var replacementMedia = _step.value; // use the first available modifier unless they cancel each other out\n\n          var modifier = media.modifier !== replacementMedia.modifier ? media.modifier || replacementMedia.modifier : '';\n          var mediaClone = media.clone({\n            modifier,\n            // conditionally use the raws from the first available modifier\n            raws: !modifier || media.modifier ? _objectSpread({}, media.raws) : _objectSpread({}, replacementMedia.raws),\n            type: media.type || replacementMedia.type\n          }); // conditionally include more replacement raws when the type is present\n\n          if (mediaClone.type === replacementMedia.type) {\n            Object.assign(mediaClone.raws, {\n              and: replacementMedia.raws.and,\n              beforeAnd: replacementMedia.raws.beforeAnd,\n              beforeExpression: replacementMedia.raws.beforeExpression\n            });\n          }\n\n          (_mediaClone$nodes = mediaClone.nodes).splice.apply(_mediaClone$nodes, [_index, 1].concat(_toConsumableArray(replacementMedia.clone().nodes.map(function (node) {\n            // use raws and spacing from the current usage\n            if (media.nodes[_index].raws.and) {\n              node.raws = _objectSpread({}, media.nodes[_index].raws);\n            }\n\n            node.spaces = _objectSpread({}, media.nodes[_index].spaces);\n            return node;\n          })))); // remove the currently transformed key to prevent recursion\n\n\n          var nextCustomMedia = getCustomMediasWithoutKey(customMedias, key);\n          var retranspiledMedias = transformMedia(mediaClone, nextCustomMedia);\n\n          if (retranspiledMedias.length) {\n            transpiledMedias.push.apply(transpiledMedias, _toConsumableArray(retranspiledMedias));\n          } else {\n            transpiledMedias.push(mediaClone);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return {\n        v: transpiledMedias\n      };\n    } else if (nodes && nodes.length) {\n      transformMediaList(media.nodes[_index], customMedias);\n    }\n  };\n\n  for (var _index in media.nodes) {\n    var _iteratorNormalCompletion;\n\n    var _didIteratorError;\n\n    var _iteratorError;\n\n    var _iterator, _step;\n\n    var _ret = _loop(_index);\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n\n  return transpiledMedias;\n}\n\nvar customPseudoRegExp = /\\((--[A-z][\\w-]*)\\)/;\n\nvar getCustomMediasWithoutKey = function (customMedias, key) {\n  var nextCustomMedias = Object.assign({}, customMedias);\n  delete nextCustomMedias[key];\n  return nextCustomMedias;\n};\n\nvar transformAtrules = function (root, customMedia, opts) {\n  root.walkAtRules(mediaAtRuleRegExp, function (atrule) {\n    if (customPseudoRegExp$1.test(atrule.params)) {\n      var mediaAST = mediaASTFromString(atrule.params);\n      var params = String(transformMediaList(mediaAST, customMedia));\n\n      if (opts.preserve) {\n        atrule.cloneBefore({\n          params\n        });\n      } else {\n        atrule.params = params;\n      }\n    }\n  });\n};\n\nvar mediaAtRuleRegExp = /^media$/i;\nvar customPseudoRegExp$1 = /\\(--[A-z][\\w-]*\\)/;\n/* Write Custom Media from CSS File\n/* ========================================================================== */\n\nfunction writeCustomMediaToCssFile(_x, _x2) {\n  return _writeCustomMediaToCssFile.apply(this, arguments);\n}\n/* Write Custom Media from JSON file\n/* ========================================================================== */\n\n\nfunction _writeCustomMediaToCssFile() {\n  _writeCustomMediaToCssFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(to, customMedia) {\n    var cssContent, css;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            cssContent = Object.keys(customMedia).reduce(function (cssLines, name) {\n              cssLines.push(\"@custom-media \".concat(name, \" \").concat(customMedia[name], \";\"));\n              return cssLines;\n            }, []).join('\\n');\n            css = \"\".concat(cssContent, \"\\n\");\n            _context6.next = 4;\n            return writeFile(to, css);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _writeCustomMediaToCssFile.apply(this, arguments);\n}\n\nfunction writeCustomMediaToJsonFile(_x3, _x4) {\n  return _writeCustomMediaToJsonFile.apply(this, arguments);\n}\n/* Write Custom Media from Common JS file\n/* ========================================================================== */\n\n\nfunction _writeCustomMediaToJsonFile() {\n  _writeCustomMediaToJsonFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(to, customMedia) {\n    var jsonContent, json;\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            jsonContent = JSON.stringify({\n              'custom-media': customMedia\n            }, null, '  ');\n            json = \"\".concat(jsonContent, \"\\n\");\n            _context7.next = 4;\n            return writeFile(to, json);\n\n          case 4:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _writeCustomMediaToJsonFile.apply(this, arguments);\n}\n\nfunction writeCustomMediaToCjsFile(_x5, _x6) {\n  return _writeCustomMediaToCjsFile.apply(this, arguments);\n}\n/* Write Custom Media from Module JS file\n/* ========================================================================== */\n\n\nfunction _writeCustomMediaToCjsFile() {\n  _writeCustomMediaToCjsFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(to, customMedia) {\n    var jsContents, js;\n    return regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            jsContents = Object.keys(customMedia).reduce(function (jsLines, name) {\n              jsLines.push(\"\\t\\t'\".concat(escapeForJS(name), \"': '\").concat(escapeForJS(customMedia[name]), \"'\"));\n              return jsLines;\n            }, []).join(',\\n');\n            js = \"module.exports = {\\n\\tcustomMedia: {\\n\".concat(jsContents, \"\\n\\t}\\n};\\n\");\n            _context8.next = 4;\n            return writeFile(to, js);\n\n          case 4:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _writeCustomMediaToCjsFile.apply(this, arguments);\n}\n\nfunction writeCustomMediaToMjsFile(_x7, _x8) {\n  return _writeCustomMediaToMjsFile.apply(this, arguments);\n}\n/* Write Custom Media to Exports\n/* ========================================================================== */\n\n\nfunction _writeCustomMediaToMjsFile() {\n  _writeCustomMediaToMjsFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(to, customMedia) {\n    var mjsContents, mjs;\n    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            mjsContents = Object.keys(customMedia).reduce(function (mjsLines, name) {\n              mjsLines.push(\"\\t'\".concat(escapeForJS(name), \"': '\").concat(escapeForJS(customMedia[name]), \"'\"));\n              return mjsLines;\n            }, []).join(',\\n');\n            mjs = \"export const customMedia = {\\n\".concat(mjsContents, \"\\n};\\n\");\n            _context9.next = 4;\n            return writeFile(to, mjs);\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _writeCustomMediaToMjsFile.apply(this, arguments);\n}\n\nfunction writeCustomMediaToExports(customMedia, destinations) {\n  return Promise.all(destinations.map( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(destination) {\n      var opts, toJSON, to, type, customMediaJSON;\n      return regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!(destination instanceof Function)) {\n                _context10.next = 5;\n                break;\n              }\n\n              _context10.next = 3;\n              return destination(defaultCustomMediaToJSON(customMedia));\n\n            case 3:\n              _context10.next = 30;\n              break;\n\n            case 5:\n              // read the destination as an object\n              opts = destination === Object(destination) ? destination : {\n                to: String(destination)\n              }; // transformer for custom media into a JSON-compatible object\n\n              toJSON = opts.toJSON || defaultCustomMediaToJSON;\n\n              if (!('customMedia' in opts)) {\n                _context10.next = 11;\n                break;\n              }\n\n              // write directly to an object as customMedia\n              opts.customMedia = toJSON(customMedia);\n              _context10.next = 30;\n              break;\n\n            case 11:\n              if (!('custom-media' in opts)) {\n                _context10.next = 15;\n                break;\n              }\n\n              // write directly to an object as custom-media\n              opts['custom-media'] = toJSON(customMedia);\n              _context10.next = 30;\n              break;\n\n            case 15:\n              // destination pathname\n              to = String(opts.to || ''); // type of file being written to\n\n              type = (opts.type || _path.default.extname(to).slice(1)).toLowerCase(); // transformed custom media\n\n              customMediaJSON = toJSON(customMedia);\n\n              if (!(type === 'css')) {\n                _context10.next = 21;\n                break;\n              }\n\n              _context10.next = 21;\n              return writeCustomMediaToCssFile(to, customMediaJSON);\n\n            case 21:\n              if (!(type === 'js')) {\n                _context10.next = 24;\n                break;\n              }\n\n              _context10.next = 24;\n              return writeCustomMediaToCjsFile(to, customMediaJSON);\n\n            case 24:\n              if (!(type === 'json')) {\n                _context10.next = 27;\n                break;\n              }\n\n              _context10.next = 27;\n              return writeCustomMediaToJsonFile(to, customMediaJSON);\n\n            case 27:\n              if (!(type === 'mjs')) {\n                _context10.next = 30;\n                break;\n              }\n\n              _context10.next = 30;\n              return writeCustomMediaToMjsFile(to, customMediaJSON);\n\n            case 30:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function (_x9) {\n      return _ref.apply(this, arguments);\n    };\n  }()));\n}\n/* Helper utilities\n/* ========================================================================== */\n\n\nvar defaultCustomMediaToJSON = function (customMedia) {\n  return Object.keys(customMedia).reduce(function (customMediaJSON, key) {\n    customMediaJSON[key] = String(customMedia[key]);\n    return customMediaJSON;\n  }, {});\n};\n\nvar writeFile = function (to, text) {\n  return new Promise(function (resolve, reject) {\n    _fs.default.writeFile(to, text, function (error) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nvar escapeForJS = function (string) {\n  return string.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n};\n\nvar index = _postcss.default.plugin('postcss-custom-media', function (opts) {\n  // whether to preserve custom media and at-rules using them\n  var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false; // sources to import custom media from\n\n  var importFrom = [].concat(Object(opts).importFrom || []); // destinations to export custom media to\n\n  var exportTo = [].concat(Object(opts).exportTo || []); // promise any custom media are imported\n\n  var customMediaPromise = getCustomMediaFromSources(importFrom);\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(root) {\n      var customMedia;\n      return regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.t0 = Object;\n              _context11.next = 3;\n              return customMediaPromise;\n\n            case 3:\n              _context11.t1 = _context11.sent;\n              _context11.t2 = getCustomMedia(root, {\n                preserve\n              });\n              customMedia = _context11.t0.assign.call(_context11.t0, _context11.t1, _context11.t2);\n              _context11.next = 8;\n              return writeCustomMediaToExports(customMedia, exportTo);\n\n            case 8:\n              transformAtrules(root, customMedia, {\n                preserve\n              });\n\n            case 9:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});\n\nvar _default = index;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"b8f5e21d4e3070f174db5de3e093ec57","cacheData":{"env":{}}}