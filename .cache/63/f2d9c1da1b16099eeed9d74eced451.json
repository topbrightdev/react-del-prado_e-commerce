{"id":"../node_modules/webpack/lib/node/NodeChunkTemplatePlugin.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/package.json","includedInParent":true,"mtime":1594578778161},{"name":"webpack-sources","loc":{"line":8,"column":33},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/node/NodeChunkTemplatePlugin.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/webpack-sources/lib/index.js"}],"generated":{"js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar NodeChunkTemplatePlugin = /*#__PURE__*/function () {\n  function NodeChunkTemplatePlugin() {\n    _classCallCheck(this, NodeChunkTemplatePlugin);\n  }\n\n  _createClass(NodeChunkTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(chunkTemplate) {\n      chunkTemplate.hooks.render.tap(\"NodeChunkTemplatePlugin\", function (modules, chunk) {\n        var source = new ConcatSource();\n        source.add(\"exports.ids = \".concat(JSON.stringify(chunk.ids), \";\\nexports.modules = \"));\n        source.add(modules);\n        source.add(\";\");\n        return source;\n      });\n      chunkTemplate.hooks.hash.tap(\"NodeChunkTemplatePlugin\", function (hash) {\n        hash.update(\"node\");\n        hash.update(\"3\");\n      });\n    }\n  }]);\n\n  return NodeChunkTemplatePlugin;\n}();\n\nmodule.exports = NodeChunkTemplatePlugin;"},"sourceMaps":null,"error":null,"hash":"cdbc1b15709fcad2e2ea525e9ad76d76","cacheData":{"env":{}}}