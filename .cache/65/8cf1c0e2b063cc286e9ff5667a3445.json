{"id":"../node_modules/postcss-overflow-shorthand/index.es.mjs","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-overflow-shorthand/package.json","includedInParent":true,"mtime":1594306880734},{"name":"postcss","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-overflow-shorthand/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-overflow-shorthand/node_modules/postcss/lib/postcss.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar space = _postcss.default.list.space; // overflow shorthand property matcher\n\nvar overflowPropertyRegExp = /^overflow$/i;\n\nvar index = _postcss.default.plugin('postcss-overflow-shorthand', function (opts) {\n  var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;\n  return function (root) {\n    // for each overflow declaration\n    root.walkDecls(overflowPropertyRegExp, function (decl) {\n      // split the declaration values\n      var _space = space(decl.value),\n          _space2 = _toArray(_space),\n          overflowX = _space2[0],\n          overflowY = _space2[1],\n          invalidatingValues = _space2.slice(2); // if there are two values, but no invalidating values\n\n\n      if (overflowY && !invalidatingValues.length) {\n        // insert the overflow-* longhand declarations\n        decl.cloneBefore({\n          prop: \"\".concat(decl.prop, \"-x\"),\n          value: overflowX\n        });\n        decl.cloneBefore({\n          prop: \"\".concat(decl.prop, \"-y\"),\n          value: overflowY\n        }); // conditionally remove the original declaration\n\n        if (!preserve) {\n          decl.remove();\n        }\n      }\n    });\n  };\n});\n\nvar _default = index;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"c77f60894e652c2a46b253d4f04ad8e3","cacheData":{"env":{}}}