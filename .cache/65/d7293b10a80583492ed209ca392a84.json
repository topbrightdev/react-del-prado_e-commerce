{"id":"../node_modules/webpack/node_modules/cacache/put.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/package.json","includedInParent":true,"mtime":1594578778157},{"name":"figgy-pudding","loc":{"line":3,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/put.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/figgy-pudding/index.js"},{"name":"./lib/entry-index","loc":{"line":4,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/put.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/entry-index.js"},{"name":"./lib/memoization","loc":{"line":5,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/put.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/memoization.js"},{"name":"./lib/content/write","loc":{"line":6,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/put.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/content/write.js"},{"name":"mississippi","loc":{"line":7,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/put.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/mississippi/index.js"},{"name":"buffer","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/put.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\n\nconst figgyPudding = require('figgy-pudding')\nconst index = require('./lib/entry-index')\nconst memo = require('./lib/memoization')\nconst write = require('./lib/content/write')\nconst to = require('mississippi').to\n\nconst PutOpts = figgyPudding({\n  algorithms: {\n    default: ['sha512']\n  },\n  integrity: {},\n  memoize: {},\n  metadata: {},\n  pickAlgorithm: {},\n  size: {},\n  tmpPrefix: {},\n  single: {},\n  sep: {},\n  error: {},\n  strict: {}\n})\n\nmodule.exports = putData\nfunction putData (cache, key, data, opts) {\n  opts = PutOpts(opts)\n  return write(cache, data, opts).then(res => {\n    return index.insert(\n      cache, key, res.integrity, opts.concat({ size: res.size })\n    ).then(entry => {\n      if (opts.memoize) {\n        memo.put(cache, entry, data, opts)\n      }\n      return res.integrity\n    })\n  })\n}\n\nmodule.exports.stream = putStream\nfunction putStream (cache, key, opts) {\n  opts = PutOpts(opts)\n  let integrity\n  let size\n  const contentStream = write.stream(\n    cache, opts\n  ).on('integrity', int => {\n    integrity = int\n  }).on('size', s => {\n    size = s\n  })\n  let memoData\n  let memoTotal = 0\n  const stream = to((chunk, enc, cb) => {\n    contentStream.write(chunk, enc, () => {\n      if (opts.memoize) {\n        if (!memoData) { memoData = [] }\n        memoData.push(chunk)\n        memoTotal += chunk.length\n      }\n      cb()\n    })\n  }, cb => {\n    contentStream.end(() => {\n      index.insert(cache, key, integrity, opts.concat({ size })).then(entry => {\n        if (opts.memoize) {\n          memo.put(cache, entry, Buffer.concat(memoData, memoTotal), opts)\n        }\n        stream.emit('integrity', integrity)\n        cb()\n      })\n    })\n  })\n  let erred = false\n  stream.once('error', err => {\n    if (erred) { return }\n    erred = true\n    contentStream.emit('error', err)\n  })\n  contentStream.once('error', err => {\n    if (erred) { return }\n    erred = true\n    stream.emit('error', err)\n  })\n  return stream\n}\n"},"sourceMaps":null,"error":null,"hash":"b05a1d689b93ab89e039e6dad0602e7c","cacheData":{"env":{}}}