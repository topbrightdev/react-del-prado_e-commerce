{"id":"../node_modules/postcss-color-functional-notation/index.es.mjs","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-functional-notation/package.json","includedInParent":true,"mtime":1594306880378},{"name":"postcss","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-functional-notation/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-functional-notation/node_modules/postcss/lib/postcss.js"},{"name":"postcss-values-parser","loc":{"line":2,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-functional-notation/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-values-parser/lib/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValuesParser = _interopRequireDefault(require(\"postcss-values-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar index = _postcss.default.plugin('postcss-color-functional-notation', function (opts) {\n  var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false;\n  return function (root) {\n    root.walkDecls(function (decl) {\n      var originalValue = decl.value;\n\n      if (colorAnyRegExp.test(originalValue)) {\n        var valueAST = (0, _postcssValuesParser.default)(originalValue).parse();\n        valueAST.walkType('func', function (node) {\n          if (colorRegExp.test(node.value)) {\n            var children = node.nodes.slice(1, -1);\n            var isFunctionalHSL = matchFunctionalHSL(node, children);\n            var isFunctionalRGB1 = matchFunctionalRGB1(node, children);\n            var isFunctionalRGB2 = matchFunctionalRGB2(node, children);\n\n            if (isFunctionalHSL || isFunctionalRGB1 || isFunctionalRGB2) {\n              var slashNode = children[3];\n              var alphaNode = children[4];\n\n              if (alphaNode) {\n                if (isPercentage(alphaNode) && !isCalc(alphaNode)) {\n                  alphaNode.unit = '';\n                  alphaNode.value = String(alphaNode.value / 100);\n                }\n\n                if (isHslRgb(node)) {\n                  node.value += 'a';\n                }\n              } else if (isHslaRgba(node)) {\n                node.value = node.value.slice(0, -1);\n              }\n\n              if (slashNode && isSlash(slashNode)) {\n                slashNode.replaceWith(newComma());\n              }\n\n              if (isFunctionalRGB2) {\n                children[0].unit = children[1].unit = children[2].unit = '';\n                children[0].value = String(Math.floor(children[0].value * 255 / 100));\n                children[1].value = String(Math.floor(children[1].value * 255 / 100));\n                children[2].value = String(Math.floor(children[2].value * 255 / 100));\n              }\n\n              node.nodes.splice(3, 0, [newComma()]);\n              node.nodes.splice(2, 0, [newComma()]);\n            }\n          }\n        });\n        var modifiedValue = String(valueAST);\n\n        if (modifiedValue !== originalValue) {\n          if (preserve) {\n            decl.cloneBefore({\n              value: modifiedValue\n            });\n          } else {\n            decl.value = modifiedValue;\n          }\n        }\n      }\n    });\n  };\n});\n\nvar alphaUnitMatch = /^%?$/i;\nvar calcFuncMatch = /^calc$/i;\nvar colorAnyRegExp = /(^|[^\\w-])(hsla?|rgba?)\\(/i;\nvar colorRegExp = /^(hsla?|rgba?)$/i;\nvar hslishRegExp = /^hsla?$/i;\nvar hslRgbFuncMatch = /^(hsl|rgb)$/i;\nvar hslaRgbaFuncMatch = /^(hsla|rgba)$/i;\nvar hueUnitMatch = /^(deg|grad|rad|turn)?$/i;\nvar rgbishRegExp = /^rgba?$/i;\n\nvar isAlphaValue = function (node) {\n  return isCalc(node) || node.type === 'number' && alphaUnitMatch.test(node.unit);\n};\n\nvar isCalc = function (node) {\n  return node.type === 'func' && calcFuncMatch.test(node.value);\n};\n\nvar isHue = function (node) {\n  return isCalc(node) || node.type === 'number' && hueUnitMatch.test(node.unit);\n};\n\nvar isNumber = function (node) {\n  return isCalc(node) || node.type === 'number' && node.unit === '';\n};\n\nvar isPercentage = function (node) {\n  return isCalc(node) || node.type === 'number' && (node.unit === '%' || node.unit === '' && node.value === '0');\n};\n\nvar isHslish = function (node) {\n  return node.type === 'func' && hslishRegExp.test(node.value);\n};\n\nvar isHslRgb = function (node) {\n  return node.type === 'func' && hslRgbFuncMatch.test(node.value);\n};\n\nvar isHslaRgba = function (node) {\n  return node.type === 'func' && hslaRgbaFuncMatch.test(node.value);\n};\n\nvar isRgbish = function (node) {\n  return node.type === 'func' && rgbishRegExp.test(node.value);\n};\n\nvar isSlash = function (node) {\n  return node.type === 'operator' && node.value === '/';\n};\n\nvar functionalHSLMatch = [isHue, isPercentage, isPercentage, isSlash, isAlphaValue];\nvar functionalRGB1Match = [isNumber, isNumber, isNumber, isSlash, isAlphaValue];\nvar functionalRGB2Match = [isPercentage, isPercentage, isPercentage, isSlash, isAlphaValue];\n\nvar matchFunctionalHSL = function (node, children) {\n  return isHslish(node) && children.every(function (child, index) {\n    return typeof functionalHSLMatch[index] === 'function' && functionalHSLMatch[index](child);\n  });\n};\n\nvar matchFunctionalRGB1 = function (node, children) {\n  return isRgbish(node) && children.every(function (child, index) {\n    return typeof functionalRGB1Match[index] === 'function' && functionalRGB1Match[index](child);\n  });\n};\n\nvar matchFunctionalRGB2 = function (node, children) {\n  return isRgbish(node) && children.every(function (child, index) {\n    return typeof functionalRGB2Match[index] === 'function' && functionalRGB2Match[index](child);\n  });\n};\n\nvar newComma = function () {\n  return _postcssValuesParser.default.comma({\n    value: ','\n  });\n};\n\nvar _default = index;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"ca37ede9053eeca8908ecfac8e534666","cacheData":{"env":{}}}