{"id":"../node_modules/source-list-map/lib/fromStringWithSourceMap.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/source-list-map/package.json","includedInParent":true,"mtime":1594306881450},{"name":"./base64-vlq","loc":{"line":7,"column":26},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/source-list-map/lib/fromStringWithSourceMap.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/source-list-map/lib/base64-vlq.js"},{"name":"./SourceNode","loc":{"line":8,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/source-list-map/lib/fromStringWithSourceMap.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/source-list-map/lib/SourceNode.js"},{"name":"./CodeNode","loc":{"line":9,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/source-list-map/lib/fromStringWithSourceMap.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/source-list-map/lib/CodeNode.js"},{"name":"./SourceListMap","loc":{"line":10,"column":30},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/source-list-map/lib/fromStringWithSourceMap.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/source-list-map/lib/SourceListMap.js"}],"generated":{"js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst SourceNode = require(\"./SourceNode\");\nconst CodeNode = require(\"./CodeNode\");\nconst SourceListMap = require(\"./SourceListMap\");\n\nmodule.exports = function fromStringWithSourceMap(code, map) {\n\tconst sources = map.sources;\n\tconst sourcesContent = map.sourcesContent;\n\tconst mappings = map.mappings.split(\";\");\n\tconst lines = code.split(\"\\n\");\n\tconst nodes = [];\n\tlet currentNode = null;\n\tlet currentLine = 1;\n\tlet currentSourceIdx = 0;\n\tlet currentSourceNodeLine;\n\tfunction addCode(generatedCode) {\n\t\tif(currentNode && currentNode instanceof CodeNode) {\n\t\t\tcurrentNode.addGeneratedCode(generatedCode);\n\t\t} else if(currentNode && currentNode instanceof SourceNode && !generatedCode.trim()) {\n\t\t\tcurrentNode.addGeneratedCode(generatedCode);\n\t\t\tcurrentSourceNodeLine++;\n\t\t} else {\n\t\t\tcurrentNode = new CodeNode(generatedCode);\n\t\t\tnodes.push(currentNode);\n\t\t}\n\t}\n\tfunction addSource(generatedCode, source, originalSource, linePosition) {\n\t\tif(currentNode && currentNode instanceof SourceNode &&\n\t\t\tcurrentNode.source === source &&\n\t\t\tcurrentSourceNodeLine === linePosition\n\t\t) {\n\t\t\tcurrentNode.addGeneratedCode(generatedCode);\n\t\t\tcurrentSourceNodeLine++;\n\t\t} else {\n\t\t\tcurrentNode = new SourceNode(generatedCode, source, originalSource, linePosition);\n\t\t\tcurrentSourceNodeLine = linePosition + 1;\n\t\t\tnodes.push(currentNode);\n\t\t}\n\t}\n\tmappings.forEach(function(mapping, idx) {\n\t\tlet line = lines[idx];\n\t\tif(typeof line === 'undefined') return;\n\t\tif(idx !== lines.length - 1) line += \"\\n\";\n\t\tif(!mapping)\n\t\t\treturn addCode(line);\n\t\tmapping = { value: 0, rest: mapping };\n\t\tlet lineAdded = false;\n\t\twhile(mapping.rest)\n\t\t\tlineAdded = processMapping(mapping, line, lineAdded) || lineAdded;\n\t\tif(!lineAdded)\n\t\t\taddCode(line);\n\t});\n\tif(mappings.length < lines.length) {\n\t\tlet idx = mappings.length;\n\t\twhile(!lines[idx].trim() && idx < lines.length-1) {\n\t\t\taddCode(lines[idx] + \"\\n\");\n\t\t\tidx++;\n\t\t}\n\t\taddCode(lines.slice(idx).join(\"\\n\"));\n\t}\n\treturn new SourceListMap(nodes);\n\tfunction processMapping(mapping, line, ignore) {\n\t\tif(mapping.rest && mapping.rest[0] !== \",\") {\n\t\t\tbase64VLQ.decode(mapping.rest, mapping);\n\t\t}\n\t\tif(!mapping.rest)\n\t\t\treturn false;\n\t\tif(mapping.rest[0] === \",\") {\n\t\t\tmapping.rest = mapping.rest.substr(1);\n\t\t\treturn false;\n\t\t}\n\n\t\tbase64VLQ.decode(mapping.rest, mapping);\n\t\tconst sourceIdx = mapping.value + currentSourceIdx;\n\t\tcurrentSourceIdx = sourceIdx;\n\n\t\tlet linePosition;\n\t\tif(mapping.rest && mapping.rest[0] !== \",\") {\n\t\t\tbase64VLQ.decode(mapping.rest, mapping);\n\t\t\tlinePosition = mapping.value + currentLine;\n\t\t\tcurrentLine = linePosition;\n\t\t} else {\n\t\t\tlinePosition = currentLine;\n\t\t}\n\n\t\tif(mapping.rest) {\n\t\t\tconst next = mapping.rest.indexOf(\",\");\n\t\t\tmapping.rest = next === -1 ? \"\" : mapping.rest.substr(next);\n\t\t}\n\n\t\tif(!ignore) {\n\t\t\taddSource(line, sources ? sources[sourceIdx] : null, sourcesContent ? sourcesContent[sourceIdx] : null, linePosition)\n\t\t\treturn true;\n\t\t}\n\t}\n};\n"},"sourceMaps":null,"error":null,"hash":"095e56bf6dd53a02e3d6b5a3747f4466","cacheData":{"env":{}}}