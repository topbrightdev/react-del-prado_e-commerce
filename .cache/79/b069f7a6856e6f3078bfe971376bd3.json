{"id":"../node_modules/hpack.js/lib/hpack/decompressor.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/package.json","includedInParent":true,"mtime":1594306880054},{"name":"../hpack","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/decompressor.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack.js"},{"name":"inherits","loc":{"line":7,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/decompressor.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inherits/inherits_browser.js"},{"name":"readable-stream","loc":{"line":8,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/decompressor.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/readable-stream/readable-browser.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/hpack.js/lib/hpack/decompressor.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\nvar hpack = require('../hpack');\nvar utils = hpack.utils;\nvar decoder = hpack.decoder;\nvar table = hpack.table;\nvar assert = utils.assert;\n\nvar inherits = require('inherits');\nvar Duplex = require('readable-stream').Duplex;\n\nfunction Decompressor(options) {\n  Duplex.call(this, {\n    readableObjectMode: true\n  });\n\n  this._decoder = decoder.create();\n  this._table = table.create(options.table);\n}\ninherits(Decompressor, Duplex);\nmodule.exports = Decompressor;\n\nDecompressor.create = function create(options) {\n  return new Decompressor(options);\n};\n\nDecompressor.prototype._read = function _read() {\n  // We only push!\n};\n\nDecompressor.prototype._write = function _write(data, enc, cb) {\n  this._decoder.push(data);\n\n  cb(null);\n};\n\nDecompressor.prototype.execute = function execute(cb) {\n  while (!this._decoder.isEmpty()) {\n    try {\n      this._execute();\n    } catch (err) {\n      if (cb)\n        return done(err);\n      else\n        return this.emit('error', err);\n    }\n  }\n\n  if (cb)\n    done(null);\n\n  function done(err) {\n    process.nextTick(function() {\n      cb(err);\n    });\n  }\n};\n\nDecompressor.prototype.updateTableSize = function updateTableSize(size) {\n  this._table.updateSize(size);\n};\n\nDecompressor.prototype._execute = function _execute() {\n  var isIndexed = this._decoder.decodeBit();\n  if (isIndexed)\n    return this._processIndexed();\n\n  var isIncremental = this._decoder.decodeBit();\n  var neverIndex = 0;\n  if (!isIncremental) {\n    var isUpdate = this._decoder.decodeBit();\n    if (isUpdate)\n      return this._processUpdate();\n\n    neverIndex = this._decoder.decodeBit();\n  }\n\n  this._processLiteral(isIncremental, neverIndex);\n};\n\nDecompressor.prototype._processIndexed = function _processIndexed() {\n  var index = this._decoder.decodeInt();\n\n  var lookup = this._table.lookup(index);\n  this.push({ name: lookup.name, value: lookup.value, neverIndex: false });\n};\n\nDecompressor.prototype._processLiteral = function _processLiteral(inc, never) {\n  var index = this._decoder.decodeInt();\n\n  var name;\n  var nameSize;\n\n  // Literal header-name too\n  if (index === 0) {\n    name = this._decoder.decodeStr();\n    nameSize = name.length;\n    name = utils.stringify(name);\n  } else {\n    var lookup = this._table.lookup(index);\n    nameSize = lookup.nameSize;\n    name = lookup.name;\n  }\n\n  var value = this._decoder.decodeStr();\n  var valueSize = value.length;\n  value = utils.stringify(value);\n\n  if (inc)\n    this._table.add(name, value, nameSize, valueSize);\n\n  this.push({ name: name, value: value, neverIndex: never !== 0});\n};\n\nDecompressor.prototype._processUpdate = function _processUpdate() {\n  var size = this._decoder.decodeInt();\n  this.updateTableSize(size);\n};\n"},"sourceMaps":null,"error":null,"hash":"64f445189bf5639e7f6fa49de20a35ee","cacheData":{"env":{}}}