{"id":"../node_modules/webpack/node_modules/chokidar/lib/nodefs-handler.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/chokidar/package.json","includedInParent":true,"mtime":1594578778153},{"name":"fs","loc":{"line":3,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/chokidar/lib/nodefs-handler.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":4,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/chokidar/lib/nodefs-handler.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"util","loc":{"line":5,"column":30},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/chokidar/lib/nodefs-handler.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"is-binary-path","loc":{"line":6,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/chokidar/lib/nodefs-handler.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/is-binary-path/index.js"},{"name":"./constants","loc":{"line":23,"column":12},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/chokidar/lib/nodefs-handler.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/chokidar/lib/constants.js"}],"generated":{"js":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar fs = require('fs');\n\nvar sysPath = require('path');\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar isBinaryPath = require('is-binary-path');\n\nvar _require2 = require('./constants'),\n    isWindows = _require2.isWindows,\n    EMPTY_FN = _require2.EMPTY_FN,\n    EMPTY_STR = _require2.EMPTY_STR,\n    KEY_LISTENERS = _require2.KEY_LISTENERS,\n    KEY_ERR = _require2.KEY_ERR,\n    KEY_RAW = _require2.KEY_RAW,\n    HANDLER_KEYS = _require2.HANDLER_KEYS,\n    EV_CHANGE = _require2.EV_CHANGE,\n    EV_ADD = _require2.EV_ADD,\n    EV_ADD_DIR = _require2.EV_ADD_DIR,\n    EV_ERROR = _require2.EV_ERROR,\n    STR_DATA = _require2.STR_DATA,\n    STR_END = _require2.STR_END,\n    BRACE_START = _require2.BRACE_START,\n    STAR = _require2.STAR;\n\nvar THROTTLE_MODE_WATCH = 'watch';\nvar open = promisify(fs.open);\nvar stat = promisify(fs.stat);\nvar lstat = promisify(fs.lstat);\nvar close = promisify(fs.close);\nvar fsrealpath = promisify(fs.realpath);\nvar statMethods = {\n  lstat,\n  stat\n}; // TODO: emit errors properly. Example: EMFILE on Macos.\n\nvar foreach = function foreach(val, fn) {\n  if (val instanceof Set) {\n    val.forEach(fn);\n  } else {\n    fn(val);\n  }\n};\n\nvar addAndConvert = function addAndConvert(main, prop, item) {\n  var container = main[prop];\n\n  if (!(container instanceof Set)) {\n    main[prop] = container = new Set([container]);\n  }\n\n  container.add(item);\n};\n\nvar clearItem = function clearItem(cont) {\n  return function (key) {\n    var set = cont[key];\n\n    if (set instanceof Set) {\n      set.clear();\n    } else {\n      delete cont[key];\n    }\n  };\n};\n\nvar delFromSet = function delFromSet(main, prop, item) {\n  var container = main[prop];\n\n  if (container instanceof Set) {\n    container.delete(item);\n  } else if (container === item) {\n    delete main[prop];\n  }\n};\n\nvar isEmptySet = function isEmptySet(val) {\n  return val instanceof Set ? val.size === 0 : !val;\n};\n/**\n * @typedef {String} Path\n */\n// fs_watch helpers\n// object to hold per-process fs_watch instances\n// (may be shared across chokidar FSWatcher instances)\n\n/**\n * @typedef {Object} FsWatchContainer\n * @property {Set} listeners\n * @property {Set} errHandlers\n * @property {Set} rawEmitters\n * @property {fs.FSWatcher=} watcher\n * @property {Boolean=} watcherUnusable\n */\n\n/**\n * @type {Map<String,FsWatchContainer>}\n */\n\n\nvar FsWatchInstances = new Map();\n/**\n * Instantiates the fs_watch interface\n * @param {String} path to be watched\n * @param {Object} options to be passed to fs_watch\n * @param {Function} listener main event handler\n * @param {Function} errHandler emits info about errors\n * @param {Function} emitRaw emits raw event data\n * @returns {fs.FSWatcher} new fsevents instance\n */\n\nfunction createFsWatchInstance(path, options, listener, errHandler, emitRaw) {\n  var handleEvent = function handleEvent(rawEvent, evPath) {\n    listener(path);\n    emitRaw(rawEvent, evPath, {\n      watchedPath: path\n    }); // emit based on events occurring for files from a directory's watcher in\n    // case the file's watcher misses it (and rely on throttling to de-dupe)\n\n    if (evPath && path !== evPath) {\n      fsWatchBroadcast(sysPath.resolve(path, evPath), KEY_LISTENERS, sysPath.join(path, evPath));\n    }\n  };\n\n  try {\n    return fs.watch(path, options, handleEvent);\n  } catch (error) {\n    errHandler(error);\n  }\n}\n/**\n * Helper for passing fs_watch event data to a collection of listeners\n * @param {Path} fullPath absolute path bound to fs_watch instance\n * @param {String} type listener type\n * @param {*=} val1 arguments to be passed to listeners\n * @param {*=} val2\n * @param {*=} val3\n */\n\n\nvar fsWatchBroadcast = function fsWatchBroadcast(fullPath, type, val1, val2, val3) {\n  var cont = FsWatchInstances.get(fullPath);\n  if (!cont) return;\n  foreach(cont[type], function (listener) {\n    listener(val1, val2, val3);\n  });\n};\n/**\n * Instantiates the fs_watch interface or binds listeners\n * to an existing one covering the same file system entry\n * @param {String} path\n * @param {String} fullPath absolute path\n * @param {Object} options to be passed to fs_watch\n * @param {Object} handlers container for event listener functions\n */\n\n\nvar setFsWatchListener = function setFsWatchListener(path, fullPath, options, handlers) {\n  var listener = handlers.listener,\n      errHandler = handlers.errHandler,\n      rawEmitter = handlers.rawEmitter;\n  var cont = FsWatchInstances.get(fullPath);\n  /** @type {fs.FSWatcher=} */\n\n  var watcher;\n\n  if (!options.persistent) {\n    watcher = createFsWatchInstance(path, options, listener, errHandler, rawEmitter);\n    return watcher.close.bind(watcher);\n  }\n\n  if (cont) {\n    addAndConvert(cont, KEY_LISTENERS, listener);\n    addAndConvert(cont, KEY_ERR, errHandler);\n    addAndConvert(cont, KEY_RAW, rawEmitter);\n  } else {\n    watcher = createFsWatchInstance(path, options, fsWatchBroadcast.bind(null, fullPath, KEY_LISTENERS), errHandler, // no need to use broadcast here\n    fsWatchBroadcast.bind(null, fullPath, KEY_RAW));\n    if (!watcher) return;\n    watcher.on(EV_ERROR, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(error) {\n        var broadcastErr, fd;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                broadcastErr = fsWatchBroadcast.bind(null, fullPath, KEY_ERR);\n                cont.watcherUnusable = true; // documented since Node 10.4.1\n                // Workaround for https://github.com/joyent/node/issues/4337\n\n                if (!(isWindows && error.code === 'EPERM')) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.prev = 3;\n                _context.next = 6;\n                return open(path, 'r');\n\n              case 6:\n                fd = _context.sent;\n                _context.next = 9;\n                return close(fd);\n\n              case 9:\n                broadcastErr(error);\n                _context.next = 14;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](3);\n\n              case 14:\n                _context.next = 17;\n                break;\n\n              case 16:\n                broadcastErr(error);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 12]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    cont = {\n      listeners: listener,\n      errHandlers: errHandler,\n      rawEmitters: rawEmitter,\n      watcher\n    };\n    FsWatchInstances.set(fullPath, cont);\n  } // const index = cont.listeners.indexOf(listener);\n  // removes this instance's listeners and closes the underlying fs_watch\n  // instance if there are no more listeners left\n\n\n  return function () {\n    delFromSet(cont, KEY_LISTENERS, listener);\n    delFromSet(cont, KEY_ERR, errHandler);\n    delFromSet(cont, KEY_RAW, rawEmitter);\n\n    if (isEmptySet(cont.listeners)) {\n      // Check to protect against issue gh-730.\n      // if (cont.watcherUnusable) {\n      cont.watcher.close(); // }\n\n      FsWatchInstances.delete(fullPath);\n      HANDLER_KEYS.forEach(clearItem(cont));\n      cont.watcher = undefined;\n      Object.freeze(cont);\n    }\n  };\n}; // fs_watchFile helpers\n// object to hold per-process fs_watchFile instances\n// (may be shared across chokidar FSWatcher instances)\n\n\nvar FsWatchFileInstances = new Map();\n/**\n * Instantiates the fs_watchFile interface or binds listeners\n * to an existing one covering the same file system entry\n * @param {String} path to be watched\n * @param {String} fullPath absolute path\n * @param {Object} options options to be passed to fs_watchFile\n * @param {Object} handlers container for event listener functions\n * @returns {Function} closer\n */\n\nvar setFsWatchFileListener = function setFsWatchFileListener(path, fullPath, options, handlers) {\n  var listener = handlers.listener,\n      rawEmitter = handlers.rawEmitter;\n  var cont = FsWatchFileInstances.get(fullPath);\n  /* eslint-disable no-unused-vars, prefer-destructuring */\n\n  var listeners = new Set();\n  var rawEmitters = new Set();\n  var copts = cont && cont.options;\n\n  if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {\n    // \"Upgrade\" the watcher to persistence or a quicker interval.\n    // This creates some unlikely edge case issues if the user mixes\n    // settings in a very weird way, but solving for those cases\n    // doesn't seem worthwhile for the added complexity.\n    listeners = cont.listeners;\n    rawEmitters = cont.rawEmitters;\n    fs.unwatchFile(fullPath);\n    cont = undefined;\n  }\n  /* eslint-enable no-unused-vars, prefer-destructuring */\n\n\n  if (cont) {\n    addAndConvert(cont, KEY_LISTENERS, listener);\n    addAndConvert(cont, KEY_RAW, rawEmitter);\n  } else {\n    // TODO\n    // listeners.add(listener);\n    // rawEmitters.add(rawEmitter);\n    cont = {\n      listeners: listener,\n      rawEmitters: rawEmitter,\n      options,\n      watcher: fs.watchFile(fullPath, options, function (curr, prev) {\n        foreach(cont.rawEmitters, function (rawEmitter) {\n          rawEmitter(EV_CHANGE, fullPath, {\n            curr,\n            prev\n          });\n        });\n        var currmtime = curr.mtimeMs;\n\n        if (curr.size !== prev.size || currmtime > prev.mtimeMs || currmtime === 0) {\n          foreach(cont.listeners, function (listener) {\n            return listener(path, curr);\n          });\n        }\n      })\n    };\n    FsWatchFileInstances.set(fullPath, cont);\n  } // const index = cont.listeners.indexOf(listener);\n  // Removes this instance's listeners and closes the underlying fs_watchFile\n  // instance if there are no more listeners left.\n\n\n  return function () {\n    delFromSet(cont, KEY_LISTENERS, listener);\n    delFromSet(cont, KEY_RAW, rawEmitter);\n\n    if (isEmptySet(cont.listeners)) {\n      FsWatchFileInstances.delete(fullPath);\n      fs.unwatchFile(fullPath);\n      cont.options = cont.watcher = undefined;\n      Object.freeze(cont);\n    }\n  };\n};\n/**\n * @mixin\n */\n\n\nvar NodeFsHandler = /*#__PURE__*/function () {\n  /**\n   * @param {import(\"../index\").FSWatcher} fsW\n   */\n  function NodeFsHandler(fsW) {\n    _classCallCheck(this, NodeFsHandler);\n\n    this.fsw = fsW;\n\n    this._boundHandleError = function (error) {\n      return fsW._handleError(error);\n    };\n  }\n  /**\n   * Watch file for changes with fs_watchFile or fs_watch.\n   * @param {String} path to file or dir\n   * @param {Function} listener on fs change\n   * @returns {Function} closer for the watcher instance\n   */\n\n\n  _createClass(NodeFsHandler, [{\n    key: \"_watchWithNodeFs\",\n    value: function _watchWithNodeFs(path, listener) {\n      var opts = this.fsw.options;\n      var directory = sysPath.dirname(path);\n      var basename = sysPath.basename(path);\n\n      var parent = this.fsw._getWatchedDir(directory);\n\n      parent.add(basename);\n      var absolutePath = sysPath.resolve(path);\n      var options = {\n        persistent: opts.persistent\n      };\n      if (!listener) listener = EMPTY_FN;\n      var closer;\n\n      if (opts.usePolling) {\n        options.interval = opts.enableBinaryInterval && isBinaryPath(basename) ? opts.binaryInterval : opts.interval;\n        closer = setFsWatchFileListener(path, absolutePath, options, {\n          listener,\n          rawEmitter: this.fsw._emitRaw\n        });\n      } else {\n        closer = setFsWatchListener(path, absolutePath, options, {\n          listener,\n          errHandler: this._boundHandleError,\n          rawEmitter: this.fsw._emitRaw\n        });\n      }\n\n      return closer;\n    }\n    /**\n     * Watch a file and emit add event if warranted.\n     * @param {Path} file Path\n     * @param {fs.Stats} stats result of fs_stat\n     * @param {Boolean} initialAdd was the file added at watch instantiation?\n     * @returns {Function} closer for the watcher instance\n     */\n\n  }, {\n    key: \"_handleFile\",\n    value: function _handleFile(file, stats, initialAdd) {\n      var _this = this;\n\n      if (this.fsw.closed) {\n        return;\n      }\n\n      var dirname = sysPath.dirname(file);\n      var basename = sysPath.basename(file);\n\n      var parent = this.fsw._getWatchedDir(dirname); // stats is always present\n\n\n      var prevStats = stats; // if the file is already being watched, do nothing\n\n      if (parent.has(basename)) return; // kick off the watcher\n\n      var closer = this._watchWithNodeFs(file, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(path, newStats) {\n          var _newStats, at, mt, _at, _mt;\n\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (_this.fsw._throttle(THROTTLE_MODE_WATCH, file, 5)) {\n                    _context2.next = 2;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 2:\n                  if (!(!newStats || newStats.mtimeMs === 0)) {\n                    _context2.next = 20;\n                    break;\n                  }\n\n                  _context2.prev = 3;\n                  _context2.next = 6;\n                  return stat(file);\n\n                case 6:\n                  _newStats = _context2.sent;\n\n                  if (!_this.fsw.closed) {\n                    _context2.next = 9;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 9:\n                  // Check that change event was not fired because of changed only accessTime.\n                  at = _newStats.atimeMs;\n                  mt = _newStats.mtimeMs;\n\n                  if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n                    _this.fsw._emit(EV_CHANGE, file, _newStats);\n                  }\n\n                  prevStats = _newStats;\n                  _context2.next = 18;\n                  break;\n\n                case 15:\n                  _context2.prev = 15;\n                  _context2.t0 = _context2[\"catch\"](3);\n\n                  // Fix issues where mtime is null but file is still present\n                  _this.fsw._remove(dirname, basename);\n\n                case 18:\n                  _context2.next = 21;\n                  break;\n\n                case 20:\n                  if (parent.has(basename)) {\n                    // Check that change event was not fired because of changed only accessTime.\n                    _at = newStats.atimeMs;\n                    _mt = newStats.mtimeMs;\n\n                    if (!_at || _at <= _mt || _mt !== prevStats.mtimeMs) {\n                      _this.fsw._emit(EV_CHANGE, file, newStats);\n                    }\n\n                    prevStats = newStats;\n                  }\n\n                case 21:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[3, 15]]);\n        }));\n\n        return function (_x2, _x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }()); // emit an add event if we're supposed to\n\n\n      if (!(initialAdd && this.fsw.options.ignoreInitial) && this.fsw._isntIgnored(file)) {\n        if (!this.fsw._throttle(EV_ADD, file, 0)) return;\n\n        this.fsw._emit(EV_ADD, file, stats);\n      }\n\n      return closer;\n    }\n    /**\n     * Handle symlinks encountered while reading a dir.\n     * @param {Object} entry returned by readdirp\n     * @param {String} directory path of dir being read\n     * @param {String} path of this item\n     * @param {String} item basename of this item\n     * @returns {Promise<Boolean>} true if no more processing is needed for this entry.\n     */\n\n  }, {\n    key: \"_handleSymlink\",\n    value: function () {\n      var _handleSymlink2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(entry, directory, path, item) {\n        var full, dir, linkPath;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.fsw.closed) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                full = entry.fullPath;\n                dir = this.fsw._getWatchedDir(directory);\n\n                if (this.fsw.options.followSymlinks) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                // watch symlink directly (don't follow) and detect changes\n                this.fsw._incrReadyCount();\n\n                _context3.next = 8;\n                return fsrealpath(path);\n\n              case 8:\n                linkPath = _context3.sent;\n\n                if (!this.fsw.closed) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 11:\n                if (dir.has(item)) {\n                  if (this.fsw._symlinkPaths.get(full) !== linkPath) {\n                    this.fsw._symlinkPaths.set(full, linkPath);\n\n                    this.fsw._emit(EV_CHANGE, path, entry.stats);\n                  }\n                } else {\n                  dir.add(item);\n\n                  this.fsw._symlinkPaths.set(full, linkPath);\n\n                  this.fsw._emit(EV_ADD, path, entry.stats);\n                }\n\n                this.fsw._emitReady();\n\n                return _context3.abrupt(\"return\", true);\n\n              case 14:\n                if (!this.fsw._symlinkPaths.has(full)) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", true);\n\n              case 16:\n                this.fsw._symlinkPaths.set(full, true);\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _handleSymlink(_x4, _x5, _x6, _x7) {\n        return _handleSymlink2.apply(this, arguments);\n      }\n\n      return _handleSymlink;\n    }()\n  }, {\n    key: \"_handleRead\",\n    value: function _handleRead(directory, initialAdd, wh, target, dir, depth, throttler) {\n      var _this2 = this;\n\n      // Normalize the directory name on Windows\n      directory = sysPath.join(directory, EMPTY_STR);\n\n      if (!wh.hasGlob) {\n        throttler = this.fsw._throttle('readdir', directory, 1000);\n        if (!throttler) return;\n      }\n\n      var previous = this.fsw._getWatchedDir(wh.path);\n\n      var current = new Set();\n\n      var stream = this.fsw._readdirp(directory, {\n        fileFilter: function fileFilter(entry) {\n          return wh.filterPath(entry);\n        },\n        directoryFilter: function directoryFilter(entry) {\n          return wh.filterDir(entry);\n        },\n        depth: 0\n      }).on(STR_DATA, /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(entry) {\n          var item, path;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  if (!_this2.fsw.closed) {\n                    _context4.next = 3;\n                    break;\n                  }\n\n                  stream = undefined;\n                  return _context4.abrupt(\"return\");\n\n                case 3:\n                  item = entry.path;\n                  path = sysPath.join(directory, item);\n                  current.add(item);\n                  _context4.t0 = entry.stats.isSymbolicLink();\n\n                  if (!_context4.t0) {\n                    _context4.next = 11;\n                    break;\n                  }\n\n                  _context4.next = 10;\n                  return _this2._handleSymlink(entry, directory, path, item);\n\n                case 10:\n                  _context4.t0 = _context4.sent;\n\n                case 11:\n                  if (!_context4.t0) {\n                    _context4.next = 13;\n                    break;\n                  }\n\n                  return _context4.abrupt(\"return\");\n\n                case 13:\n                  if (!_this2.fsw.closed) {\n                    _context4.next = 16;\n                    break;\n                  }\n\n                  stream = undefined;\n                  return _context4.abrupt(\"return\");\n\n                case 16:\n                  // Files that present in current directory snapshot\n                  // but absent in previous are added to watch list and\n                  // emit `add` event.\n                  if (item === target || !target && !previous.has(item)) {\n                    _this2.fsw._incrReadyCount(); // ensure relativeness of path is preserved in case of watcher reuse\n\n\n                    path = sysPath.join(dir, sysPath.relative(dir, path));\n\n                    _this2._addToNodeFs(path, initialAdd, wh, depth + 1);\n                  }\n\n                case 17:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x8) {\n          return _ref3.apply(this, arguments);\n        };\n      }()).on(EV_ERROR, this._boundHandleError);\n\n      return new Promise(function (resolve) {\n        return stream.once(STR_END, function () {\n          if (_this2.fsw.closed) {\n            stream = undefined;\n            return;\n          }\n\n          var wasThrottled = throttler ? throttler.clear() : false;\n          resolve(); // Files that absent in current directory snapshot\n          // but present in previous emit `remove` event\n          // and are removed from @watched[directory].\n\n          previous.getChildren().filter(function (item) {\n            return item !== directory && !current.has(item) && ( // in case of intersecting globs;\n            // a path may have been filtered out of this readdir, but\n            // shouldn't be removed because it matches a different glob\n            !wh.hasGlob || wh.filterPath({\n              fullPath: sysPath.resolve(directory, item)\n            }));\n          }).forEach(function (item) {\n            _this2.fsw._remove(directory, item);\n          });\n          stream = undefined; // one more time for any missed in case changes came in extremely quickly\n\n          if (wasThrottled) _this2._handleRead(directory, false, wh, target, dir, depth, throttler);\n        });\n      });\n    }\n    /**\n     * Read directory to add / remove files from `@watched` list and re-read it on change.\n     * @param {String} dir fs path\n     * @param {fs.Stats} stats\n     * @param {Boolean} initialAdd\n     * @param {Number} depth relative to user-supplied path\n     * @param {String} target child path targeted for watch\n     * @param {Object} wh Common watch helpers for this path\n     * @param {String} realpath\n     * @returns {Promise<Function>} closer for the watcher instance.\n     */\n\n  }, {\n    key: \"_handleDir\",\n    value: function () {\n      var _handleDir2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(dir, stats, initialAdd, depth, target, wh, realpath) {\n        var _this3 = this;\n\n        var parentDir, tracked, throttler, closer, oDepth;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                parentDir = this.fsw._getWatchedDir(sysPath.dirname(dir));\n                tracked = parentDir.has(sysPath.basename(dir));\n\n                if (!(initialAdd && this.fsw.options.ignoreInitial) && !target && !tracked) {\n                  if (!wh.hasGlob || wh.globFilter(dir)) this.fsw._emit(EV_ADD_DIR, dir, stats);\n                } // ensure dir is tracked (harmless if redundant)\n\n\n                parentDir.add(sysPath.basename(dir));\n\n                this.fsw._getWatchedDir(dir);\n\n                oDepth = this.fsw.options.depth;\n\n                if (!((oDepth == null || depth <= oDepth) && !this.fsw._symlinkPaths.has(realpath))) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                if (target) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                _context5.next = 10;\n                return this._handleRead(dir, initialAdd, wh, target, dir, depth, throttler);\n\n              case 10:\n                if (!this.fsw.closed) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 12:\n                closer = this._watchWithNodeFs(dir, function (dirPath, stats) {\n                  // if current directory is removed, do nothing\n                  if (stats && stats.mtimeMs === 0) return;\n\n                  _this3._handleRead(dirPath, false, wh, target, dir, depth, throttler);\n                });\n\n              case 13:\n                return _context5.abrupt(\"return\", closer);\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _handleDir(_x9, _x10, _x11, _x12, _x13, _x14, _x15) {\n        return _handleDir2.apply(this, arguments);\n      }\n\n      return _handleDir;\n    }()\n    /**\n     * Handle added file, directory, or glob pattern.\n     * Delegates call to _handleFile / _handleDir after checks.\n     * @param {String} path to file or ir\n     * @param {Boolean} initialAdd was the file added at watch instantiation?\n     * @param {Object} priorWh depth relative to user-supplied path\n     * @param {Number} depth Child path actually targeted for watch\n     * @param {String=} target Child path actually targeted for watch\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_addToNodeFs\",\n    value: function () {\n      var _addToNodeFs2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(path, initialAdd, priorWh, depth, target) {\n        var ready, wh, stats, follow, closer, targetPath, _targetPath, parent;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                ready = this.fsw._emitReady;\n\n                if (!(this.fsw._isIgnored(path) || this.fsw.closed)) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                ready();\n                return _context6.abrupt(\"return\", false);\n\n              case 4:\n                wh = this.fsw._getWatchHelpers(path, depth);\n\n                if (!wh.hasGlob && priorWh) {\n                  wh.hasGlob = priorWh.hasGlob;\n                  wh.globFilter = priorWh.globFilter;\n\n                  wh.filterPath = function (entry) {\n                    return priorWh.filterPath(entry);\n                  };\n\n                  wh.filterDir = function (entry) {\n                    return priorWh.filterDir(entry);\n                  };\n                } // evaluate what is at the path we're being asked to watch\n\n\n                _context6.prev = 6;\n                _context6.next = 9;\n                return statMethods[wh.statMethod](wh.watchPath);\n\n              case 9:\n                stats = _context6.sent;\n\n                if (!this.fsw.closed) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 12:\n                if (!this.fsw._isIgnored(wh.watchPath, stats)) {\n                  _context6.next = 15;\n                  break;\n                }\n\n                ready();\n                return _context6.abrupt(\"return\", false);\n\n              case 15:\n                follow = this.fsw.options.followSymlinks && !path.includes(STAR) && !path.includes(BRACE_START);\n\n                if (!stats.isDirectory()) {\n                  _context6.next = 35;\n                  break;\n                }\n\n                if (!follow) {\n                  _context6.next = 23;\n                  break;\n                }\n\n                _context6.next = 20;\n                return fsrealpath(path);\n\n              case 20:\n                _context6.t0 = _context6.sent;\n                _context6.next = 24;\n                break;\n\n              case 23:\n                _context6.t0 = path;\n\n              case 24:\n                targetPath = _context6.t0;\n\n                if (!this.fsw.closed) {\n                  _context6.next = 27;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 27:\n                _context6.next = 29;\n                return this._handleDir(wh.watchPath, stats, initialAdd, depth, target, wh, targetPath);\n\n              case 29:\n                closer = _context6.sent;\n\n                if (!this.fsw.closed) {\n                  _context6.next = 32;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 32:\n                // preserve this symlink's target path\n                if (path !== targetPath && targetPath !== undefined) {\n                  this.fsw._symlinkPaths.set(targetPath, true);\n                }\n\n                _context6.next = 58;\n                break;\n\n              case 35:\n                if (!stats.isSymbolicLink()) {\n                  _context6.next = 57;\n                  break;\n                }\n\n                if (!follow) {\n                  _context6.next = 42;\n                  break;\n                }\n\n                _context6.next = 39;\n                return fsrealpath(path);\n\n              case 39:\n                _context6.t1 = _context6.sent;\n                _context6.next = 43;\n                break;\n\n              case 42:\n                _context6.t1 = path;\n\n              case 43:\n                _targetPath = _context6.t1;\n\n                if (!this.fsw.closed) {\n                  _context6.next = 46;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 46:\n                parent = sysPath.dirname(wh.watchPath);\n\n                this.fsw._getWatchedDir(parent).add(wh.watchPath);\n\n                this.fsw._emit(EV_ADD, wh.watchPath, stats);\n\n                _context6.next = 51;\n                return this._handleDir(parent, stats, initialAdd, depth, path, wh, _targetPath);\n\n              case 51:\n                closer = _context6.sent;\n\n                if (!this.fsw.closed) {\n                  _context6.next = 54;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 54:\n                // preserve this symlink's target path\n                if (_targetPath !== undefined) {\n                  this.fsw._symlinkPaths.set(sysPath.resolve(path), _targetPath);\n                }\n\n                _context6.next = 58;\n                break;\n\n              case 57:\n                closer = this._handleFile(wh.watchPath, stats, initialAdd);\n\n              case 58:\n                ready();\n\n                this.fsw._addPathCloser(path, closer);\n\n                return _context6.abrupt(\"return\", false);\n\n              case 63:\n                _context6.prev = 63;\n                _context6.t2 = _context6[\"catch\"](6);\n\n                if (!this.fsw._handleError(_context6.t2)) {\n                  _context6.next = 68;\n                  break;\n                }\n\n                ready();\n                return _context6.abrupt(\"return\", path);\n\n              case 68:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[6, 63]]);\n      }));\n\n      function _addToNodeFs(_x16, _x17, _x18, _x19, _x20) {\n        return _addToNodeFs2.apply(this, arguments);\n      }\n\n      return _addToNodeFs;\n    }()\n  }]);\n\n  return NodeFsHandler;\n}();\n\nmodule.exports = NodeFsHandler;"},"sourceMaps":null,"error":null,"hash":"6ca3097abe568bf85ddad9fe2110fda4","cacheData":{"env":{}}}