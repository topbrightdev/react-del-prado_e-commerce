{"id":"../node_modules/loader-utils/lib/getHashDigest.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/loader-utils/package.json","includedInParent":true,"mtime":1594570879294},{"name":"big.js","loc":{"line":20,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/loader-utils/lib/getHashDigest.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/big.js/big.js"},{"name":"crypto","loc":{"line":42,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/loader-utils/lib/getHashDigest.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/crypto-browserify/index.js"}],"generated":{"js":"\"use strict\";\n\nconst baseEncodeTables = {\n  26: \"abcdefghijklmnopqrstuvwxyz\",\n  32: \"123456789abcdefghjkmnpqrstuvwxyz\",\n  // no 0lio\n  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\",\n  // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\",\n  // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\"\n};\n\nfunction encodeBufferToBase(buffer, base) {\n  const encodeTable = baseEncodeTables[base];\n  if (!encodeTable) throw new Error(\"Unknown encoding base\" + base);\n  const readLength = buffer.length;\n\n  const Big = require(\"big.js\");\n\n  Big.RM = Big.DP = 0;\n  let b = new Big(0);\n\n  for (let i = readLength - 1; i >= 0; i--) {\n    b = b.times(256).plus(buffer[i]);\n  }\n\n  let output = \"\";\n\n  while (b.gt(0)) {\n    output = encodeTable[b.mod(base)] + output;\n    b = b.div(base);\n  }\n\n  Big.DP = 20;\n  Big.RM = 1;\n  return output;\n}\n\nfunction getHashDigest(buffer, hashType, digestType, maxLength) {\n  hashType = hashType || \"md5\";\n  maxLength = maxLength || 9999;\n\n  const hash = require(\"crypto\").createHash(hashType);\n\n  hash.update(buffer);\n\n  if (digestType === \"base26\" || digestType === \"base32\" || digestType === \"base36\" || digestType === \"base49\" || digestType === \"base52\" || digestType === \"base58\" || digestType === \"base62\" || digestType === \"base64\") {\n    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(0, maxLength);\n  } else {\n    return hash.digest(digestType || \"hex\").substr(0, maxLength);\n  }\n}\n\nmodule.exports = getHashDigest;"},"sourceMaps":null,"error":null,"hash":"1a97bd45ec321738f064cb7af67adade","cacheData":{"env":{}}}