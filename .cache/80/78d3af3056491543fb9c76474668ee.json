{"id":"../node_modules/ajv-keywords/keywords/transform.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/ajv-keywords/package.json","includedInParent":true,"mtime":1594570879586}],"generated":{"js":"'use strict';\n\nmodule.exports = function defFunc (ajv) {\n  defFunc.definition = {\n    type: 'string',\n    errors: false,\n    modifying: true,\n    valid: true,\n    compile: function (schema, parentSchema) {\n\n      // build hash table to enum values\n      var hashtable = {};\n\n      if (schema.indexOf('toEnumCase') !== -1) {\n        // requires `enum` in schema\n        if (!parentSchema.enum)\n          throw new Error('Missing enum. To use `transform:[\"toEnumCase\"]`, `enum:[...]` is required.');\n        for (var i = parentSchema.enum.length; i--; i) {\n          var v = parentSchema.enum[i];\n          if (typeof v !== 'string') continue;\n          var k = makeHashTableKey(v);\n          // requires all `enum` values have unique keys\n          if (hashtable[k])\n            throw new Error('Invalid enum uniqueness. To use `transform:[\"toEnumCase\"]`, all values must be unique when case insensitive.');\n          hashtable[k] = v;\n        }\n      }\n\n      var transform = {\n        trimLeft: function (value) {\n          return value.replace(/^[\\s]+/, '');\n        },\n        trimRight: function (value) {\n          return value.replace(/[\\s]+$/, '');\n        },\n        trim: function (value) {\n          return value.trim();\n        },\n        toLowerCase: function (value) {\n          return value.toLowerCase();\n        },\n        toUpperCase: function (value) {\n          return value.toUpperCase();\n        },\n        toEnumCase: function (value) {\n          return hashtable[makeHashTableKey(value)] || value;\n        }\n      };\n\n      return function (value, objectKey, object, key) {\n        // skip if value only\n        if (!object) return;\n\n        // apply transform in order provided\n        for (var j = 0, l = schema.length; j < l; j++) {\n          if (typeof object[key] !== 'string') continue;\n          object[key] = transform[schema[j]](object[key]);\n        }\n      };\n    },\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string',\n        enum: [\n          'trimLeft', 'trimRight', 'trim',\n          'toLowerCase', 'toUpperCase', 'toEnumCase'\n        ]\n      }\n    }\n  };\n\n  ajv.addKeyword('transform', defFunc.definition);\n  return ajv;\n\n  function makeHashTableKey (value) {\n    return value.toLowerCase();\n  }\n};\n"},"sourceMaps":null,"error":null,"hash":"84ae8346b9fb7c8e966b2ba679447197","cacheData":{"env":{}}}