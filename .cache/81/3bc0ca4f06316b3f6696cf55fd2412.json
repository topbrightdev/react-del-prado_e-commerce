{"id":"../node_modules/opn/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/opn/package.json","includedInParent":true,"mtime":1594306880334},{"name":"path","loc":{"line":2,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/opn/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"child_process","loc":{"line":3,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/opn/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"is-wsl","loc":{"line":4,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/opn/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/is-wsl/index.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/opn/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\nvar __dirname = \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/opn\";\n'use strict';\n\nconst path = require('path');\n\nconst childProcess = require('child_process');\n\nconst isWsl = require('is-wsl');\n\nmodule.exports = (target, opts) => {\n  if (typeof target !== 'string') {\n    return Promise.reject(new Error('Expected a `target`'));\n  }\n\n  opts = Object.assign({\n    wait: true\n  }, opts);\n  let cmd;\n  let appArgs = [];\n  let args = [];\n  const cpOpts = {};\n\n  if (Array.isArray(opts.app)) {\n    appArgs = opts.app.slice(1);\n    opts.app = opts.app[0];\n  }\n\n  if (process.platform === 'darwin') {\n    cmd = 'open';\n\n    if (opts.wait) {\n      args.push('-W');\n    }\n\n    if (opts.app) {\n      args.push('-a', opts.app);\n    }\n  } else if (process.platform === 'win32' || isWsl) {\n    cmd = 'cmd' + (isWsl ? '.exe' : '');\n    args.push('/c', 'start', '\"\"', '/b');\n    target = target.replace(/&/g, '^&');\n\n    if (opts.wait) {\n      args.push('/wait');\n    }\n\n    if (opts.app) {\n      args.push(opts.app);\n    }\n\n    if (appArgs.length > 0) {\n      args = args.concat(appArgs);\n    }\n  } else {\n    if (opts.app) {\n      cmd = opts.app;\n    } else {\n      cmd = process.platform === 'android' ? 'xdg-open' : path.join(__dirname, 'xdg-open');\n    }\n\n    if (appArgs.length > 0) {\n      args = args.concat(appArgs);\n    }\n\n    if (!opts.wait) {\n      // `xdg-open` will block the process unless\n      // stdio is ignored and it's detached from the parent\n      // even if it's unref'd\n      cpOpts.stdio = 'ignore';\n      cpOpts.detached = true;\n    }\n  }\n\n  args.push(target);\n\n  if (process.platform === 'darwin' && appArgs.length > 0) {\n    args.push('--args');\n    args = args.concat(appArgs);\n  }\n\n  const cp = childProcess.spawn(cmd, args, cpOpts);\n\n  if (opts.wait) {\n    return new Promise((resolve, reject) => {\n      cp.once('error', reject);\n      cp.once('close', code => {\n        if (code > 0) {\n          reject(new Error('Exited with code ' + code));\n          return;\n        }\n\n        resolve(cp);\n      });\n    });\n  }\n\n  cp.unref();\n  return Promise.resolve(cp);\n};"},"sourceMaps":null,"error":null,"hash":"5c274d6e669fa789dea2bc4b8a9974e9","cacheData":{"env":{}}}