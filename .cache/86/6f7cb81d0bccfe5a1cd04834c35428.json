{"id":"../node_modules/@csstools/convert-colors/lib/util.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/@csstools/convert-colors/package.json","includedInParent":true,"mtime":1594306879514}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rgb2hue = rgb2hue;\nexports.hue2rgb = hue2rgb;\nexports.rgb2value = rgb2value;\nexports.rgb2whiteness = rgb2whiteness;\nexports.matrix = matrix;\nexports.kappa = exports.epsilon = exports.wd50Z = exports.wd50Y = exports.wd50X = void 0;\n\n/* Convert between RGB and Hue\n/* ========================================================================== */\nfunction rgb2hue(rgbR, rgbG, rgbB, fallbackhue = 0) {\n  const value = rgb2value(rgbR, rgbG, rgbB);\n  const whiteness = rgb2whiteness(rgbR, rgbG, rgbB);\n  const delta = value - whiteness;\n\n  if (delta) {\n    // calculate segment\n    const segment = value === rgbR ? (rgbG - rgbB) / delta : value === rgbG ? (rgbB - rgbR) / delta : (rgbR - rgbG) / delta; // calculate shift\n\n    const shift = value === rgbR ? segment < 0 ? 360 / 60 : 0 / 60 : value === rgbG ? 120 / 60 : 240 / 60; // calculate hue\n\n    const hue = (segment + shift) * 60;\n    return hue;\n  } else {\n    // otherwise return the fallback hue\n    return fallbackhue;\n  }\n}\n\nfunction hue2rgb(t1, t2, hue) {\n  // calculate the ranged hue\n  const rhue = hue < 0 ? hue + 360 : hue > 360 ? hue - 360 : hue; // calculate the rgb value\n\n  const rgb = rhue * 6 < 360 ? t1 + (t2 - t1) * rhue / 60 : rhue * 2 < 360 ? t2 : rhue * 3 < 720 ? t1 + (t2 - t1) * (240 - rhue) / 60 : t1;\n  return rgb;\n}\n/* RGB tooling\n/* ========================================================================== */\n\n\nfunction rgb2value(rgbR, rgbG, rgbB) {\n  const value = Math.max(rgbR, rgbG, rgbB);\n  return value;\n}\n\nfunction rgb2whiteness(rgbR, rgbG, rgbB) {\n  const whiteness = Math.min(rgbR, rgbG, rgbB);\n  return whiteness;\n}\n/* Math matrix\n/* ========================================================================== */\n\n\nfunction matrix(params, mats) {\n  return mats.map(mat => mat.reduce((acc, value, index) => acc + params[index] * value, 0));\n}\n/* D50 reference white\n/* ========================================================================== */\n\n\nconst [wd50X, wd50Y, wd50Z] = [96.42, 100, 82.49];\n/* Epsilon\n/* ========================================================================== */\n\nexports.wd50Z = wd50Z;\nexports.wd50Y = wd50Y;\nexports.wd50X = wd50X;\nconst epsilon = Math.pow(6, 3) / Math.pow(29, 3);\n/* Kappa\n/* ========================================================================== */\n\nexports.epsilon = epsilon;\nconst kappa = Math.pow(29, 3) / Math.pow(3, 3);\nexports.kappa = kappa;"},"sourceMaps":null,"error":null,"hash":"58287a835abbfd477044a9c2372049cb","cacheData":{"env":{}}}