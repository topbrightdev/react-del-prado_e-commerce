{"id":"../node_modules/detect-port-alt/lib/detect-port.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/detect-port-alt/package.json","includedInParent":true,"mtime":1594306879858},{"name":"debug","loc":{"line":3,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/detect-port-alt/lib/detect-port.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/detect-port-alt/node_modules/debug/src/browser.js"},{"name":"net","loc":{"line":4,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/detect-port-alt/lib/detect-port.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"address","loc":{"line":5,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/detect-port-alt/lib/detect-port.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/address/lib/address.js"}],"generated":{"js":"'use strict';\n\nconst debug = require('debug')('detect-port');\n\nconst net = require('net');\n\nconst address = require('address');\n\nmodule.exports = (port, host, callback) => {\n  if (typeof port === 'function') {\n    callback = port;\n    port = null;\n  } else if (typeof host === 'function') {\n    callback = host;\n    host = null;\n  }\n\n  port = parseInt(port) || 0;\n  let maxPort = port + 10;\n\n  if (maxPort > 65535) {\n    maxPort = 65535;\n  }\n\n  debug('detect free port between [%s, %s)', port, maxPort);\n\n  if (typeof callback === 'function') {\n    return tryListen(host, port, maxPort, callback);\n  } // promise\n\n\n  return new Promise((resolve, reject) => {\n    tryListen(host, port, maxPort, (error, realPort) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(realPort);\n      }\n    });\n  });\n};\n\nfunction tryListen(host, port, maxPort, callback) {\n  function handleError() {\n    port++;\n\n    if (port >= maxPort) {\n      debug('port: %s >= maxPort: %s, give up and use random port', port, maxPort);\n      port = 0;\n      maxPort = 0;\n    }\n\n    tryListen(host, port, maxPort, callback);\n  } // 1. check specified host (or null)\n\n\n  listen(port, host, (err, realPort) => {\n    // ignore random listening\n    if (port === 0) {\n      return callback(err, realPort);\n    }\n\n    if (err) {\n      return handleError(err);\n    } // 2. check default host\n\n\n    listen(port, null, err => {\n      if (err) {\n        return handleError(err);\n      } // 3. check localhost\n\n\n      listen(port, 'localhost', err => {\n        if (err) {\n          return handleError(err);\n        } // 4. check current ip\n\n\n        let ip;\n\n        try {\n          ip = address.ip();\n        } catch (err) {\n          // Skip the `ip` check if `address.ip()` fails\n          return callback(null, realPort);\n        }\n\n        listen(port, ip, (err, realPort) => {\n          if (err) {\n            return handleError(err);\n          }\n\n          callback(null, realPort);\n        });\n      });\n    });\n  });\n}\n\nfunction listen(port, hostname, callback) {\n  const server = new net.Server();\n  server.on('error', err => {\n    debug('listen %s:%s error: %s', hostname, port, err);\n    server.close();\n\n    if (err.code === 'ENOTFOUND') {\n      debug('ignore dns ENOTFOUND error, get free %s:%s', hostname, port);\n      return callback(null, port);\n    }\n\n    return callback(err);\n  });\n  server.listen(port, hostname, () => {\n    port = server.address().port;\n    server.close();\n    debug('get free %s:%s', hostname, port);\n    return callback(null, port);\n  });\n}"},"sourceMaps":null,"error":null,"hash":"d75e3ba77c2c4afa142c67d36a92f220","cacheData":{"env":{}}}