{"id":"../node_modules/pnp-webpack-plugin/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/pnp-webpack-plugin/package.json","includedInParent":true,"mtime":1594306880354},{"name":"pnpapi","optional":true,"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/pnp-webpack-plugin/index.js"}],"generated":{"js":"var pnp;\n\ntry {\n  pnp = require(\"pnpapi\");\n} catch (error) {// not in PnP; not a problem\n}\n\nfunction nothing() {// ¯\\_(ツ)_/¯\n}\n\nfunction getModuleLocator(module) {\n  var moduleLocation = module.filename;\n  if (!moduleLocation) throw new Error(\"The specified module doesn't seem to exist on the filesystem\");\n  var moduleLocator = pnp.findPackageLocator(moduleLocation);\n  if (!moduleLocator) throw new Error(\"the specified module doesn't seem to be part of the dependency tree\");\n  return moduleLocator;\n}\n\nfunction getSourceLocation(sourceLocator) {\n  if (!sourceLocator) return null;\n  var sourceInformation = pnp.getPackageInformation(sourceLocator);\n  if (!sourceInformation) throw new Error(\"Couldn't find the package to use as resolution source\");\n  if (!sourceInformation.packageLocation) throw new Error(\"The package to use as resolution source seem to not have been installed - maybe it's a devDependency not installed in prod?\");\n  return sourceInformation.packageLocation.replace(/\\/?$/, \"/\");\n}\n\nfunction makeResolver(sourceLocator) {\n  var sourceLocation = getSourceLocation(sourceLocator);\n  return function (resolver) {\n    var MAYBE_BUILTIN = /^[^\\/]$/;\n    var resolvedHook = resolver.ensureHook(\"resolve\"); // Prevents the SymlinkPlugin from kicking in. We need the symlinks to be preserved because that's how we deal with peer dependencies ambiguities.\n\n    resolver.getHook(\"file\").intercept({\n      register: function (tapInfo) {\n        return tapInfo.name !== \"SymlinkPlugin\" ? tapInfo : Object.assign({}, tapInfo, {\n          fn: function (request, resolveContext, callback) {\n            callback();\n          }\n        });\n      }\n    }); // Register a plugin that will resolve bare imports into the package location on the filesystem before leaving the rest of the resolution to Webpack\n\n    resolver.getHook(\"before-module\").tapAsync(\"PnpResolver\", function (requestContext, resolveContext, callback) {\n      var request = requestContext.request;\n      var issuer = sourceLocation || requestContext.context.issuer; // When using require.context, issuer seems to be false (cf https://github.com/webpack/webpack-dev-server/blob/d0725c98fb752d8c0b1e8c9067e526e22b5f5134/client-src/default/index.js#L94)\n\n      if (!issuer) {\n        issuer = \"\".concat(requestContext.path, \"/\"); // We only support issuer when they're absolute paths. I'm not sure the opposite can ever happen, but better check here.\n      } else if (!issuer.startsWith(\"/\")) {\n        throw new Error(\"Cannot successfully resolve this dependency - issuer not supported (\".concat(issuer, \")\"));\n      }\n\n      var resolution;\n\n      try {\n        resolution = pnp.resolveToUnqualified(request, issuer, {\n          considerBuiltins: false\n        });\n      } catch (error) {\n        return callback(error);\n      }\n\n      resolver.doResolve(resolvedHook, Object.assign({}, requestContext, {\n        request: resolution\n      }), null, resolveContext, callback);\n    });\n  };\n}\n\nmodule.exports = pnp ? {\n  apply: makeResolver(null)\n} : {\n  apply: nothing\n};\n\nmodule.exports.moduleLoader = function (module) {\n  return pnp ? {\n    apply: makeResolver(getModuleLocator(module))\n  } : {\n    apply: nothing\n  };\n};\n\nmodule.exports.topLevelLoader = pnp ? {\n  apply: makeResolver(pnp.topLevel)\n} : {\n  apply: nothing\n};"},"sourceMaps":null,"error":null,"hash":"2e07ac4a6cac555dc1857b39d1a3a7fe","cacheData":{"env":{}}}