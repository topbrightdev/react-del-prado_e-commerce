{"id":"../node_modules/autoprefixer/lib/utils.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1594570878686},{"name":"postcss","loc":{"line":3,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/utils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/node_modules/postcss/lib/postcss.js"}],"generated":{"js":"\"use strict\";\n\nvar list = require('postcss').list;\n\nmodule.exports = {\n  /**\n     * Throw special error, to tell beniary,\n     * that this error is from Autoprefixer.\n     */\n  error: function error(text) {\n    var err = new Error(text);\n    err.autoprefixer = true;\n    throw err;\n  },\n\n  /**\n     * Return array, that doesnâ€™t contain duplicates.\n     */\n  uniq: function uniq(array) {\n    var filtered = [];\n\n    for (var _iterator = array, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var i = _ref;\n\n      if (filtered.indexOf(i) === -1) {\n        filtered.push(i);\n      }\n    }\n\n    return filtered;\n  },\n\n  /**\n     * Return \"-webkit-\" on \"-webkit- old\"\n     */\n  removeNote: function removeNote(string) {\n    if (string.indexOf(' ') === -1) {\n      return string;\n    }\n\n    return string.split(' ')[0];\n  },\n\n  /**\n     * Escape RegExp symbols\n     */\n  escapeRegexp: function escapeRegexp(string) {\n    return string.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n  },\n\n  /**\n     * Return regexp to check, that CSS string contain word\n     */\n  regexp: function regexp(word, escape) {\n    if (escape === void 0) {\n      escape = true;\n    }\n\n    if (escape) {\n      word = this.escapeRegexp(word);\n    }\n\n    return new RegExp(\"(^|[\\\\s,(])(\" + word + \"($|[\\\\s(,]))\", 'gi');\n  },\n\n  /**\n     * Change comma list\n     */\n  editList: function editList(value, callback) {\n    var origin = list.comma(value);\n    var changed = callback(origin, []);\n\n    if (origin === changed) {\n      return value;\n    }\n\n    var join = value.match(/,\\s*/);\n    join = join ? join[0] : ', ';\n    return changed.join(join);\n  },\n\n  /**\n     * Split the selector into parts.\n     * It returns 3 level deep array because selectors can be comma\n     * separated (1), space separated (2), and combined (3)\n     * @param {String} selector selector string\n     * @return {Array<Array<Array>>} 3 level deep array of split selector\n     * @see utils.test.js for examples\n     */\n  splitSelector: function splitSelector(selector) {\n    return list.comma(selector).map(function (i) {\n      return list.space(i).map(function (k) {\n        return k.split(/(?=\\.|#)/g);\n      });\n    });\n  }\n};"},"sourceMaps":null,"error":null,"hash":"f4d2854e80647465a8d6076501a60dad","cacheData":{"env":{}}}