{"id":"../node_modules/webpack-log/src/loglevel/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/package.json","includedInParent":true,"mtime":1594306881666},{"name":"./LogLevel","loc":{"line":9,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/src/loglevel/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/src/loglevel/LogLevel.js"},{"name":"./MethodFactory","loc":{"line":10,"column":30},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/src/loglevel/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/src/loglevel/MethodFactory.js"},{"name":"./PrefixFactory","loc":{"line":11,"column":30},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/src/loglevel/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/src/loglevel/PrefixFactory.js"}],"generated":{"js":"'use strict';\n/* global window: true */\n\n/* eslint-disable\n  no-shadow,\n  no-param-reassign,\n  space-before-function-paren\n*/\n\nvar LogLevel = require('./LogLevel');\n\nvar MethodFactory = require('./MethodFactory');\n\nvar PrefixFactory = require('./PrefixFactory');\n\nvar defaultLogger = new LogLevel({\n  name: 'default'\n});\nvar cache = {\n  default: defaultLogger\n}; // Grab the current global log variable in case of overwrite\n\nvar existing = typeof window !== 'undefined' ? window.log : null;\nvar loglevel = Object.assign(defaultLogger, {\n  get factories() {\n    return {\n      MethodFactory,\n      PrefixFactory\n    };\n  },\n\n  get loggers() {\n    return cache;\n  },\n\n  getLogger(options) {\n    if (typeof options === 'string') {\n      options = {\n        name: options\n      };\n    }\n\n    if (!options.id) {\n      options.id = options.name;\n    }\n\n    var {\n      name,\n      id\n    } = options;\n    var defaults = {\n      level: defaultLogger.level\n    };\n\n    if (typeof name !== 'string' || !name || !name.length) {\n      throw new TypeError('You must supply a name when creating a logger');\n    }\n\n    var logger = cache[id];\n\n    if (!logger) {\n      logger = new LogLevel(Object.assign({}, defaults, options));\n      cache[id] = logger;\n    }\n\n    return logger;\n  },\n\n  noConflict() {\n    if (typeof window !== 'undefined' && window.log === defaultLogger) {\n      window.log = existing;\n    }\n\n    return defaultLogger;\n  }\n\n});\nmodule.exports = loglevel;"},"sourceMaps":null,"error":null,"hash":"f8a39283c11078b8a0966e8fba9e07d8","cacheData":{"env":{}}}