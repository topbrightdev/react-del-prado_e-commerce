{"id":"../node_modules/clean-css/lib/writer/source-maps.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/clean-css/package.json","includedInParent":true,"mtime":1594570879534},{"name":"source-map","loc":{"line":1,"column":33},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/clean-css/lib/writer/source-maps.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/clean-css/node_modules/source-map/source-map.js"},{"name":"./helpers","loc":{"line":2,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/clean-css/lib/writer/source-maps.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/clean-css/lib/writer/helpers.js"},{"name":"../utils/is-remote-resource","loc":{"line":4,"column":31},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/clean-css/lib/writer/source-maps.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/clean-css/lib/utils/is-remote-resource.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/clean-css/lib/writer/source-maps.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\nvar SourceMapGenerator = require('source-map').SourceMapGenerator;\n\nvar all = require('./helpers').all;\n\nvar isRemoteResource = require('../utils/is-remote-resource');\n\nvar isWindows = process.platform == 'win32';\nvar NIX_SEPARATOR_PATTERN = /\\//g;\nvar UNKNOWN_SOURCE = '$stdin';\nvar WINDOWS_SEPARATOR = '\\\\';\n\nfunction store(serializeContext, element) {\n  var fromString = typeof element == 'string';\n  var value = fromString ? element : element[1];\n  var mappings = fromString ? null : element[2];\n  var wrap = serializeContext.wrap;\n  wrap(serializeContext, value);\n  track(serializeContext, value, mappings);\n  serializeContext.output.push(value);\n}\n\nfunction wrap(serializeContext, value) {\n  if (serializeContext.column + value.length > serializeContext.format.wrapAt) {\n    track(serializeContext, serializeContext.format.breakWith, false);\n    serializeContext.output.push(serializeContext.format.breakWith);\n  }\n}\n\nfunction track(serializeContext, value, mappings) {\n  var parts = value.split('\\n');\n\n  if (mappings) {\n    trackAllMappings(serializeContext, mappings);\n  }\n\n  serializeContext.line += parts.length - 1;\n  serializeContext.column = parts.length > 1 ? 0 : serializeContext.column + parts.pop().length;\n}\n\nfunction trackAllMappings(serializeContext, mappings) {\n  for (var i = 0, l = mappings.length; i < l; i++) {\n    trackMapping(serializeContext, mappings[i]);\n  }\n}\n\nfunction trackMapping(serializeContext, mapping) {\n  var line = mapping[0];\n  var column = mapping[1];\n  var originalSource = mapping[2];\n  var source = originalSource;\n  var storedSource = source || UNKNOWN_SOURCE;\n\n  if (isWindows && source && !isRemoteResource(source)) {\n    storedSource = source.replace(NIX_SEPARATOR_PATTERN, WINDOWS_SEPARATOR);\n  }\n\n  serializeContext.outputMap.addMapping({\n    generated: {\n      line: serializeContext.line,\n      column: serializeContext.column\n    },\n    source: storedSource,\n    original: {\n      line: line,\n      column: column\n    }\n  });\n\n  if (serializeContext.inlineSources && originalSource in serializeContext.sourcesContent) {\n    serializeContext.outputMap.setSourceContent(storedSource, serializeContext.sourcesContent[originalSource]);\n  }\n}\n\nfunction serializeStylesAndSourceMap(tokens, context) {\n  var serializeContext = {\n    column: 0,\n    format: context.options.format,\n    indentBy: 0,\n    indentWith: '',\n    inlineSources: context.options.sourceMapInlineSources,\n    line: 1,\n    output: [],\n    outputMap: new SourceMapGenerator(),\n    sourcesContent: context.sourcesContent,\n    spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,\n    store: store,\n    wrap: context.options.format.wrapAt ? wrap : function () {\n      /* noop */\n    }\n  };\n  all(serializeContext, tokens);\n  return {\n    sourceMap: serializeContext.outputMap,\n    styles: serializeContext.output.join('')\n  };\n}\n\nmodule.exports = serializeStylesAndSourceMap;"},"sourceMaps":null,"error":null,"hash":"949becf5f59551c1a29c1f9e85ccb8a8","cacheData":{"env":{}}}