{"id":"../node_modules/spdy-transport/lib/spdy-transport/priority.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/package.json","includedInParent":true,"mtime":1594570878662},{"name":"../spdy-transport","loc":{"line":3,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/priority.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport.js"},{"name":"assert","loc":{"line":6,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/priority.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/assert/assert.js"},{"name":"debug","loc":{"line":7,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/priority.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/node_modules/debug/src/browser.js"}],"generated":{"js":"'use strict'\n\nvar transport = require('../spdy-transport')\nvar utils = transport.utils\n\nvar assert = require('assert')\nvar debug = require('debug')('spdy:priority')\n\nfunction PriorityNode (tree, options) {\n  this.tree = tree\n\n  this.id = options.id\n  this.parent = options.parent\n  this.weight = options.weight\n\n  // To be calculated in `addChild`\n  this.priorityFrom = 0\n  this.priorityTo = 1\n  this.priority = 1\n\n  this.children = {\n    list: [],\n    weight: 0\n  }\n\n  if (this.parent !== null) {\n    this.parent.addChild(this)\n  }\n}\n\nfunction compareChildren (a, b) {\n  return a.weight === b.weight ? a.id - b.id : a.weight - b.weight\n}\n\nPriorityNode.prototype.toJSON = function toJSON () {\n  return {\n    parent: this.parent,\n    weight: this.weight,\n    exclusive: this.exclusive\n  }\n}\n\nPriorityNode.prototype.getPriority = function getPriority () {\n  return this.priority\n}\n\nPriorityNode.prototype.getPriorityRange = function getPriorityRange () {\n  return { from: this.priorityFrom, to: this.priorityTo }\n}\n\nPriorityNode.prototype.addChild = function addChild (child) {\n  child.parent = this\n  utils.binaryInsert(this.children.list, child, compareChildren)\n  this.children.weight += child.weight\n\n  this._updatePriority(this.priorityFrom, this.priorityTo)\n}\n\nPriorityNode.prototype.remove = function remove () {\n  assert(this.parent, 'Can\\'t remove root node')\n\n  this.parent.removeChild(this)\n  this.tree._removeNode(this)\n\n  // Move all children to the parent\n  for (var i = 0; i < this.children.list.length; i++) {\n    this.parent.addChild(this.children.list[i])\n  }\n}\n\nPriorityNode.prototype.removeChild = function removeChild (child) {\n  this.children.weight -= child.weight\n  var index = utils.binarySearch(this.children.list, child, compareChildren)\n  if (index !== -1 && this.children.list.length >= index) {\n    this.children.list.splice(index, 1)\n  }\n}\n\nPriorityNode.prototype.removeChildren = function removeChildren () {\n  var children = this.children.list\n  this.children.list = []\n  this.children.weight = 0\n  return children\n}\n\nPriorityNode.prototype._updatePriority = function _updatePriority (from, to) {\n  this.priority = to - from\n  this.priorityFrom = from\n  this.priorityTo = to\n\n  var weight = 0\n  for (var i = 0; i < this.children.list.length; i++) {\n    var node = this.children.list[i]\n    var nextWeight = weight + node.weight\n\n    node._updatePriority(\n      from + this.priority * (weight / this.children.weight),\n      from + this.priority * (nextWeight / this.children.weight)\n    )\n    weight = nextWeight\n  }\n}\n\nfunction PriorityTree (options) {\n  this.map = {}\n  this.list = []\n  this.defaultWeight = options.defaultWeight || 16\n\n  this.count = 0\n  this.maxCount = options.maxCount\n\n  // Root\n  this.root = this.add({\n    id: 0,\n    parent: null,\n    weight: 1\n  })\n}\nmodule.exports = PriorityTree\n\nPriorityTree.create = function create (options) {\n  return new PriorityTree(options)\n}\n\nPriorityTree.prototype.add = function add (options) {\n  if (options.id === options.parent) {\n    return this.addDefault(options.id)\n  }\n\n  var parent = options.parent === null ? null : this.map[options.parent]\n  if (parent === undefined) {\n    return this.addDefault(options.id)\n  }\n\n  debug('add node=%d parent=%d weight=%d exclusive=%d',\n        options.id,\n        options.parent === null ? -1 : options.parent,\n        options.weight || this.defaultWeight,\n        options.exclusive ? 1 : 0)\n\n  var children\n  if (options.exclusive) {\n    children = parent.removeChildren()\n  }\n\n  var node = new PriorityNode(this, {\n    id: options.id,\n    parent: parent,\n    weight: options.weight || this.defaultWeight\n  })\n  this.map[options.id] = node\n\n  if (options.exclusive) {\n    for (var i = 0; i < children.length; i++) {\n      node.addChild(children[i])\n    }\n  }\n\n  this.count++\n  if (this.count > this.maxCount) {\n    debug('hit maximum remove id=%d', this.list[0].id)\n    this.list.shift().remove()\n  }\n\n  // Root node is not subject to removal\n  if (node.parent !== null) {\n    this.list.push(node)\n  }\n\n  return node\n}\n\n// Only for testing, should use `node`'s methods\nPriorityTree.prototype.get = function get (id) {\n  return this.map[id]\n}\n\nPriorityTree.prototype.addDefault = function addDefault (id) {\n  debug('creating default node')\n  return this.add({ id: id, parent: 0, weight: this.defaultWeight })\n}\n\nPriorityTree.prototype._removeNode = function _removeNode (node) {\n  delete this.map[node.id]\n  this.count--\n}\n"},"sourceMaps":null,"error":null,"hash":"4206054b3f65fe5738273ad31932efaf","cacheData":{"env":{}}}