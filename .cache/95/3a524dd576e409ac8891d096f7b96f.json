{"id":"../node_modules/p-map/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/p-map/package.json","includedInParent":true,"mtime":1594306880338}],"generated":{"js":"'use strict';\n\nmodule.exports = (iterable, mapper, opts) => new Promise((resolve, reject) => {\n  opts = Object.assign({\n    concurrency: Infinity\n  }, opts);\n\n  if (typeof mapper !== 'function') {\n    throw new TypeError('Mapper function is required');\n  }\n\n  const concurrency = opts.concurrency;\n\n  if (!(typeof concurrency === 'number' && concurrency >= 1)) {\n    throw new TypeError(\"Expected `concurrency` to be a number from 1 and up, got `\".concat(concurrency, \"` (\").concat(typeof concurrency, \")\"));\n  }\n\n  const ret = [];\n  const iterator = iterable[Symbol.iterator]();\n  let isRejected = false;\n  let iterableDone = false;\n  let resolvingCount = 0;\n  let currentIdx = 0;\n\n  const next = () => {\n    if (isRejected) {\n      return;\n    }\n\n    const nextItem = iterator.next();\n    const i = currentIdx;\n    currentIdx++;\n\n    if (nextItem.done) {\n      iterableDone = true;\n\n      if (resolvingCount === 0) {\n        resolve(ret);\n      }\n\n      return;\n    }\n\n    resolvingCount++;\n    Promise.resolve(nextItem.value).then(el => mapper(el, i)).then(val => {\n      ret[i] = val;\n      resolvingCount--;\n      next();\n    }, err => {\n      isRejected = true;\n      reject(err);\n    });\n  };\n\n  for (let i = 0; i < concurrency; i++) {\n    next();\n\n    if (iterableDone) {\n      break;\n    }\n  }\n});"},"sourceMaps":null,"error":null,"hash":"8eb354b0cb77583f524c098b87d18740","cacheData":{"env":{}}}