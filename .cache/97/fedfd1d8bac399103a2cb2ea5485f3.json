{"id":"../node_modules/http-proxy-middleware/lib/path-rewriter.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/package.json","includedInParent":true,"mtime":1594306880062},{"name":"lodash","loc":{"line":1,"column":16},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/path-rewriter.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/lodash/lodash.js"},{"name":"./logger","loc":{"line":2,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/path-rewriter.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/logger.js"},{"name":"./errors","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/path-rewriter.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/errors.js"}],"generated":{"js":"var _ = require('lodash');\n\nvar logger = require('./logger').getInstance();\n\nvar ERRORS = require('./errors');\n\nmodule.exports = {\n  create: createPathRewriter\n};\n/**\n * Create rewrite function, to cache parsed rewrite rules.\n *\n * @param {Object} rewriteConfig\n * @return {Function} Function to rewrite paths; This function should accept `path` (request.url) as parameter\n */\n\nfunction createPathRewriter(rewriteConfig) {\n  var rulesCache;\n\n  if (!isValidRewriteConfig(rewriteConfig)) {\n    return;\n  }\n\n  if (_.isFunction(rewriteConfig)) {\n    var customRewriteFn = rewriteConfig;\n    return customRewriteFn;\n  } else {\n    rulesCache = parsePathRewriteRules(rewriteConfig);\n    return rewritePath;\n  }\n\n  function rewritePath(path) {\n    var result = path;\n\n    _.forEach(rulesCache, function (rule) {\n      if (rule.regex.test(path)) {\n        result = result.replace(rule.regex, rule.value);\n        logger.debug('[HPM] Rewriting path from \"%s\" to \"%s\"', path, result);\n        return false;\n      }\n    });\n\n    return result;\n  }\n}\n\nfunction isValidRewriteConfig(rewriteConfig) {\n  if (_.isFunction(rewriteConfig)) {\n    return true;\n  } else if (!_.isEmpty(rewriteConfig) && _.isPlainObject(rewriteConfig)) {\n    return true;\n  } else if (_.isUndefined(rewriteConfig) || _.isNull(rewriteConfig) || _.isEqual(rewriteConfig, {})) {\n    return false;\n  } else {\n    throw new Error(ERRORS.ERR_PATH_REWRITER_CONFIG);\n  }\n}\n\nfunction parsePathRewriteRules(rewriteConfig) {\n  var rules = [];\n\n  if (_.isPlainObject(rewriteConfig)) {\n    _.forIn(rewriteConfig, function (value, key) {\n      rules.push({\n        regex: new RegExp(key),\n        value: rewriteConfig[key]\n      });\n      logger.info('[HPM] Proxy rewrite rule created: \"%s\" ~> \"%s\"', key, rewriteConfig[key]);\n    });\n  }\n\n  return rules;\n}"},"sourceMaps":null,"error":null,"hash":"7cc4b28039a4503beb621f506f3a325f","cacheData":{"env":{}}}