{"id":"../node_modules/autoprefixer/lib/supports.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1594570878686},{"name":"./browsers","loc":{"line":3,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/supports.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/browsers.js"},{"name":"./brackets","loc":{"line":5,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/supports.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/brackets.js"},{"name":"./value","loc":{"line":7,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/supports.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/value.js"},{"name":"./utils","loc":{"line":9,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/supports.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/utils.js"},{"name":"postcss","loc":{"line":11,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/supports.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/node_modules/postcss/lib/postcss.js"},{"name":"caniuse-lite","loc":{"line":15,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/supports.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/caniuse-lite/dist/unpacker/index.js"},{"name":"caniuse-lite/data/features/css-featurequeries.js","loc":{"line":15,"column":51},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/supports.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/caniuse-lite/data/features/css-featurequeries.js"}],"generated":{"js":"\"use strict\";\n\nvar Browsers = require('./browsers');\n\nvar brackets = require('./brackets');\n\nvar Value = require('./value');\n\nvar utils = require('./utils');\n\nvar postcss = require('postcss');\n\nvar supported = [];\n\nvar data = require('caniuse-lite').feature(require('caniuse-lite/data/features/css-featurequeries.js'));\n\nfor (var browser in data.stats) {\n  var versions = data.stats[browser];\n\n  for (var version in versions) {\n    var support = versions[version];\n\n    if (/y/.test(support)) {\n      supported.push(browser + ' ' + version);\n    }\n  }\n}\n\nvar Supports = /*#__PURE__*/function () {\n  function Supports(Prefixes, all) {\n    this.Prefixes = Prefixes;\n    this.all = all;\n  }\n  /**\n     * Return prefixer only with @supports supported browsers\n     */\n\n\n  var _proto = Supports.prototype;\n\n  _proto.prefixer = function prefixer() {\n    if (this.prefixerCache) {\n      return this.prefixerCache;\n    }\n\n    var filtered = this.all.browsers.selected.filter(function (i) {\n      return supported.indexOf(i) !== -1;\n    });\n    var browsers = new Browsers(this.all.browsers.data, filtered, this.all.options);\n    this.prefixerCache = new this.Prefixes(this.all.data, browsers, this.all.options);\n    return this.prefixerCache;\n  };\n  /**\n     * Parse string into declaration property and value\n     */\n\n\n  _proto.parse = function parse(str) {\n    var parts = str.split(':');\n    var prop = parts[0];\n    var value = parts[1];\n    if (!value) value = '';\n    return [prop.trim(), value.trim()];\n  };\n  /**\n     * Create virtual rule to process it by prefixer\n     */\n\n\n  _proto.virtual = function virtual(str) {\n    var _this$parse = this.parse(str),\n        prop = _this$parse[0],\n        value = _this$parse[1];\n\n    var rule = postcss.parse('a{}').first;\n    rule.append({\n      prop: prop,\n      value: value,\n      raws: {\n        before: ''\n      }\n    });\n    return rule;\n  };\n  /**\n     * Return array of Declaration with all necessary prefixes\n     */\n\n\n  _proto.prefixed = function prefixed(str) {\n    var rule = this.virtual(str);\n\n    if (this.disabled(rule.first)) {\n      return rule.nodes;\n    }\n\n    var result = {\n      warn: function warn() {\n        return null;\n      }\n    };\n    var prefixer = this.prefixer().add[rule.first.prop];\n    prefixer && prefixer.process && prefixer.process(rule.first, result);\n\n    for (var _iterator = rule.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var decl = _ref;\n\n      for (var _iterator2 = this.prefixer().values('add', rule.first.prop), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var value = _ref2;\n        value.process(decl);\n      }\n\n      Value.save(this.all, decl);\n    }\n\n    return rule.nodes;\n  };\n  /**\n     * Return true if brackets node is \"not\" word\n     */\n\n\n  _proto.isNot = function isNot(node) {\n    return typeof node === 'string' && /not\\s*/i.test(node);\n  };\n  /**\n     * Return true if brackets node is \"or\" word\n     */\n\n\n  _proto.isOr = function isOr(node) {\n    return typeof node === 'string' && /\\s*or\\s*/i.test(node);\n  };\n  /**\n     * Return true if brackets node is (prop: value)\n     */\n\n\n  _proto.isProp = function isProp(node) {\n    return typeof node === 'object' && node.length === 1 && typeof node[0] === 'string';\n  };\n  /**\n     * Return true if prefixed property has no unprefixed\n     */\n\n\n  _proto.isHack = function isHack(all, unprefixed) {\n    var check = new RegExp(\"(\\\\(|\\\\s)\" + utils.escapeRegexp(unprefixed) + \":\");\n    return !check.test(all);\n  };\n  /**\n     * Return true if we need to remove node\n     */\n\n\n  _proto.toRemove = function toRemove(str, all) {\n    var _this$parse2 = this.parse(str),\n        prop = _this$parse2[0],\n        value = _this$parse2[1];\n\n    var unprefixed = this.all.unprefixed(prop);\n    var cleaner = this.all.cleaner();\n\n    if (cleaner.remove[prop] && cleaner.remove[prop].remove && !this.isHack(all, unprefixed)) {\n      return true;\n    }\n\n    for (var _iterator3 = cleaner.values('remove', unprefixed), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var checker = _ref3;\n\n      if (checker.check(value)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n     * Remove all unnecessary prefixes\n     */\n\n\n  _proto.remove = function remove(nodes, all) {\n    var i = 0;\n\n    while (i < nodes.length) {\n      if (!this.isNot(nodes[i - 1]) && this.isProp(nodes[i]) && this.isOr(nodes[i + 1])) {\n        if (this.toRemove(nodes[i][0], all)) {\n          nodes.splice(i, 2);\n          continue;\n        }\n\n        i += 2;\n        continue;\n      }\n\n      if (typeof nodes[i] === 'object') {\n        nodes[i] = this.remove(nodes[i], all);\n      }\n\n      i += 1;\n    }\n\n    return nodes;\n  };\n  /**\n     * Clean brackets with one child\n     */\n\n\n  _proto.cleanBrackets = function cleanBrackets(nodes) {\n    var _this = this;\n\n    return nodes.map(function (i) {\n      if (typeof i !== 'object') {\n        return i;\n      }\n\n      if (i.length === 1 && typeof i[0] === 'object') {\n        return _this.cleanBrackets(i[0]);\n      }\n\n      return _this.cleanBrackets(i);\n    });\n  };\n  /**\n     * Add \" or \" between properties and convert it to brackets format\n     */\n\n\n  _proto.convert = function convert(progress) {\n    var result = [''];\n\n    for (var _iterator4 = progress, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n\n      var i = _ref4;\n      result.push([i.prop + \": \" + i.value]);\n      result.push(' or ');\n    }\n\n    result[result.length - 1] = '';\n    return result;\n  };\n  /**\n     * Compress value functions into a string nodes\n     */\n\n\n  _proto.normalize = function normalize(nodes) {\n    var _this2 = this;\n\n    if (typeof nodes !== 'object') {\n      return nodes;\n    }\n\n    nodes = nodes.filter(function (i) {\n      return i !== '';\n    });\n\n    if (typeof nodes[0] === 'string' && nodes[0].indexOf(':') !== -1) {\n      return [brackets.stringify(nodes)];\n    }\n\n    return nodes.map(function (i) {\n      return _this2.normalize(i);\n    });\n  };\n  /**\n     * Add prefixes\n     */\n\n\n  _proto.add = function add(nodes, all) {\n    var _this3 = this;\n\n    return nodes.map(function (i) {\n      if (_this3.isProp(i)) {\n        var prefixed = _this3.prefixed(i[0]);\n\n        if (prefixed.length > 1) {\n          return _this3.convert(prefixed);\n        }\n\n        return i;\n      }\n\n      if (typeof i === 'object') {\n        return _this3.add(i, all);\n      }\n\n      return i;\n    });\n  };\n  /**\n     * Add prefixed declaration\n     */\n\n\n  _proto.process = function process(rule) {\n    var ast = brackets.parse(rule.params);\n    ast = this.normalize(ast);\n    ast = this.remove(ast, rule.params);\n    ast = this.add(ast, rule.params);\n    ast = this.cleanBrackets(ast);\n    rule.params = brackets.stringify(ast);\n  };\n  /**\n     * Check global options\n     */\n\n\n  _proto.disabled = function disabled(node) {\n    if (!this.all.options.grid) {\n      if (node.prop === 'display' && node.value.indexOf('grid') !== -1) {\n        return true;\n      }\n\n      if (node.prop.indexOf('grid') !== -1 || node.prop === 'justify-items') {\n        return true;\n      }\n    }\n\n    if (this.all.options.flexbox === false) {\n      if (node.prop === 'display' && node.value.indexOf('flex') !== -1) {\n        return true;\n      }\n\n      var other = ['order', 'justify-content', 'align-items', 'align-content'];\n\n      if (node.prop.indexOf('flex') !== -1 || other.indexOf(node.prop) !== -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return Supports;\n}();\n\nmodule.exports = Supports;"},"sourceMaps":null,"error":null,"hash":"794e8d77af97f38d7b4b9a319e83abf8","cacheData":{"env":{}}}