{"id":"../node_modules/webpack/node_modules/@webassemblyjs/wast-parser/esm/number-literals.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/wast-parser/package.json","includedInParent":true,"mtime":1594578778157},{"name":"@xtuc/long","loc":{"line":1,"column":17},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/wast-parser/esm/number-literals.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@xtuc/long/src/long.js"},{"name":"@webassemblyjs/floating-point-hex-parser","loc":{"line":2,"column":26},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/wast-parser/esm/number-literals.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/floating-point-hex-parser/esm/index.js"},{"name":"@webassemblyjs/helper-api-error","loc":{"line":3,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/wast-parser/esm/number-literals.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/@webassemblyjs/helper-api-error/esm/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse32F = parse32F;\nexports.parse64F = parse64F;\nexports.parse32I = parse32I;\nexports.parseU32 = parseU32;\nexports.parse64I = parse64I;\nexports.isInfLiteral = isInfLiteral;\nexports.isNanLiteral = isNanLiteral;\n\nvar _long = _interopRequireDefault(require(\"@xtuc/long\"));\n\nvar _floatingPointHexParser = _interopRequireDefault(require(\"@webassemblyjs/floating-point-hex-parser\"));\n\nvar _helperApiError = require(\"@webassemblyjs/helper-api-error\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse32F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return (0, _floatingPointHexParser.default)(sourceString);\n  }\n\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x400000);\n  }\n\n  return parseFloat(sourceString);\n}\n\nfunction parse64F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return (0, _floatingPointHexParser.default)(sourceString);\n  }\n\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x8000000000000);\n  }\n\n  if (isHexLiteral(sourceString)) {\n    return (0, _floatingPointHexParser.default)(sourceString);\n  }\n\n  return parseFloat(sourceString);\n}\n\nfunction parse32I(sourceString) {\n  var value = 0;\n\n  if (isHexLiteral(sourceString)) {\n    value = ~~parseInt(sourceString, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    value = parseInt(sourceString, 10);\n  }\n\n  return value;\n}\n\nfunction parseU32(sourceString) {\n  var value = parse32I(sourceString);\n\n  if (value < 0) {\n    throw new _helperApiError.CompileError(\"Illegal value for u32: \" + sourceString);\n  }\n\n  return value;\n}\n\nfunction parse64I(sourceString) {\n  var long;\n\n  if (isHexLiteral(sourceString)) {\n    long = _long.default.fromString(sourceString, false, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    long = _long.default.fromString(sourceString);\n  }\n\n  return {\n    high: long.high,\n    low: long.low\n  };\n}\n\nvar NAN_WORD = /^\\+?-?nan/;\nvar INF_WORD = /^\\+?-?inf/;\n\nfunction isInfLiteral(sourceString) {\n  return INF_WORD.test(sourceString.toLowerCase());\n}\n\nfunction isNanLiteral(sourceString) {\n  return NAN_WORD.test(sourceString.toLowerCase());\n}\n\nfunction isDecimalExponentLiteral(sourceString) {\n  return !isHexLiteral(sourceString) && sourceString.toUpperCase().includes(\"E\");\n}\n\nfunction isHexLiteral(sourceString) {\n  return sourceString.substring(0, 2).toUpperCase() === \"0X\" || sourceString.substring(0, 3).toUpperCase() === \"-0X\";\n}"},"sourceMaps":null,"error":null,"hash":"bc474d6f9b568a56e7e0b722a4d77050","cacheData":{"env":{}}}