{"id":"../node_modules/autoprefixer/lib/value.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1594570878686},{"name":"./prefixer","loc":{"line":7,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/value.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/prefixer.js"},{"name":"./old-value","loc":{"line":9,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/value.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/old-value.js"},{"name":"./utils","loc":{"line":11,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/value.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/utils.js"},{"name":"postcss","loc":{"line":13,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/value.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/node_modules/postcss/lib/postcss.js"}],"generated":{"js":"\"use strict\";\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _defaults(subClass, superClass);\n}\n\nvar Prefixer = require('./prefixer');\n\nvar OldValue = require('./old-value');\n\nvar utils = require('./utils');\n\nvar vendor = require('postcss').vendor;\n\nvar Value = /*#__PURE__*/function (_Prefixer) {\n  _inheritsLoose(Value, _Prefixer);\n\n  function Value() {\n    return _Prefixer.apply(this, arguments) || this;\n  }\n  /**\n     * Clone decl for each prefixed values\n     */\n\n\n  Value.save = function save(prefixes, decl) {\n    var _this = this;\n\n    var prop = decl.prop;\n    var result = [];\n\n    var _loop = function _loop(prefix) {\n      var value = decl._autoprefixerValues[prefix];\n\n      if (value === decl.value) {\n        return \"continue\";\n      }\n\n      var item = void 0;\n      var propPrefix = vendor.prefix(prop);\n\n      if (propPrefix === '-pie-') {\n        return \"continue\";\n      }\n\n      if (propPrefix === prefix) {\n        item = decl.value = value;\n        result.push(item);\n        return \"continue\";\n      }\n\n      var prefixed = prefixes.prefixed(prop, prefix);\n      var rule = decl.parent;\n\n      if (!rule.every(function (i) {\n        return i.prop !== prefixed;\n      })) {\n        result.push(item);\n        return \"continue\";\n      }\n\n      var trimmed = value.replace(/\\s+/, ' ');\n      var already = rule.some(function (i) {\n        return i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed;\n      });\n\n      if (already) {\n        result.push(item);\n        return \"continue\";\n      }\n\n      var cloned = _this.clone(decl, {\n        value: value\n      });\n\n      item = decl.parent.insertBefore(decl, cloned);\n      result.push(item);\n    };\n\n    for (var prefix in decl._autoprefixerValues) {\n      var _ret = _loop(prefix);\n\n      if (_ret === \"continue\") continue;\n    }\n\n    return result;\n  };\n  /**\n     * Is declaration need to be prefixed\n     */\n\n\n  var _proto = Value.prototype;\n\n  _proto.check = function check(decl) {\n    var value = decl.value;\n\n    if (value.indexOf(this.name) === -1) {\n      return false;\n    }\n\n    return !!value.match(this.regexp());\n  };\n  /**\n     * Lazy regexp loading\n     */\n\n\n  _proto.regexp = function regexp() {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name));\n  };\n  /**\n     * Add prefix to values in string\n     */\n\n\n  _proto.replace = function replace(string, prefix) {\n    return string.replace(this.regexp(), \"$1\" + prefix + \"$2\");\n  };\n  /**\n     * Get value with comments if it was not changed\n     */\n\n\n  _proto.value = function value(decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw;\n    } else {\n      return decl.value;\n    }\n  };\n  /**\n     * Save values with next prefixed token\n     */\n\n\n  _proto.add = function add(decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {};\n    }\n\n    var value = decl._autoprefixerValues[prefix] || this.value(decl);\n    var before;\n\n    do {\n      before = value;\n      value = this.replace(value, prefix);\n      if (value === false) return;\n    } while (value !== before);\n\n    decl._autoprefixerValues[prefix] = value;\n  };\n  /**\n     * Return function to fast find prefixed value\n     */\n\n\n  _proto.old = function old(prefix) {\n    return new OldValue(this.name, prefix + this.name);\n  };\n\n  return Value;\n}(Prefixer);\n\nmodule.exports = Value;"},"sourceMaps":null,"error":null,"hash":"1beb2d1fb9b47aa2aa66ac638398610e","cacheData":{"env":{}}}