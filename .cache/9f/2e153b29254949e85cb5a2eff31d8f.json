{"id":"../node_modules/webpack/node_modules/chokidar/node_modules/braces/lib/utils.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/chokidar/node_modules/braces/package.json","includedInParent":true,"mtime":1594578778161}],"generated":{"js":"'use strict';\n\nexports.isInteger = function (num) {\n  if (typeof num === 'number') {\n    return Number.isInteger(num);\n  }\n\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isInteger(Number(num));\n  }\n\n  return false;\n};\n/**\n * Find a node of the given type\n */\n\n\nexports.find = function (node, type) {\n  return node.nodes.find(function (node) {\n    return node.type === type;\n  });\n};\n/**\n * Find a node of the given type\n */\n\n\nexports.exceedsLimit = function (min, max) {\n  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var limit = arguments.length > 3 ? arguments[3] : undefined;\n  if (limit === false) return false;\n  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;\n  return (Number(max) - Number(min)) / Number(step) >= limit;\n};\n/**\n * Escape the given node with '\\\\' before node.value\n */\n\n\nexports.escapeNode = function (block) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var type = arguments.length > 2 ? arguments[2] : undefined;\n  var node = block.nodes[n];\n  if (!node) return;\n\n  if (type && node.type === type || node.type === 'open' || node.type === 'close') {\n    if (node.escaped !== true) {\n      node.value = '\\\\' + node.value;\n      node.escaped = true;\n    }\n  }\n};\n/**\n * Returns true if the given brace node should be enclosed in literal braces\n */\n\n\nexports.encloseBrace = function (node) {\n  if (node.type !== 'brace') return false;\n\n  if (node.commas >> 0 + node.ranges >> 0 === 0) {\n    node.invalid = true;\n    return true;\n  }\n\n  return false;\n};\n/**\n * Returns true if a brace node is invalid.\n */\n\n\nexports.isInvalidBrace = function (block) {\n  if (block.type !== 'brace') return false;\n  if (block.invalid === true || block.dollar) return true;\n\n  if (block.commas >> 0 + block.ranges >> 0 === 0) {\n    block.invalid = true;\n    return true;\n  }\n\n  if (block.open !== true || block.close !== true) {\n    block.invalid = true;\n    return true;\n  }\n\n  return false;\n};\n/**\n * Returns true if a node is an open or close node\n */\n\n\nexports.isOpenOrClose = function (node) {\n  if (node.type === 'open' || node.type === 'close') {\n    return true;\n  }\n\n  return node.open === true || node.close === true;\n};\n/**\n * Reduce an array of text nodes.\n */\n\n\nexports.reduce = function (nodes) {\n  return nodes.reduce(function (acc, node) {\n    if (node.type === 'text') acc.push(node.value);\n    if (node.type === 'range') node.type = 'text';\n    return acc;\n  }, []);\n};\n/**\n * Flatten an array\n */\n\n\nexports.flatten = function () {\n  var result = [];\n\n  var flat = function flat(arr) {\n    for (var i = 0; i < arr.length; i++) {\n      var ele = arr[i];\n      Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);\n    }\n\n    return result;\n  };\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  flat(args);\n  return result;\n};"},"sourceMaps":null,"error":null,"hash":"395b530330b2b6135517c3ec26ad7584","cacheData":{"env":{}}}