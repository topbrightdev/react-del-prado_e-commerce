{"id":"../node_modules/wbuf/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/wbuf/package.json","includedInParent":true,"mtime":1594306881658},{"name":"minimalistic-assert","loc":{"line":1,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/wbuf/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/minimalistic-assert/index.js"},{"name":"buffer","loc":{"line":2,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/wbuf/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/buffer/index.js"}],"generated":{"js":"\nvar assert = require('minimalistic-assert');\nvar Buffer = require('buffer').Buffer;\n\nfunction WBuf() {\n  this.buffers = [];\n  this.toReserve = 0;\n  this.size = 0;\n  this.maxSize = 0;\n  this.avail = 0;\n\n  this.last = null;\n  this.offset = 0;\n\n  // Used in slicing\n  this.sliceQueue = null;\n\n  this.forceReserve = false;\n\n  // Mostly a constant\n  this.reserveRate = 64;\n}\nmodule.exports = WBuf;\n\nWBuf.prototype.reserve = function reserve(n) {\n  this.toReserve += n;\n\n  // Force reservation of extra bytes\n  if (this.forceReserve)\n    this.toReserve = Math.max(this.toReserve, this.reserveRate);\n};\n\nWBuf.prototype._ensure = function _ensure(n) {\n  if (this.avail >= n)\n    return;\n\n  if (this.toReserve === 0)\n    this.toReserve = this.reserveRate;\n\n  this.toReserve = Math.max(n - this.avail, this.toReserve);\n\n  if (this.avail === 0)\n    this._next();\n};\n\nWBuf.prototype._next = function _next() {\n  var buf;\n  if (this.sliceQueue === null) {\n    // Most common case\n    buf = new Buffer(this.toReserve);\n  } else {\n    // Only for `.slice()` results\n    buf = this.sliceQueue.shift();\n    if (this.sliceQueue.length === 0)\n      this.sliceQueue = null;\n  }\n\n  this.toReserve = 0;\n\n  this.buffers.push(buf);\n  this.avail = buf.length;\n  this.offset = 0;\n  this.last = buf;\n};\n\nWBuf.prototype._rangeCheck = function _rangeCheck() {\n  if (this.maxSize !== 0 && this.size > this.maxSize)\n    throw new RangeError('WBuf overflow');\n};\n\nWBuf.prototype._move = function _move(n) {\n  this.size += n;\n  if (this.avail === 0)\n    this.last = null;\n\n  this._rangeCheck();\n};\n\nWBuf.prototype.slice = function slice(start, end) {\n  assert(0 <= start && start <= this.size);\n  assert(0 <= end && end <= this.size);\n\n  if (this.last === null)\n    this._next();\n\n  var res = new WBuf();\n\n  // Only last chunk is requested\n  if (start >= this.size - this.offset) {\n    res.buffers.push(this.last);\n    res.last = this.last;\n    res.offset = start - this.size + this.offset;\n    res.maxSize = end - start;\n    res.avail = res.maxSize;\n\n    return res;\n  }\n\n  var startIndex = -1;\n  var startOffset = 0;\n  var endIndex = -1;\n\n  // Find buffer indices\n  var offset = 0;\n  for (var i = 0; i < this.buffers.length; i++) {\n    var buf = this.buffers[i];\n    var next = offset + buf.length;\n\n    // Found the start\n    if (start >= offset && start <= next) {\n      startIndex = i;\n      startOffset = start - offset;\n      if (endIndex !== -1)\n        break;\n    }\n    if (end >= offset && end <= next) {\n      endIndex = i;\n      if (startIndex !== -1)\n        break;\n    }\n\n    offset = next;\n  }\n\n  res.last = this.buffers[startIndex];\n  res.offset = startOffset;\n  res.maxSize = end - start;\n\n  // Multi-buffer slice\n  if (startIndex < endIndex) {\n    res.sliceQueue = this.buffers.slice(startIndex + 1, endIndex + 1);\n\n    res.last = res.last.slice(res.offset);\n    res.offset = 0;\n  }\n\n  res.avail = res.last.length - res.offset;\n  res.buffers.push(res.last);\n\n  return res;\n};\n\nWBuf.prototype.skip = function skip(n) {\n  if (n === 0)\n    return this.slice(this.size, this.size);\n\n  this._ensure(n);\n\n  var left = n;\n  while (left > 0) {\n    var toSkip = Math.min(left, this.avail);\n    left -= toSkip;\n    this.size += toSkip;\n    if (toSkip === this.avail) {\n      if (left !== 0) {\n        this._next();\n      } else {\n        this.avail -= toSkip;\n        this.offset += toSkip;\n      }\n    } else {\n      this.offset += toSkip;\n      this.avail -= toSkip;\n    }\n  }\n\n  this._rangeCheck();\n\n  return this.slice(this.size - n, this.size);\n};\n\nWBuf.prototype.write = function write(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    if (c > 255)\n      len += 2;\n    else\n      len += 1;\n  }\n  this.reserve(len);\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    var hi = c >>> 8;\n    var lo = c & 0xff;\n\n    if (hi)\n      this.writeUInt8(hi);\n    this.writeUInt8(lo);\n  }\n};\n\nWBuf.prototype.copyFrom = function copyFrom(buf, start, end) {\n  var off = start === undefined ? 0 : start;\n  var len = end === undefined ? buf.length : end;\n  if (off === len)\n    return;\n\n  this._ensure(len - off);\n  while (off < len) {\n    var toCopy = Math.min(len - off, this.avail);\n    buf.copy(this.last, this.offset, off, off + toCopy);\n    off += toCopy;\n    this.size += toCopy;\n    if (toCopy === this.avail) {\n      if (off !== len) {\n        this._next();\n      } else {\n        this.avail = 0;\n        this.offset += toCopy;\n      }\n    } else {\n      this.offset += toCopy;\n      this.avail -= toCopy;\n    }\n  }\n\n  this._rangeCheck();\n};\n\nWBuf.prototype.writeUInt8 = function writeUInt8(v) {\n  this._ensure(1);\n\n  this.last[this.offset++] = v;\n  this.avail--;\n  this._move(1);\n};\n\nWBuf.prototype.writeUInt16BE = function writeUInt16BE(v) {\n  this._ensure(2);\n\n  // Fast case - everything fits into the last buffer\n  if (this.avail >= 2) {\n    this.last.writeUInt16BE(v, this.offset);\n    this.offset += 2;\n    this.avail -= 2;\n\n  // One byte here, one byte there\n  } else {\n    this.last[this.offset] = (v >>> 8);\n    this._next();\n    this.last[this.offset++] = v & 0xff;\n    this.avail--;\n  }\n\n  this._move(2);\n};\n\nWBuf.prototype.writeUInt24BE = function writeUInt24BE(v) {\n  this._ensure(3);\n\n  // Fast case - everything fits into the last buffer\n  if (this.avail >= 3) {\n    this.last.writeUInt16BE(v >>> 8, this.offset);\n    this.last[this.offset + 2] = v & 0xff;\n    this.offset += 3;\n    this.avail -= 3;\n    this._move(3);\n\n  // Two bytes here\n  } else if (this.avail >= 2) {\n    this.last.writeUInt16BE(v >>> 8, this.offset);\n    this._next();\n    this.last[this.offset++] = v & 0xff;\n    this.avail--;\n    this._move(3);\n\n  // Just one byte here\n  } else {\n    this.last[this.offset] = v >>> 16;\n    this._move(1);\n    this._next();\n    this.writeUInt16BE(v & 0xffff);\n  }\n};\n\nWBuf.prototype.writeUInt32BE = function writeUInt32BE(v) {\n  this._ensure(4);\n\n  // Fast case - everything fits into the last buffer\n  if (this.avail >= 4) {\n    this.last.writeUInt32BE(v, this.offset);\n    this.offset += 4;\n    this.avail -= 4;\n    this._move(4);\n\n  // Three bytes here\n  } else if (this.avail >= 3) {\n    this.writeUInt24BE(v >>> 8);\n    this._next();\n    this.last[this.offset++] = v & 0xff;\n    this.avail--;\n    this._move(1);\n\n  // Slow case, who cares\n  } else {\n    this.writeUInt16BE(v >>> 16);\n    this.writeUInt16BE(v & 0xffff);\n  }\n};\n\nWBuf.prototype.writeUInt16LE = function writeUInt16LE(num) {\n  var r = ((num & 0xff) << 8) | (num >>> 8);\n  this.writeUInt16BE(r);\n};\n\nWBuf.prototype.writeUInt24LE = function writeUInt24LE(num) {\n  var r = ((num & 0xff) << 16) | (((num >>> 8) & 0xff) << 8) | (num >>> 16);\n  this.writeUInt24BE(r);\n};\n\nWBuf.prototype.writeUInt32LE = function writeUInt32LE(num) {\n  this._ensure(4);\n\n  // Fast case - everything fits into the last buffer\n  if (this.avail >= 4) {\n    this.last.writeUInt32LE(num, this.offset);\n    this.offset += 4;\n    this.avail -= 4;\n    this._move(4);\n\n  // Three bytes here\n  } else if (this.avail >= 3) {\n    this.writeUInt24LE(num & 0xffffff);\n    this._next();\n    this.last[this.offset++] = num >>> 24;\n    this.avail--;\n    this._move(1);\n\n  // Slow case, who cares\n  } else {\n    this.writeUInt16LE(num & 0xffff);\n    this.writeUInt16LE(num >>> 16);\n  }\n};\n\nWBuf.prototype.render = function render() {\n  var left = this.size;\n  var out = [];\n\n  for (var i = 0; i < this.buffers.length && left >= 0; i++) {\n    var buf = this.buffers[i];\n    left -= buf.length;\n    if (left >= 0) {\n      out.push(buf);\n    } else {\n      out.push(buf.slice(0, buf.length + left));\n    }\n  }\n\n  return out;\n};\n\n// Signed APIs\nWBuf.prototype.writeInt8 = function writeInt8(num) {\n  if (num < 0)\n    return this.writeUInt8(0x100 + num);\n  else\n    return this.writeUInt8(num);\n};\n\nfunction toUnsigned16(num) {\n  if (num < 0)\n    return 0x10000 + num;\n  else\n    return num;\n}\n\nWBuf.prototype.writeInt16LE = function writeInt16LE(num) {\n  this.writeUInt16LE(toUnsigned16(num));\n};\n\nWBuf.prototype.writeInt16BE = function writeInt16BE(num) {\n  this.writeUInt16BE(toUnsigned16(num));\n};\n\nfunction toUnsigned24(num) {\n  if (num < 0)\n    return 0x1000000 + num;\n  else\n    return num;\n}\n\nWBuf.prototype.writeInt24LE = function writeInt24LE(num) {\n  this.writeUInt24LE(toUnsigned24(num));\n};\n\nWBuf.prototype.writeInt24BE = function writeInt24BE(num) {\n  this.writeUInt24BE(toUnsigned24(num));\n};\n\nfunction toUnsigned32(num) {\n  if (num < 0)\n    return (0xffffffff + num) + 1;\n  else\n    return num;\n}\n\nWBuf.prototype.writeInt32LE = function writeInt32LE(num) {\n  this.writeUInt32LE(toUnsigned32(num));\n};\n\nWBuf.prototype.writeInt32BE = function writeInt32BE(num) {\n  this.writeUInt32BE(toUnsigned32(num));\n};\n\nWBuf.prototype.writeComb = function writeComb(size, endian, value) {\n  if (size === 1)\n    return this.writeUInt8(value);\n\n  if (endian === 'le') {\n    if (size === 2)\n      this.writeUInt16LE(value);\n    else if (size === 3)\n      this.writeUInt24LE(value);\n    else if (size === 4)\n      this.writeUInt32LE(value);\n  } else {\n    if (size === 2)\n      this.writeUInt16BE(value);\n    else if (size === 3)\n      this.writeUInt24BE(value);\n    else if (size === 4)\n      this.writeUInt32BE(value);\n  }\n};\n"},"sourceMaps":null,"error":null,"hash":"9abc57b271c864fc929dcc0f12e5927b","cacheData":{"env":{}}}