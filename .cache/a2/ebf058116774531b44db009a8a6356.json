{"id":"../node_modules/webpack-dev-middleware/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/package.json","includedInParent":true,"mtime":1594306881658},{"name":"mime","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/mime/index.js"},{"name":"./lib/context","loc":{"line":4,"column":30},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/context.js"},{"name":"./lib/middleware","loc":{"line":5,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/middleware.js"},{"name":"./lib/reporter","loc":{"line":6,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/reporter.js"},{"name":"./lib/fs","loc":{"line":7,"column":34},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/fs.js"},{"name":"./lib/util","loc":{"line":8,"column":52},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/util.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nvar mime = require('mime');\n\nvar createContext = require('./lib/context');\n\nvar middleware = require('./lib/middleware');\n\nvar reporter = require('./lib/reporter');\n\nvar {\n  setFs,\n  toDisk\n} = require('./lib/fs');\n\nvar {\n  getFilenameFromUrl,\n  noop,\n  ready\n} = require('./lib/util');\n\nvar defaults = {\n  logLevel: 'info',\n  logTime: false,\n  logger: null,\n  mimeTypes: null,\n  reporter,\n  stats: {\n    colors: true,\n    context: process.cwd()\n  },\n  watchOptions: {\n    aggregateTimeout: 200\n  },\n  writeToDisk: false\n};\n\nmodule.exports = function wdm(compiler, opts) {\n  var options = Object.assign({}, defaults, opts);\n\n  if (options.lazy) {\n    if (typeof options.filename === 'string') {\n      var filename = options.filename.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&') // eslint-disable-line no-useless-escape\n      .replace(/\\\\\\[[a-z]+\\\\\\]/ig, '.+');\n      options.filename = new RegExp(\"^[/]{0,1}\".concat(filename, \"$\"));\n    }\n  } // defining custom MIME type\n\n\n  if (options.mimeTypes) {\n    mime.define(options.mimeTypes);\n  }\n\n  var context = createContext(compiler, options); // start watching\n\n  if (!options.lazy) {\n    var watching = compiler.watch(options.watchOptions, function (err) {\n      if (err) {\n        context.log.error(err.stack || err);\n\n        if (err.details) {\n          context.log.error(err.details);\n        }\n      }\n    });\n    context.watching = watching;\n  } else {\n    context.state = true;\n  }\n\n  if (options.writeToDisk) {\n    toDisk(context);\n  }\n\n  setFs(context, compiler);\n  return Object.assign(middleware(context), {\n    close(callback) {\n      callback = callback || noop;\n\n      if (context.watching) {\n        context.watching.close(callback);\n      } else {\n        callback();\n      }\n    },\n\n    context,\n    fileSystem: context.fs,\n    getFilenameFromUrl: getFilenameFromUrl.bind(this, context.options.publicPath, context.compiler),\n\n    invalidate(callback) {\n      callback = callback || noop;\n\n      if (context.watching) {\n        ready(context, callback, {});\n        context.watching.invalidate();\n      } else {\n        callback();\n      }\n    },\n\n    waitUntilValid(callback) {\n      callback = callback || noop;\n      ready(context, callback, {});\n    }\n\n  });\n};"},"sourceMaps":null,"error":null,"hash":"15fab696a74f364f6e1a19d4c82ca287","cacheData":{"env":{}}}