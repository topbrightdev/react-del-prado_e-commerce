{"id":"../node_modules/websocket-driver/lib/websocket/driver.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/package.json","includedInParent":true,"mtime":1594570878394},{"name":"./driver/base","loc":{"line":9,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/base.js"},{"name":"./driver/client","loc":{"line":10,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/client.js"},{"name":"./driver/server","loc":{"line":11,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/server.js"}],"generated":{"js":"'use strict'; // Protocol references:\n// \n// * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\n// * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\n// * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17\n\nvar Base = require('./driver/base'),\n    Client = require('./driver/client'),\n    Server = require('./driver/server');\n\nvar Driver = {\n  client: function (url, options) {\n    options = options || {};\n    if (options.masking === undefined) options.masking = true;\n    return new Client(url, options);\n  },\n  server: function (options) {\n    options = options || {};\n    if (options.requireMasking === undefined) options.requireMasking = true;\n    return new Server(options);\n  },\n  http: function () {\n    return Server.http.apply(Server, arguments);\n  },\n  isSecureRequest: function (request) {\n    return Server.isSecureRequest(request);\n  },\n  isWebSocket: function (request) {\n    if (request.method !== 'GET') return false;\n    var connection = request.headers.connection || '',\n        upgrade = request.headers.upgrade || '';\n    return request.method === 'GET' && connection.toLowerCase().split(/ *, */).indexOf('upgrade') >= 0 && upgrade.toLowerCase() === 'websocket';\n  },\n  validateOptions: function (options, validKeys) {\n    Base.validateOptions(options, validKeys);\n  }\n};\nmodule.exports = Driver;"},"sourceMaps":null,"error":null,"hash":"71350be11cebd9b002a07d1307200204","cacheData":{"env":{}}}