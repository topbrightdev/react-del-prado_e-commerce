{"id":"../node_modules/ansi-escapes/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/ansi-escapes/package.json","includedInParent":true,"mtime":1594570879582},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/ansi-escapes/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nconst x = module.exports;\nconst ESC = '\\u001B[';\nconst OSC = '\\u001B]';\nconst BEL = '\\u0007';\nconst SEP = ';';\nconst isTerminalApp = undefined === 'Apple_Terminal';\n\nx.cursorTo = (x, y) => {\n  if (typeof x !== 'number') {\n    throw new TypeError('The `x` argument is required');\n  }\n\n  if (typeof y !== 'number') {\n    return ESC + (x + 1) + 'G';\n  }\n\n  return ESC + (y + 1) + ';' + (x + 1) + 'H';\n};\n\nx.cursorMove = (x, y) => {\n  if (typeof x !== 'number') {\n    throw new TypeError('The `x` argument is required');\n  }\n\n  let ret = '';\n\n  if (x < 0) {\n    ret += ESC + -x + 'D';\n  } else if (x > 0) {\n    ret += ESC + x + 'C';\n  }\n\n  if (y < 0) {\n    ret += ESC + -y + 'A';\n  } else if (y > 0) {\n    ret += ESC + y + 'B';\n  }\n\n  return ret;\n};\n\nx.cursorUp = count => ESC + (typeof count === 'number' ? count : 1) + 'A';\n\nx.cursorDown = count => ESC + (typeof count === 'number' ? count : 1) + 'B';\n\nx.cursorForward = count => ESC + (typeof count === 'number' ? count : 1) + 'C';\n\nx.cursorBackward = count => ESC + (typeof count === 'number' ? count : 1) + 'D';\n\nx.cursorLeft = ESC + 'G';\nx.cursorSavePosition = ESC + (isTerminalApp ? '7' : 's');\nx.cursorRestorePosition = ESC + (isTerminalApp ? '8' : 'u');\nx.cursorGetPosition = ESC + '6n';\nx.cursorNextLine = ESC + 'E';\nx.cursorPrevLine = ESC + 'F';\nx.cursorHide = ESC + '?25l';\nx.cursorShow = ESC + '?25h';\n\nx.eraseLines = count => {\n  let clear = '';\n\n  for (let i = 0; i < count; i++) {\n    clear += x.eraseLine + (i < count - 1 ? x.cursorUp() : '');\n  }\n\n  if (count) {\n    clear += x.cursorLeft;\n  }\n\n  return clear;\n};\n\nx.eraseEndLine = ESC + 'K';\nx.eraseStartLine = ESC + '1K';\nx.eraseLine = ESC + '2K';\nx.eraseDown = ESC + 'J';\nx.eraseUp = ESC + '1J';\nx.eraseScreen = ESC + '2J';\nx.scrollUp = ESC + 'S';\nx.scrollDown = ESC + 'T';\nx.clearScreen = '\\u001Bc';\nx.beep = BEL;\n\nx.link = (text, url) => {\n  return [OSC, '8', SEP, SEP, url, BEL, text, OSC, '8', SEP, SEP, BEL].join('');\n};\n\nx.image = (buf, opts) => {\n  opts = opts || {};\n  let ret = OSC + '1337;File=inline=1';\n\n  if (opts.width) {\n    ret += \";width=\".concat(opts.width);\n  }\n\n  if (opts.height) {\n    ret += \";height=\".concat(opts.height);\n  }\n\n  if (opts.preserveAspectRatio === false) {\n    ret += ';preserveAspectRatio=0';\n  }\n\n  return ret + ':' + buf.toString('base64') + BEL;\n};\n\nx.iTerm = {};\n\nx.iTerm.setCwd = cwd => OSC + '50;CurrentDir=' + (cwd || process.cwd()) + BEL;"},"sourceMaps":null,"error":null,"hash":"bc1a2abc17643f93e86b08c002f83bb4","cacheData":{"env":{}}}