{"id":"../node_modules/postcss-image-set-function/index.es.mjs","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-image-set-function/package.json","includedInParent":true,"mtime":1594306880554},{"name":"postcss","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-image-set-function/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-image-set-function/node_modules/postcss/lib/postcss.js"},{"name":"postcss-values-parser","loc":{"line":2,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-image-set-function/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-values-parser/lib/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValuesParser = _interopRequireDefault(require(\"postcss-values-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// return whether a node is a valid comma\nvar getComma = function (node) {\n  return Object(node).type === 'comma';\n};\n\nvar imageSetFunctionMatchRegExp = /^(-webkit-)?image-set$/i; // return a valid image\n\nvar getImage = function (node) {\n  return (// <url> | <image()> | <cross-fade()> | <gradient>\n    // the image-set() function can not be nested inside of itself\n    Object(node).type === 'func' && /^(cross-fade|image|(repeating-)?(conic|linear|radial)-gradient|url)$/i.test(node.value) && !(node.parent.parent && node.parent.parent.type === 'func' && imageSetFunctionMatchRegExp.test(node.parent.parent.value)) ? String(node) : Object(node).type === 'string' ? node.value : false\n  );\n};\n\nvar dpiRatios = {\n  dpcm: 2.54,\n  dpi: 1,\n  dppx: 96,\n  x: 96\n}; // return a valid @media rule\n\nvar getMedia = function (node, mediasByDpr) {\n  if (Object(node).type === 'number' && node.unit in dpiRatios) {\n    // calculate min-device-pixel-ratio and min-resolution\n    var dpi = Number(node.value) * dpiRatios[node.unit.toLowerCase()];\n    var dpr = Math.floor(dpi / dpiRatios.x * 100) / 100;\n\n    if (dpi in mediasByDpr) {\n      return false;\n    } else {\n      var media = mediasByDpr[dpi] = _postcss.default.atRule({\n        name: 'media',\n        params: \"(-webkit-min-device-pixel-ratio: \".concat(dpr, \"), (min-resolution: \").concat(dpi, \"dpi)\")\n      });\n\n      return media;\n    }\n  } else {\n    return false;\n  }\n};\n\nvar handleInvalidation = function (opts, message, word) {\n  if (opts.oninvalid === 'warn') {\n    opts.decl.warn(opts.result, message, {\n      word: String(word)\n    });\n  } else if (opts.oninvalid === 'throw') {\n    throw opts.decl.error(message, {\n      word: String(word)\n    });\n  }\n};\n\nvar processImageSet = function (imageSetOptionNodes, decl, opts) {\n  var parent = decl.parent;\n  var mediasByDpr = {};\n  var length = imageSetOptionNodes.length;\n  var index = -1;\n\n  while (index < length) {\n    var _ref = [index < 0 ? true : getComma(imageSetOptionNodes[index]), getImage(imageSetOptionNodes[index + 1]), getMedia(imageSetOptionNodes[index + 2], mediasByDpr)],\n        comma = _ref[0],\n        value = _ref[1],\n        media = _ref[2]; // handle invalidations\n\n    if (!comma) {\n      return handleInvalidation(opts, 'unexpected comma', imageSetOptionNodes[index]);\n    } else if (!value) {\n      return handleInvalidation(opts, 'unexpected image', imageSetOptionNodes[index + 1]);\n    } else if (!media) {\n      return handleInvalidation(opts, 'unexpected resolution', imageSetOptionNodes[index + 2]);\n    } // prepare @media { decl: <image> }\n\n\n    var parentClone = parent.clone().removeAll();\n    var declClone = decl.clone({\n      value\n    });\n    parentClone.append(declClone);\n    media.append(parentClone);\n    index += 3;\n  }\n\n  var medias = Object.keys(mediasByDpr).sort(function (a, b) {\n    return a - b;\n  }).map(function (params) {\n    return mediasByDpr[params];\n  }); // conditionally prepend previous siblings\n\n  if (medias.length) {\n    var firstDecl = medias[0].nodes[0].nodes[0];\n\n    if (medias.length === 1) {\n      decl.value = firstDecl.value;\n    } else {\n      var siblings = parent.nodes;\n      var previousSiblings = siblings.slice(0, siblings.indexOf(decl)).concat(firstDecl);\n\n      if (previousSiblings.length) {\n        var _parentClone = parent.cloneBefore().removeAll();\n\n        _parentClone.append(previousSiblings);\n      } // prepend any @media { decl: <image> } rules\n\n\n      parent.before(medias.slice(1)); // conditionally remove the current rule\n\n      if (!opts.preserve) {\n        decl.remove(); // and then conditionally remove its parent\n\n        if (!parent.nodes.length) {\n          parent.remove();\n        }\n      }\n    }\n  }\n};\n\nvar imageSetValueMatchRegExp = /(^|[^\\w-])(-webkit-)?image-set\\(/;\nvar imageSetFunctionMatchRegExp$1 = /^(-webkit-)?image-set$/i;\n\nvar index = _postcss.default.plugin('postcss-image-set-function', function (opts) {\n  // prepare options\n  var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;\n  var oninvalid = 'oninvalid' in Object(opts) ? opts.oninvalid : 'ignore';\n  return function (root, result) {\n    // for every declaration\n    root.walkDecls(function (decl) {\n      var value = decl.value; // if a declaration likely uses an image-set() function\n\n      if (imageSetValueMatchRegExp.test(value)) {\n        var valueAST = (0, _postcssValuesParser.default)(value).parse(); // process every image-set() function\n\n        valueAST.walkType('func', function (node) {\n          if (imageSetFunctionMatchRegExp$1.test(node.value)) {\n            processImageSet(node.nodes.slice(1, -1), decl, {\n              decl,\n              oninvalid,\n              preserve,\n              result\n            });\n          }\n        });\n      }\n    });\n  };\n});\n\nvar _default = index;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"470bef09dfd2013f7d400ba820003e1a","cacheData":{"env":{}}}