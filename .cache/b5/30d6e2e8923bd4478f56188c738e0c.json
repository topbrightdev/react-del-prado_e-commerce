{"id":"../node_modules/postcss-color-hex-alpha/index.es.mjs","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-hex-alpha/package.json","includedInParent":true,"mtime":1594570879022},{"name":"postcss","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-hex-alpha/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-hex-alpha/node_modules/postcss/lib/postcss.js"},{"name":"postcss-values-parser","loc":{"line":2,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-color-hex-alpha/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-values-parser/lib/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValuesParser = _interopRequireDefault(require(\"postcss-values-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar index = _postcss.default.plugin('postcss-color-hex-alpha', function (opts) {\n  // whether to preserve the original hexa\n  var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false;\n  return function (root) {\n    // for each declaration with a hexa\n    root.walkDecls(function (decl) {\n      if (hasAlphaHex(decl)) {\n        // replace instances of hexa with rgba()\n        var ast = (0, _postcssValuesParser.default)(decl.value).parse();\n        walk(ast, function (node) {\n          if (isAlphaHex(node)) {\n            node.replaceWith(hexa2rgba(node));\n          }\n        }); // conditionally update the declaration\n\n        var modifiedValue = String(ast);\n\n        if (decl.value !== modifiedValue) {\n          if (preserve) {\n            decl.cloneBefore({\n              value: modifiedValue\n            });\n          } else {\n            decl.value = modifiedValue;\n          }\n        }\n      }\n    });\n  };\n}); // match any hexa\n\n\nvar alphaHexRegExp = /#([0-9A-f]{4}(?:[0-9A-f]{4})?)\\b/; // whether a node has a hexa\n\nvar hasAlphaHex = function (node) {\n  return alphaHexRegExp.test(node.value);\n}; // match an exact hexa\n\n\nvar alphaHexValueRegExp = /^#([0-9A-f]{4}(?:[0-9A-f]{4})?)$/; // walk all nodes in a value\n\nvar walk = function (node, fn) {\n  if (Object(node.nodes).length) {\n    node.nodes.slice().forEach(function (child) {\n      fn(child);\n      walk(child, fn);\n    });\n  }\n}; // decimal precision\n\n\nvar alphaDecimalPrecision = 100000; // match a hexa node\n\nvar isAlphaHex = function (node) {\n  return node.type === 'word' && alphaHexValueRegExp.test(node.value);\n};\n\nvar hexa2rgba = function (node) {\n  // hex is the node value\n  var hex = node.value; // conditionally expand a hex\n\n  var hex8 = \"0x\".concat(hex.length === 5 ? hex.slice(1).replace(/[0-9A-f]/g, '$&$&') : hex.slice(1)); // extract the red, blue, green, and alpha values from the hex\n\n  var _ref = [parseInt(hex8.slice(2, 4), 16), parseInt(hex8.slice(4, 6), 16), parseInt(hex8.slice(6, 8), 16), Math.round(parseInt(hex8.slice(8, 10), 16) / 255 * alphaDecimalPrecision) / alphaDecimalPrecision],\n      r = _ref[0],\n      g = _ref[1],\n      b = _ref[2],\n      a = _ref[3]; // return a new rgba function, preserving the whitespace of the original node\n\n  var rgbaFunc = _postcssValuesParser.default.func({\n    value: 'rgba',\n    raws: Object.assign({}, node.raws)\n  });\n\n  rgbaFunc.append(_postcssValuesParser.default.paren({\n    value: '('\n  }));\n  rgbaFunc.append(_postcssValuesParser.default.number({\n    value: r\n  }));\n  rgbaFunc.append(_postcssValuesParser.default.comma({\n    value: ','\n  }));\n  rgbaFunc.append(_postcssValuesParser.default.number({\n    value: g\n  }));\n  rgbaFunc.append(_postcssValuesParser.default.comma({\n    value: ','\n  }));\n  rgbaFunc.append(_postcssValuesParser.default.number({\n    value: b\n  }));\n  rgbaFunc.append(_postcssValuesParser.default.comma({\n    value: ','\n  }));\n  rgbaFunc.append(_postcssValuesParser.default.number({\n    value: a\n  }));\n  rgbaFunc.append(_postcssValuesParser.default.paren({\n    value: ')'\n  }));\n  return rgbaFunc;\n};\n\nvar _default = index;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"723436f7137c17358aa868b889940fb2","cacheData":{"env":{}}}