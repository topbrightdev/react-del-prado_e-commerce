{"id":"../node_modules/spdy/lib/spdy/agent.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/package.json","includedInParent":true,"mtime":1594570878666},{"name":"assert","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/assert/assert.js"},{"name":"http","loc":{"line":4,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/stream-http/index.js"},{"name":"https","loc":{"line":5,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/https-browserify/index.js"},{"name":"net","loc":{"line":6,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"util","loc":{"line":7,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"spdy-transport","loc":{"line":8,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport.js"},{"name":"debug","loc":{"line":9,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/node_modules/debug/src/browser.js"},{"name":"events","loc":{"line":16,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/events/events.js"},{"name":"../spdy","loc":{"line":18,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy/agent.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict'\n\nvar assert = require('assert')\nvar http = require('http')\nvar https = require('https')\nvar net = require('net')\nvar util = require('util')\nvar transport = require('spdy-transport')\nvar debug = require('debug')('spdy:client')\n\n// Node.js 0.10 and 0.12 support\nObject.assign = process.versions.modules >= 46\n  ? Object.assign // eslint-disable-next-line\n  : util._extend\n\nvar EventEmitter = require('events').EventEmitter\n\nvar spdy = require('../spdy')\n\nvar mode = /^v0\\.8\\./.test(process.version)\n  ? 'rusty'\n  : /^v0\\.(9|10)\\./.test(process.version)\n    ? 'old'\n    : /^v0\\.12\\./.test(process.version)\n      ? 'normal'\n      : 'modern'\n\nvar proto = {}\n\nfunction instantiate (base) {\n  function Agent (options) {\n    this._init(base, options)\n  }\n  util.inherits(Agent, base)\n\n  Agent.create = function create (options) {\n    return new Agent(options)\n  }\n\n  Object.keys(proto).forEach(function (key) {\n    Agent.prototype[key] = proto[key]\n  })\n\n  return Agent\n}\n\nproto._init = function _init (base, options) {\n  base.call(this, options)\n\n  var state = {}\n  this._spdyState = state\n\n  state.host = options.host\n  state.options = options.spdy || {}\n  state.secure = this instanceof https.Agent\n  state.fallback = false\n  state.createSocket = this._getCreateSocket()\n  state.socket = null\n  state.connection = null\n\n  // No chunked encoding\n  this.keepAlive = false\n\n  var self = this\n  this._connect(options, function (err, connection) {\n    if (err) {\n      return self.emit('error', err)\n    }\n\n    state.connection = connection\n    self.emit('_connect')\n  })\n}\n\nproto._getCreateSocket = function _getCreateSocket () {\n  // Find super's `createSocket` method\n  var createSocket\n  var cons = this.constructor.super_\n  do {\n    createSocket = cons.prototype.createSocket\n\n    if (cons.super_ === EventEmitter || !cons.super_) {\n      break\n    }\n    cons = cons.super_\n  } while (!createSocket)\n  if (!createSocket) {\n    createSocket = http.Agent.prototype.createSocket\n  }\n\n  assert(createSocket, '.createSocket() method not found')\n\n  return createSocket\n}\n\nproto._connect = function _connect (options, callback) {\n  var state = this._spdyState\n\n  var protocols = state.options.protocols || [\n    'h2',\n    'spdy/3.1', 'spdy/3', 'spdy/2',\n    'http/1.1', 'http/1.0'\n  ]\n\n  // TODO(indutny): reconnect automatically?\n  var socket = this.createConnection(Object.assign({\n    NPNProtocols: protocols,\n    ALPNProtocols: protocols,\n    servername: options.servername || options.host\n  }, options))\n  state.socket = socket\n\n  socket.setNoDelay(true)\n\n  function onError (err) {\n    return callback(err)\n  }\n  socket.on('error', onError)\n\n  socket.on(state.secure ? 'secureConnect' : 'connect', function () {\n    socket.removeListener('error', onError)\n\n    var protocol\n    if (state.secure) {\n      protocol = socket.npnProtocol ||\n                 socket.alpnProtocol ||\n                 state.options.protocol\n    } else {\n      protocol = state.options.protocol\n    }\n\n    // HTTP server - kill socket and switch to the fallback mode\n    if (!protocol || protocol === 'http/1.1' || protocol === 'http/1.0') {\n      debug('activating fallback')\n      socket.destroy()\n      state.fallback = true\n      return\n    }\n\n    debug('connected protocol=%j', protocol)\n    var connection = transport.connection.create(socket, Object.assign({\n      protocol: /spdy/.test(protocol) ? 'spdy' : 'http2',\n      isServer: false\n    }, state.options.connection || {}))\n\n    // Set version when we are certain\n    if (protocol === 'h2') {\n      connection.start(4)\n    } else if (protocol === 'spdy/3.1') {\n      connection.start(3.1)\n    } else if (protocol === 'spdy/3') {\n      connection.start(3)\n    } else if (protocol === 'spdy/2') {\n      connection.start(2)\n    } else {\n      socket.destroy()\n      callback(new Error('Unexpected protocol: ' + protocol))\n      return\n    }\n\n    if (state.options['x-forwarded-for'] !== undefined) {\n      connection.sendXForwardedFor(state.options['x-forwarded-for'])\n    }\n\n    callback(null, connection)\n  })\n}\n\nproto._createSocket = function _createSocket (req, options, callback) {\n  var state = this._spdyState\n  if (state.fallback) { return state.createSocket(req, options) }\n\n  var handle = spdy.handle.create(null, null, state.socket)\n\n  var socketOptions = {\n    handle: handle,\n    allowHalfOpen: true\n  }\n\n  var socket\n  if (state.secure) {\n    socket = new spdy.Socket(state.socket, socketOptions)\n  } else {\n    socket = new net.Socket(socketOptions)\n  }\n\n  handle.assignSocket(socket)\n  handle.assignClientRequest(req)\n\n  // Create stream only once `req.end()` is called\n  var self = this\n  handle.once('needStream', function () {\n    if (state.connection === null) {\n      self.once('_connect', function () {\n        handle.setStream(self._createStream(req, handle))\n      })\n    } else {\n      handle.setStream(self._createStream(req, handle))\n    }\n  })\n\n  // Yes, it is in reverse\n  req.on('response', function (res) {\n    handle.assignRequest(res)\n  })\n  handle.assignResponse(req)\n\n  // Handle PUSH\n  req.addListener('newListener', spdy.request.onNewListener)\n\n  // For v0.8\n  socket.readable = true\n  socket.writable = true\n\n  if (callback) {\n    return callback(null, socket)\n  }\n\n  return socket\n}\n\nif (mode === 'modern' || mode === 'normal') {\n  proto.createSocket = proto._createSocket\n} else {\n  proto.createSocket = function createSocket (name, host, port, addr, req) {\n    var state = this._spdyState\n    if (state.fallback) {\n      return state.createSocket(name, host, port, addr, req)\n    }\n\n    return this._createSocket(req, {\n      host: host,\n      port: port\n    })\n  }\n}\n\nproto._createStream = function _createStream (req, handle) {\n  var state = this._spdyState\n\n  var self = this\n  return state.connection.reserveStream({\n    method: req.method,\n    path: req.path,\n    headers: req._headers,\n    host: state.host\n  }, function (err, stream) {\n    if (err) {\n      return self.emit('error', err)\n    }\n\n    stream.on('response', function (status, headers) {\n      handle.emitResponse(status, headers)\n    })\n  })\n}\n\n// Public APIs\n\nproto.close = function close (callback) {\n  var state = this._spdyState\n\n  if (state.connection === null) {\n    this.once('_connect', function () {\n      this.close(callback)\n    })\n    return\n  }\n\n  state.connection.end(callback)\n}\n\nexports.Agent = instantiate(https.Agent)\nexports.PlainAgent = instantiate(http.Agent)\n\nexports.create = function create (base, options) {\n  if (typeof base === 'object') {\n    options = base\n    base = null\n  }\n\n  if (base) {\n    return instantiate(base).create(options)\n  }\n\n  if (options.spdy && options.spdy.plain) {\n    return exports.PlainAgent.create(options)\n  } else { return exports.Agent.create(options) }\n}\n"},"sourceMaps":null,"error":null,"hash":"ebfc6e0cb467645acc34743abb1e3657","cacheData":{"env":{}}}