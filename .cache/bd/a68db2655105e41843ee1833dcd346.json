{"id":"../node_modules/webpack-dev-middleware/lib/fs.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/package.json","includedInParent":true,"mtime":1594306881658},{"name":"fs","loc":{"line":3,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/fs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":4,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/fs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"memory-fs","loc":{"line":5,"column":33},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/fs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/memory-fs/lib/MemoryFileSystem.js"},{"name":"webpack-log","loc":{"line":6,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/fs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-log/src/index.js"},{"name":"webpack/lib/node/NodeOutputFileSystem","loc":{"line":7,"column":37},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/fs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/node/NodeOutputFileSystem.js"},{"name":"./DevMiddlewareError","loc":{"line":8,"column":35},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/fs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/DevMiddlewareError.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/lib/fs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar MemoryFileSystem = require('memory-fs');\n\nvar {\n  colors\n} = require('webpack-log');\n\nvar NodeOutputFileSystem = require('webpack/lib/node/NodeOutputFileSystem');\n\nvar DevMiddlewareError = require('./DevMiddlewareError');\n\nvar {\n  mkdirp\n} = new NodeOutputFileSystem();\nmodule.exports = {\n  toDisk(context) {\n    var compilers = context.compiler.compilers || [context.compiler];\n\n    var _loop = function (compiler) {\n      compiler.hooks.afterEmit.tap('WebpackDevMiddleware', function (compilation) {\n        var {\n          assets\n        } = compilation;\n        var {\n          log\n        } = context;\n        var {\n          writeToDisk: filter\n        } = context.options;\n        var {\n          outputPath\n        } = compiler;\n\n        if (outputPath === '/') {\n          outputPath = compiler.context;\n        }\n\n        for (var assetPath of Object.keys(assets)) {\n          var asset = assets[assetPath];\n          var source = asset.source();\n          var isAbsolute = path.isAbsolute(assetPath);\n          var writePath = isAbsolute ? assetPath : path.join(outputPath, assetPath);\n          var relativePath = path.relative(process.cwd(), writePath);\n          var allowWrite = filter && typeof filter === 'function' ? filter(writePath) : true;\n\n          if (allowWrite) {\n            var output = source;\n            mkdirp.sync(path.dirname(writePath));\n\n            if (Array.isArray(source)) {\n              output = source.join('\\n');\n            }\n\n            try {\n              fs.writeFileSync(writePath, output, 'utf-8');\n              log.debug(colors.cyan(\"Asset written to disk: \".concat(relativePath)));\n            } catch (e) {\n              log.error(\"Unable to write asset to disk:\\n\".concat(e));\n            }\n          }\n        }\n      });\n    };\n\n    for (var compiler of compilers) {\n      _loop(compiler);\n    }\n  },\n\n  setFs(context, compiler) {\n    if (typeof compiler.outputPath === 'string' && !path.posix.isAbsolute(compiler.outputPath) && !path.win32.isAbsolute(compiler.outputPath)) {\n      throw new DevMiddlewareError('`output.path` needs to be an absolute path or `/`.');\n    }\n\n    var fileSystem; // store our files in memory\n\n    var isMemoryFs = !compiler.compilers && compiler.outputFileSystem instanceof MemoryFileSystem;\n\n    if (isMemoryFs) {\n      fileSystem = compiler.outputFileSystem;\n    } else {\n      fileSystem = new MemoryFileSystem();\n      compiler.outputFileSystem = fileSystem;\n    }\n\n    context.fs = fileSystem;\n  }\n\n};"},"sourceMaps":null,"error":null,"hash":"92f3a7c571f1929250fb9a5e6ac5a3fe","cacheData":{"env":{}}}