{"id":"../node_modules/run-async/index.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/run-async/package.json","includedInParent":true,"mtime":1594570878742},{"name":"is-promise","loc":{"line":3,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/run-async/index.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/is-promise/index.js"}],"generated":{"js":"'use strict';\n\nvar isPromise = require('is-promise');\n/**\n * Return a function that will run a function asynchronously or synchronously\n *\n * example:\n * runAsync(wrappedFunction, callback)(...args);\n *\n * @param   {Function} func  Function to run\n * @param   {Function} cb    Callback function passed the `func` returned value\n * @return  {Function(arguments)} Arguments to pass to `func`. This function will in turn\n *                                return a Promise (Node >= 0.12) or call the callbacks.\n */\n\n\nvar runAsync = module.exports = function (func, cb) {\n  cb = cb || function () {};\n\n  return function () {\n    var async = false;\n    var args = arguments;\n    var promise = new Promise(function (resolve, reject) {\n      var answer = func.apply({\n        async: function () {\n          async = true;\n          return function (err, value) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(value);\n            }\n          };\n        }\n      }, Array.prototype.slice.call(args));\n\n      if (!async) {\n        if (isPromise(answer)) {\n          answer.then(resolve, reject);\n        } else {\n          resolve(answer);\n        }\n      }\n    });\n    promise.then(cb.bind(null, null), cb);\n    return promise;\n  };\n};\n\nrunAsync.cb = function (func, cb) {\n  return runAsync(function () {\n    var args = Array.prototype.slice.call(arguments);\n\n    if (args.length === func.length - 1) {\n      args.push(this.async());\n    }\n\n    return func.apply(this, args);\n  }, cb);\n};"},"sourceMaps":null,"error":null,"hash":"560bab9531eeb04d745891f58e53cdca","cacheData":{"env":{}}}