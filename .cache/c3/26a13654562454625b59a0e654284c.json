{"id":"../node_modules/webpack-dev-server/lib/utils/addEntries.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/package.json","includedInParent":true,"mtime":1594306881666},{"name":"./createDomain","loc":{"line":9,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/utils/addEntries.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/utils/createDomain.js"}],"generated":{"js":"'use strict';\n/* eslint-disable\n  no-shadow,\n  no-param-reassign,\n  array-bracket-spacing,\n  space-before-function-paren\n*/\n\nvar createDomain = require('./createDomain');\n\nfunction addEntries(config, options, server) {\n  if (options.inline !== false) {\n    // we're stubbing the app in this method as it's static and doesn't require\n    // a server to be supplied. createDomain requires an app with the\n    // address() signature.\n    var app = server || {\n      address() {\n        return {\n          port: options.port\n        };\n      }\n\n    };\n    var domain = createDomain(options, app);\n    var entries = [\"\".concat(require.resolve('../../client/'), \"?\").concat(domain)];\n\n    if (options.hotOnly) {\n      entries.push(require.resolve('webpack/hot/only-dev-server'));\n    } else if (options.hot) {\n      entries.push(require.resolve('webpack/hot/dev-server'));\n    }\n\n    var prependEntry = function prependEntry(entry) {\n      if (typeof entry === 'function') {\n        return function () {\n          return Promise.resolve(entry()).then(prependEntry);\n        };\n      }\n\n      if (typeof entry === 'object' && !Array.isArray(entry)) {\n        var clone = {};\n        Object.keys(entry).forEach(function (key) {\n          clone[key] = entries.concat(entry[key]);\n        });\n        return clone;\n      }\n\n      return entries.concat(entry);\n    };\n\n    [].concat(config).forEach(function (config) {\n      config.entry = prependEntry(config.entry || './src');\n    });\n  }\n}\n\nmodule.exports = addEntries;"},"sourceMaps":null,"error":null,"hash":"7a6565e161d372bd6db2742f16640ab6","cacheData":{"env":{}}}