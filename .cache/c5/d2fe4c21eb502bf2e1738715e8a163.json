{"id":"../node_modules/enhanced-resolve/lib/DescriptionFileUtils.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/package.json","includedInParent":true,"mtime":1594306879878},{"name":"./forEachBail","loc":{"line":7,"column":28},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/lib/DescriptionFileUtils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/lib/forEachBail.js"}],"generated":{"js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar forEachBail = require(\"./forEachBail\");\n\nfunction loadDescriptionFile(resolver, directory, filenames, resolveContext, callback) {\n  (function findDescriptionFile() {\n    forEachBail(filenames, function (filename, callback) {\n      var descriptionFilePath = resolver.join(directory, filename);\n\n      if (resolver.fileSystem.readJson) {\n        resolver.fileSystem.readJson(descriptionFilePath, function (err, content) {\n          if (err) {\n            if (typeof err.code !== \"undefined\") return callback();\n            return onJson(err);\n          }\n\n          onJson(null, content);\n        });\n      } else {\n        resolver.fileSystem.readFile(descriptionFilePath, function (err, content) {\n          if (err) return callback();\n          var json;\n\n          try {\n            json = JSON.parse(content);\n          } catch (e) {\n            onJson(e);\n          }\n\n          onJson(null, json);\n        });\n      }\n\n      function onJson(err, content) {\n        if (err) {\n          if (resolveContext.log) resolveContext.log(descriptionFilePath + \" (directory description file): \" + err);else err.message = descriptionFilePath + \" (directory description file): \" + err;\n          return callback(err);\n        }\n\n        callback(null, {\n          content: content,\n          directory: directory,\n          path: descriptionFilePath\n        });\n      }\n    }, function (err, result) {\n      if (err) return callback(err);\n\n      if (result) {\n        return callback(null, result);\n      } else {\n        directory = cdUp(directory);\n\n        if (!directory) {\n          return callback();\n        } else {\n          return findDescriptionFile();\n        }\n      }\n    });\n  })();\n}\n\nfunction getField(content, field) {\n  if (!content) return undefined;\n\n  if (Array.isArray(field)) {\n    var current = content;\n\n    for (var j = 0; j < field.length; j++) {\n      if (current === null || typeof current !== \"object\") {\n        current = null;\n        break;\n      }\n\n      current = current[field[j]];\n    }\n\n    if (typeof current === \"object\") {\n      return current;\n    }\n  } else {\n    if (typeof content[field] === \"object\") {\n      return content[field];\n    }\n  }\n}\n\nfunction cdUp(directory) {\n  if (directory === \"/\") return null;\n  var i = directory.lastIndexOf(\"/\"),\n      j = directory.lastIndexOf(\"\\\\\");\n  var p = i < 0 ? j : j < 0 ? i : i < j ? j : i;\n  if (p < 0) return null;\n  return directory.substr(0, p || 1);\n}\n\nexports.loadDescriptionFile = loadDescriptionFile;\nexports.getField = getField;\nexports.cdUp = cdUp;"},"sourceMaps":null,"error":null,"hash":"d72f20a2d2646aa1201ee31254f5e167","cacheData":{"env":{}}}