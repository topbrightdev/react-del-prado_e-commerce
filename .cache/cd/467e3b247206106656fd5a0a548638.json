{"id":"../node_modules/inquirer/lib/prompts/base.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/package.json","includedInParent":true,"mtime":1594570878526},{"name":"lodash","loc":{"line":7,"column":16},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/base.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/lodash/lodash.js"},{"name":"chalk","loc":{"line":8,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/base.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/chalk/index.js"},{"name":"run-async","loc":{"line":9,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/base.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/run-async/index.js"},{"name":"rxjs/operators","loc":{"line":10,"column":58},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/base.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/rxjs/_esm5/operators/index.js"},{"name":"../objects/choices","loc":{"line":11,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/base.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/objects/choices.js"},{"name":"../utils/screen-manager","loc":{"line":12,"column":28},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/base.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/screen-manager.js"}],"generated":{"js":"'use strict';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _ = require('lodash');\n\nvar chalk = require('chalk');\n\nvar runAsync = require('run-async');\n\nvar {\n  filter,\n  flatMap,\n  share,\n  take,\n  takeUntil\n} = require('rxjs/operators');\n\nvar Choices = require('../objects/choices');\n\nvar ScreenManager = require('../utils/screen-manager');\n\nvar Prompt = /*#__PURE__*/function () {\n  function Prompt(question, rl, answers) {\n    _classCallCheck(this, Prompt);\n\n    // Setup instance defaults property\n    _.assign(this, {\n      answers: answers,\n      status: 'pending'\n    }); // Set defaults prompt options\n\n\n    this.opt = _.defaults(_.clone(question), {\n      validate: function () {\n        return true;\n      },\n      filter: function (val) {\n        return val;\n      },\n      when: function () {\n        return true;\n      },\n      suffix: '',\n      prefix: chalk.green('?')\n    }); // Make sure name is present\n\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    } // Set default message if no message defined\n\n\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    } // Normalize choices\n\n\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n\n  _createClass(Prompt, [{\n    key: \"run\",\n    value: function run() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this._run(function (value) {\n          return resolve(value);\n        });\n      });\n    } // Default noop (this one should be overwritten in prompts)\n\n  }, {\n    key: \"_run\",\n    value: function _run(cb) {\n      cb();\n    }\n    /**\n     * Throw an error telling a required parameter is missing\n     * @param  {String} name Name of the missing param\n     * @return {Throw Error}\n     */\n\n  }, {\n    key: \"throwParamError\",\n    value: function throwParamError(name) {\n      throw new Error('You must provide a `' + name + '` parameter');\n    }\n    /**\n     * Called when the UI closes. Override to do any specific cleanup necessary\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.screen.releaseCursor();\n    }\n    /**\n     * Run the provided validation method each time a submit event occur.\n     * @param  {Rx.Observable} submit - submit event flow\n     * @return {Object}        Object containing two observables: `success` and `error`\n     */\n\n  }, {\n    key: \"handleSubmitEvents\",\n    value: function handleSubmitEvents(submit) {\n      var self = this;\n      var validate = runAsync(this.opt.validate);\n      var asyncFilter = runAsync(this.opt.filter);\n      var validation = submit.pipe(flatMap(function (value) {\n        return asyncFilter(value, self.answers).then(function (filteredValue) {\n          return validate(filteredValue, self.answers).then(function (isValid) {\n            return {\n              isValid: isValid,\n              value: filteredValue\n            };\n          }, function (err) {\n            return {\n              isValid: err\n            };\n          });\n        }, function (err) {\n          return {\n            isValid: err\n          };\n        });\n      }), share());\n      var success = validation.pipe(filter(function (state) {\n        return state.isValid === true;\n      }), take(1));\n      var error = validation.pipe(filter(function (state) {\n        return state.isValid !== true;\n      }), takeUntil(success));\n      return {\n        success: success,\n        error: error\n      };\n    }\n    /**\n     * Generate the prompt question string\n     * @return {String} prompt question string\n     */\n\n  }, {\n    key: \"getQuestion\",\n    value: function getQuestion() {\n      var message = this.opt.prefix + ' ' + chalk.bold(this.opt.message) + this.opt.suffix + chalk.reset(' '); // Append the default if available, and if question isn't answered\n\n      if (this.opt.default != null && this.status !== 'answered') {\n        // If default password is supplied, hide it\n        if (this.opt.type === 'password') {\n          message += chalk.italic.dim('[hidden] ');\n        } else {\n          message += chalk.dim('(' + this.opt.default + ') ');\n        }\n      }\n\n      return message;\n    }\n  }]);\n\n  return Prompt;\n}();\n\nmodule.exports = Prompt;"},"sourceMaps":null,"error":null,"hash":"5b903ad0d471d813e8e46f05ed6404c6","cacheData":{"env":{}}}