{"id":"../node_modules/spdy-transport/lib/spdy-transport/window.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/package.json","includedInParent":true,"mtime":1594570878662},{"name":"util","loc":{"line":3,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/window.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"events","loc":{"line":4,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/window.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/events/events.js"},{"name":"debug","loc":{"line":7,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/window.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/node_modules/debug/src/browser.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/window.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict'\n\nvar util = require('util')\nvar EventEmitter = require('events').EventEmitter\nvar debug = {\n  server: require('debug')('spdy:window:server'),\n  client: require('debug')('spdy:window:client')\n}\n\nfunction Side (window, name, options) {\n  EventEmitter.call(this)\n\n  this.name = name\n  this.window = window\n  this.current = options.size\n  this.max = options.size\n  this.limit = options.max\n  this.lowWaterMark = options.lowWaterMark === undefined\n    ? this.max / 2\n    : options.lowWaterMark\n\n  this._refilling = false\n  this._refillQueue = []\n}\nutil.inherits(Side, EventEmitter)\n\nSide.prototype.setMax = function setMax (max) {\n  this.window.debug('id=%d side=%s setMax=%d',\n                    this.window.id,\n                    this.name,\n                    max)\n  this.max = max\n  this.lowWaterMark = this.max / 2\n}\n\nSide.prototype.updateMax = function updateMax (max) {\n  var delta = max - this.max\n  this.window.debug('id=%d side=%s updateMax=%d delta=%d',\n                    this.window.id,\n                    this.name,\n                    max,\n                    delta)\n\n  this.max = max\n  this.lowWaterMark = max / 2\n\n  this.update(delta)\n}\n\nSide.prototype.setLowWaterMark = function setLowWaterMark (lwm) {\n  this.lowWaterMark = lwm\n}\n\nSide.prototype.update = function update (size, callback) {\n  // Not enough space for the update, wait for refill\n  if (size <= 0 && callback && this.isEmpty()) {\n    this.window.debug('id=%d side=%s wait for refill=%d [%d/%d]',\n                      this.window.id,\n                      this.name,\n                      -size,\n                      this.current,\n                      this.max)\n    this._refillQueue.push({\n      size: size,\n      callback: callback\n    })\n    return\n  }\n\n  this.current += size\n\n  if (this.current > this.limit) {\n    this.emit('overflow')\n    return\n  }\n\n  this.window.debug('id=%d side=%s update by=%d [%d/%d]',\n                    this.window.id,\n                    this.name,\n                    size,\n                    this.current,\n                    this.max)\n\n  // Time to send WINDOW_UPDATE\n  if (size < 0 && this.isDraining()) {\n    this.window.debug('id=%d side=%s drained', this.window.id, this.name)\n    this.emit('drain')\n  }\n\n  // Time to write\n  if (size > 0 && this.current > 0 && this.current <= size) {\n    this.window.debug('id=%d side=%s full', this.window.id, this.name)\n    this.emit('full')\n  }\n\n  this._processRefillQueue()\n\n  if (callback) { process.nextTick(callback) }\n}\n\nSide.prototype.getCurrent = function getCurrent () {\n  return this.current\n}\n\nSide.prototype.getMax = function getMax () {\n  return this.max\n}\n\nSide.prototype.getDelta = function getDelta () {\n  return this.max - this.current\n}\n\nSide.prototype.isDraining = function isDraining () {\n  return this.current <= this.lowWaterMark\n}\n\nSide.prototype.isEmpty = function isEmpty () {\n  return this.current <= 0\n}\n\n// Private\n\nSide.prototype._processRefillQueue = function _processRefillQueue () {\n  // Prevent recursion\n  if (this._refilling) {\n    return\n  }\n  this._refilling = true\n\n  while (this._refillQueue.length > 0) {\n    var item = this._refillQueue[0]\n\n    if (this.isEmpty()) {\n      break\n    }\n\n    this.window.debug('id=%d side=%s refilled for size=%d',\n                      this.window.id,\n                      this.name,\n                      -item.size)\n\n    this._refillQueue.shift()\n    this.update(item.size, item.callback)\n  }\n\n  this._refilling = false\n}\n\nfunction Window (options) {\n  this.id = options.id\n  this.isServer = options.isServer\n  this.debug = this.isServer ? debug.server : debug.client\n\n  this.recv = new Side(this, 'recv', options.recv)\n  this.send = new Side(this, 'send', options.send)\n}\nmodule.exports = Window\n\nWindow.prototype.clone = function clone (id) {\n  return new Window({\n    id: id,\n    isServer: this.isServer,\n    recv: {\n      size: this.recv.max,\n      max: this.recv.limit,\n      lowWaterMark: this.recv.lowWaterMark\n    },\n    send: {\n      size: this.send.max,\n      max: this.send.limit,\n      lowWaterMark: this.send.lowWaterMark\n    }\n  })\n}\n"},"sourceMaps":null,"error":null,"hash":"3f380d3dd24583cc5d0a6fb4867e6ea9","cacheData":{"env":{}}}