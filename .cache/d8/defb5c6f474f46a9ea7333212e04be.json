{"id":"../node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/zlib-pool.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/package.json","includedInParent":true,"mtime":1594570878662},{"name":"zlib","loc":{"line":4,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/zlib-pool.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/browserify-zlib/lib/index.js"},{"name":"../../../spdy-transport","loc":{"line":6,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/zlib-pool.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport.js"}],"generated":{"js":"'use strict'\n\nvar zlibpool = exports\nvar zlib = require('zlib')\n\nvar transport = require('../../../spdy-transport')\n\n// TODO(indutny): think about it, why has it always been Z_SYNC_FLUSH here.\n// It should be possible to manually flush stuff after the write instead\nfunction createDeflate (version, compression) {\n  var deflate = zlib.createDeflate({\n    dictionary: transport.protocol.spdy.dictionary[version],\n    flush: zlib.Z_SYNC_FLUSH,\n    windowBits: 11,\n    level: compression ? zlib.Z_DEFAULT_COMPRESSION : zlib.Z_NO_COMPRESSION\n  })\n\n  // For node.js v0.8\n  deflate._flush = zlib.Z_SYNC_FLUSH\n\n  return deflate\n}\n\nfunction createInflate (version) {\n  var inflate = zlib.createInflate({\n    dictionary: transport.protocol.spdy.dictionary[version],\n    flush: zlib.Z_SYNC_FLUSH\n  })\n\n  // For node.js v0.8\n  inflate._flush = zlib.Z_SYNC_FLUSH\n\n  return inflate\n}\n\nfunction Pool (compression) {\n  this.compression = compression\n  this.pool = {\n    2: [],\n    3: [],\n    3.1: []\n  }\n}\n\nzlibpool.create = function create (compression) {\n  return new Pool(compression)\n}\n\nPool.prototype.get = function get (version) {\n  if (this.pool[version].length > 0) {\n    return this.pool[version].pop()\n  } else {\n    var id = version\n\n    return {\n      version: version,\n      compress: createDeflate(id, this.compression),\n      decompress: createInflate(id)\n    }\n  }\n}\n\nPool.prototype.put = function put (pair) {\n  this.pool[pair.version].push(pair)\n}\n"},"sourceMaps":null,"error":null,"hash":"de1e94514260d0ca8c06378ece36e83d","cacheData":{"env":{}}}