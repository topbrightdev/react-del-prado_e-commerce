{"id":"../node_modules/websocket-driver/lib/websocket/driver/stream_reader.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/package.json","includedInParent":true,"mtime":1594570878394},{"name":"buffer","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-driver/lib/websocket/driver/stream_reader.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nvar StreamReader = function () {\n  this._queue = [];\n  this._queueSize = 0;\n  this._offset = 0;\n};\n\nStreamReader.prototype.put = function (buffer) {\n  if (!buffer || buffer.length === 0) return;\n  if (!buffer.copy) buffer = new Buffer(buffer);\n\n  this._queue.push(buffer);\n\n  this._queueSize += buffer.length;\n};\n\nStreamReader.prototype.read = function (length) {\n  if (length > this._queueSize) return null;\n  if (length === 0) return new Buffer(0);\n  this._queueSize -= length;\n  var queue = this._queue,\n      remain = length,\n      first = queue[0],\n      buffers,\n      buffer;\n\n  if (first.length >= length) {\n    if (first.length === length) {\n      return queue.shift();\n    } else {\n      buffer = first.slice(0, length);\n      queue[0] = first.slice(length);\n      return buffer;\n    }\n  }\n\n  for (var i = 0, n = queue.length; i < n; i++) {\n    if (remain < queue[i].length) break;\n    remain -= queue[i].length;\n  }\n\n  buffers = queue.splice(0, i);\n\n  if (remain > 0 && queue.length > 0) {\n    buffers.push(queue[0].slice(0, remain));\n    queue[0] = queue[0].slice(remain);\n  }\n\n  return this._concat(buffers, length);\n};\n\nStreamReader.prototype.eachByte = function (callback, context) {\n  var buffer, n, index;\n\n  while (this._queue.length > 0) {\n    buffer = this._queue[0];\n    n = buffer.length;\n\n    while (this._offset < n) {\n      index = this._offset;\n      this._offset += 1;\n      callback.call(context, buffer[index]);\n    }\n\n    this._offset = 0;\n\n    this._queue.shift();\n  }\n};\n\nStreamReader.prototype._concat = function (buffers, length) {\n  if (Buffer.concat) return Buffer.concat(buffers, length);\n  var buffer = new Buffer(length),\n      offset = 0;\n\n  for (var i = 0, n = buffers.length; i < n; i++) {\n    buffers[i].copy(buffer, offset);\n    offset += buffers[i].length;\n  }\n\n  return buffer;\n};\n\nmodule.exports = StreamReader;"},"sourceMaps":null,"error":null,"hash":"cd77f50ba978b8f0f6ab4866363e347b","cacheData":{"env":{}}}