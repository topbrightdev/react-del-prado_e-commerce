{"id":"../node_modules/sockjs/lib/webjs.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/package.json","includedInParent":true,"mtime":1594306881442},{"name":"url","loc":{"line":5,"column":16},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/webjs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/url/url.js"},{"name":"querystring","loc":{"line":7,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/webjs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/querystring-es3/index.js"},{"name":"fs","loc":{"line":9,"column":15},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/webjs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"http","loc":{"line":11,"column":17},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/webjs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/stream-http/index.js"},{"name":"./utils","loc":{"line":13,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/webjs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/utils.js"},{"name":"buffer","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/lib/webjs.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n// Generated by CoffeeScript 1.12.7\n(function() {\n  var GenericApp, execute_request, fake_response, fs, http, querystring, url, utils;\n\n  url = require('url');\n\n  querystring = require('querystring');\n\n  fs = require('fs');\n\n  http = require('http');\n\n  utils = require('./utils');\n\n  execute_request = function(app, funs, req, res, data) {\n    var fun, results, x;\n    try {\n      results = [];\n      while (funs.length > 0) {\n        fun = funs.shift();\n        req.last_fun = fun;\n        results.push(data = app[fun](req, res, data, req.next_filter));\n      }\n      return results;\n    } catch (error1) {\n      x = error1;\n      if (typeof x === 'object' && 'status' in x) {\n        if (x.status === 0) {\n          return;\n        } else if ('handle_' + x.status in app) {\n          app['handle_' + x.status](req, res, x);\n        } else {\n          app['handle_error'](req, res, x);\n        }\n      } else {\n        app['handle_error'](req, res, x);\n      }\n      return app['log_request'](req, res, true);\n    }\n  };\n\n  fake_response = function(req, res) {\n    var headers;\n    headers = {\n      'Connection': 'close'\n    };\n    res.writeHead = function(status, user_headers) {\n      var k, r, x;\n      if (user_headers == null) {\n        user_headers = {};\n      }\n      r = [];\n      r.push('HTTP/' + req.httpVersion + ' ' + status + ' ' + http.STATUS_CODES[status]);\n      utils.objectExtend(headers, user_headers);\n      for (k in headers) {\n        r.push(k + ': ' + headers[k]);\n      }\n      r = r.concat(['', '']);\n      try {\n        res.write(r.join('\\r\\n'));\n      } catch (error1) {\n        x = error1;\n      }\n      try {\n        return res.end();\n      } catch (error1) {\n        x = error1;\n      }\n    };\n    return res.setHeader = function(k, v) {\n      return headers[k] = v;\n    };\n  };\n\n  exports.generateHandler = function(app, dispatcher) {\n    return function(req, res, head) {\n      var allowed_methods, found, funs, i, j, l, len, m, method, path, ref, row;\n      if (typeof res.writeHead === \"undefined\") {\n        fake_response(req, res);\n      }\n      utils.objectExtend(req, url.parse(req.url, true));\n      req.start_date = new Date();\n      found = false;\n      allowed_methods = [];\n      for (j = 0, len = dispatcher.length; j < len; j++) {\n        row = dispatcher[j];\n        method = row[0], path = row[1], funs = row[2];\n        if (path.constructor !== Array) {\n          path = [path];\n        }\n        m = req.pathname.match(path[0]);\n        if (!m) {\n          continue;\n        }\n        if (!req.method.match(new RegExp(method))) {\n          allowed_methods.push(method);\n          continue;\n        }\n        for (i = l = 1, ref = path.length; 1 <= ref ? l < ref : l > ref; i = 1 <= ref ? ++l : --l) {\n          req[path[i]] = m[i];\n        }\n        funs = funs.slice(0);\n        funs.push('log_request');\n        req.next_filter = function(data) {\n          return execute_request(app, funs, req, res, data);\n        };\n        req.next_filter(head);\n        found = true;\n        break;\n      }\n      if (!found) {\n        if (allowed_methods.length !== 0) {\n          app['handle_405'](req, res, allowed_methods);\n        } else {\n          app['handle_404'](req, res);\n        }\n        app['log_request'](req, res, true);\n      }\n    };\n  };\n\n  exports.GenericApp = GenericApp = (function() {\n    function GenericApp() {}\n\n    GenericApp.prototype.handle_404 = function(req, res, x) {\n      if (res.finished) {\n        return x;\n      }\n      res.writeHead(404, {});\n      res.end();\n      return true;\n    };\n\n    GenericApp.prototype.handle_405 = function(req, res, methods) {\n      res.writeHead(405, {\n        'Allow': methods.join(', ')\n      });\n      res.end();\n      return true;\n    };\n\n    GenericApp.prototype.handle_error = function(req, res, x) {\n      if (res.finished) {\n        return x;\n      }\n      if (typeof x === 'object' && 'status' in x) {\n        res.writeHead(x.status, {});\n        res.end(x.message || \"\");\n      } else {\n        try {\n          res.writeHead(500, {});\n          res.end(\"500 - Internal Server Error\");\n        } catch (error1) {\n          x = error1;\n        }\n        this.log('error', 'Exception on \"' + req.method + ' ' + req.href + '\" in filter \"' + req.last_fun + '\":\\n' + (x.stack || x));\n      }\n      return true;\n    };\n\n    GenericApp.prototype.log_request = function(req, res, data) {\n      var td;\n      td = (new Date()) - req.start_date;\n      this.log('info', req.method + ' ' + req.url + ' ' + td + 'ms ' + (res.finished ? res.statusCode : '(unfinished)'));\n      return data;\n    };\n\n    GenericApp.prototype.log = function(severity, line) {\n      return console.log(line);\n    };\n\n    GenericApp.prototype.expose_html = function(req, res, content) {\n      if (res.finished) {\n        return content;\n      }\n      if (!res.getHeader('Content-Type')) {\n        res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n      }\n      return this.expose(req, res, content);\n    };\n\n    GenericApp.prototype.expose_json = function(req, res, content) {\n      if (res.finished) {\n        return content;\n      }\n      if (!res.getHeader('Content-Type')) {\n        res.setHeader('Content-Type', 'application/json');\n      }\n      return this.expose(req, res, JSON.stringify(content));\n    };\n\n    GenericApp.prototype.expose = function(req, res, content) {\n      if (res.finished) {\n        return content;\n      }\n      if (content && !res.getHeader('Content-Type')) {\n        res.setHeader('Content-Type', 'text/plain');\n      }\n      if (content) {\n        res.setHeader('Content-Length', content.length);\n      }\n      res.writeHead(res.statusCode);\n      res.end(content, 'utf8');\n      return true;\n    };\n\n    GenericApp.prototype.serve_file = function(req, res, filename, next_filter) {\n      var a;\n      a = function(error, content) {\n        if (error) {\n          res.writeHead(500);\n          res.end(\"can't read file\");\n        } else {\n          res.setHeader('Content-length', content.length);\n          res.writeHead(res.statusCode, res.headers);\n          res.end(content, 'utf8');\n        }\n        return next_filter(true);\n      };\n      fs.readFile(filename, a);\n      throw {\n        status: 0\n      };\n    };\n\n    GenericApp.prototype.cache_for = function(req, res, content) {\n      var exp;\n      res.cache_for = res.cache_for || 365 * 24 * 60 * 60;\n      res.setHeader('Cache-Control', 'public, max-age=' + res.cache_for);\n      exp = new Date();\n      exp.setTime(exp.getTime() + res.cache_for * 1000);\n      res.setHeader('Expires', exp.toGMTString());\n      return content;\n    };\n\n    GenericApp.prototype.h_no_cache = function(req, res, content) {\n      res.setHeader('Cache-Control', 'no-store, no-cache, no-transform, must-revalidate, max-age=0');\n      return content;\n    };\n\n    GenericApp.prototype.expect_form = function(req, res, _data, next_filter) {\n      var data;\n      data = new Buffer(0);\n      req.on('data', (function(_this) {\n        return function(d) {\n          return data = utils.buffer_concat(data, new Buffer(d, 'binary'));\n        };\n      })(this));\n      req.on('end', (function(_this) {\n        return function() {\n          var q;\n          data = data.toString('utf-8');\n          switch ((req.headers['content-type'] || '').split(';')[0]) {\n            case 'application/x-www-form-urlencoded':\n              q = querystring.parse(data);\n              break;\n            case 'text/plain':\n            case '':\n              q = data;\n              break;\n            default:\n              _this.log('error', \"Unsupported content-type \" + req.headers['content-type']);\n              q = void 0;\n          }\n          return next_filter(q);\n        };\n      })(this));\n      throw {\n        status: 0\n      };\n    };\n\n    GenericApp.prototype.expect_xhr = function(req, res, _data, next_filter) {\n      var data;\n      data = new Buffer(0);\n      req.on('data', (function(_this) {\n        return function(d) {\n          return data = utils.buffer_concat(data, new Buffer(d, 'binary'));\n        };\n      })(this));\n      req.on('end', (function(_this) {\n        return function() {\n          var q;\n          data = data.toString('utf-8');\n          switch ((req.headers['content-type'] || '').split(';')[0]) {\n            case 'text/plain':\n            case 'T':\n            case 'application/json':\n            case 'application/xml':\n            case '':\n            case 'text/xml':\n              q = data;\n              break;\n            default:\n              _this.log('error', 'Unsupported content-type ' + req.headers['content-type']);\n              q = void 0;\n          }\n          return next_filter(q);\n        };\n      })(this));\n      throw {\n        status: 0\n      };\n    };\n\n    return GenericApp;\n\n  })();\n\n}).call(this);\n"},"sourceMaps":null,"error":null,"hash":"9dc4988b321f53e8aebb6a595c3114db","cacheData":{"env":{}}}