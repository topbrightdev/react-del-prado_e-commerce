{"id":"../node_modules/enhanced-resolve/lib/node.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/package.json","includedInParent":true,"mtime":1594306879878},{"name":"./ResolverFactory","loc":{"line":7,"column":32},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/lib/node.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/lib/ResolverFactory.js"},{"name":"./NodeJsInputFileSystem","loc":{"line":9,"column":38},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/lib/node.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/lib/NodeJsInputFileSystem.js"},{"name":"./CachedInputFileSystem","loc":{"line":10,"column":38},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/lib/node.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js"}],"generated":{"js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar ResolverFactory = require(\"./ResolverFactory\");\n\nvar NodeJsInputFileSystem = require(\"./NodeJsInputFileSystem\");\n\nvar CachedInputFileSystem = require(\"./CachedInputFileSystem\");\n\nvar nodeFileSystem = new CachedInputFileSystem(new NodeJsInputFileSystem(), 4000);\nvar nodeContext = {\n  environments: [\"node+es3+es5+process+native\"]\n};\nvar asyncResolver = ResolverFactory.createResolver({\n  extensions: [\".js\", \".json\", \".node\"],\n  fileSystem: nodeFileSystem\n});\n\nmodule.exports = function resolve(context, path, request, resolveContext, callback) {\n  if (typeof context === \"string\") {\n    callback = resolveContext;\n    resolveContext = request;\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n\n  if (typeof callback !== \"function\") {\n    callback = resolveContext;\n  }\n\n  asyncResolver.resolve(context, path, request, resolveContext, callback);\n};\n\nvar syncResolver = ResolverFactory.createResolver({\n  extensions: [\".js\", \".json\", \".node\"],\n  useSyncFileSystemCalls: true,\n  fileSystem: nodeFileSystem\n});\n\nmodule.exports.sync = function resolveSync(context, path, request) {\n  if (typeof context === \"string\") {\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n\n  return syncResolver.resolveSync(context, path, request);\n};\n\nvar asyncContextResolver = ResolverFactory.createResolver({\n  extensions: [\".js\", \".json\", \".node\"],\n  resolveToContext: true,\n  fileSystem: nodeFileSystem\n});\n\nmodule.exports.context = function resolveContext(context, path, request, resolveContext, callback) {\n  if (typeof context === \"string\") {\n    callback = resolveContext;\n    resolveContext = request;\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n\n  if (typeof callback !== \"function\") {\n    callback = resolveContext;\n  }\n\n  asyncContextResolver.resolve(context, path, request, resolveContext, callback);\n};\n\nvar syncContextResolver = ResolverFactory.createResolver({\n  extensions: [\".js\", \".json\", \".node\"],\n  resolveToContext: true,\n  useSyncFileSystemCalls: true,\n  fileSystem: nodeFileSystem\n});\n\nmodule.exports.context.sync = function resolveContextSync(context, path, request) {\n  if (typeof context === \"string\") {\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n\n  return syncContextResolver.resolveSync(context, path, request);\n};\n\nvar asyncLoaderResolver = ResolverFactory.createResolver({\n  extensions: [\".js\", \".json\", \".node\"],\n  moduleExtensions: [\"-loader\"],\n  mainFields: [\"loader\", \"main\"],\n  fileSystem: nodeFileSystem\n});\n\nmodule.exports.loader = function resolveLoader(context, path, request, resolveContext, callback) {\n  if (typeof context === \"string\") {\n    callback = resolveContext;\n    resolveContext = request;\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n\n  if (typeof callback !== \"function\") {\n    callback = resolveContext;\n  }\n\n  asyncLoaderResolver.resolve(context, path, request, resolveContext, callback);\n};\n\nvar syncLoaderResolver = ResolverFactory.createResolver({\n  extensions: [\".js\", \".json\", \".node\"],\n  moduleExtensions: [\"-loader\"],\n  mainFields: [\"loader\", \"main\"],\n  useSyncFileSystemCalls: true,\n  fileSystem: nodeFileSystem\n});\n\nmodule.exports.loader.sync = function resolveLoaderSync(context, path, request) {\n  if (typeof context === \"string\") {\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n\n  return syncLoaderResolver.resolveSync(context, path, request);\n};\n\nmodule.exports.create = function create(options) {\n  options = Object.assign({\n    fileSystem: nodeFileSystem\n  }, options);\n  var resolver = ResolverFactory.createResolver(options);\n  return function (context, path, request, resolveContext, callback) {\n    if (typeof context === \"string\") {\n      callback = resolveContext;\n      resolveContext = request;\n      request = path;\n      path = context;\n      context = nodeContext;\n    }\n\n    if (typeof callback !== \"function\") {\n      callback = resolveContext;\n    }\n\n    resolver.resolve(context, path, request, resolveContext, callback);\n  };\n};\n\nmodule.exports.create.sync = function createSync(options) {\n  options = Object.assign({\n    useSyncFileSystemCalls: true,\n    fileSystem: nodeFileSystem\n  }, options);\n  var resolver = ResolverFactory.createResolver(options);\n  return function (context, path, request) {\n    if (typeof context === \"string\") {\n      request = path;\n      path = context;\n      context = nodeContext;\n    }\n\n    return resolver.resolveSync(context, path, request);\n  };\n}; // Export Resolver, FileSystems and Plugins\n\n\nmodule.exports.ResolverFactory = ResolverFactory;\nmodule.exports.NodeJsInputFileSystem = NodeJsInputFileSystem;\nmodule.exports.CachedInputFileSystem = CachedInputFileSystem;"},"sourceMaps":null,"error":null,"hash":"d5a709f245fbbbd5bbb876aec95bdf5d","cacheData":{"env":{}}}