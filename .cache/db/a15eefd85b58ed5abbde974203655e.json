{"id":"../node_modules/webpack/node_modules/cacache/lib/memoization.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/package.json","includedInParent":true,"mtime":1594578778157},{"name":"lru-cache","loc":{"line":3,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/cacache/lib/memoization.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/node_modules/lru-cache/index.js"}],"generated":{"js":"'use strict'\n\nconst LRU = require('lru-cache')\n\nconst MAX_SIZE = 50 * 1024 * 1024 // 50MB\nconst MAX_AGE = 3 * 60 * 1000\n\nlet MEMOIZED = new LRU({\n  max: MAX_SIZE,\n  maxAge: MAX_AGE,\n  length: (entry, key) => {\n    if (key.startsWith('key:')) {\n      return entry.data.length\n    } else if (key.startsWith('digest:')) {\n      return entry.length\n    }\n  }\n})\n\nmodule.exports.clearMemoized = clearMemoized\nfunction clearMemoized () {\n  const old = {}\n  MEMOIZED.forEach((v, k) => {\n    old[k] = v\n  })\n  MEMOIZED.reset()\n  return old\n}\n\nmodule.exports.put = put\nfunction put (cache, entry, data, opts) {\n  pickMem(opts).set(`key:${cache}:${entry.key}`, { entry, data })\n  putDigest(cache, entry.integrity, data, opts)\n}\n\nmodule.exports.put.byDigest = putDigest\nfunction putDigest (cache, integrity, data, opts) {\n  pickMem(opts).set(`digest:${cache}:${integrity}`, data)\n}\n\nmodule.exports.get = get\nfunction get (cache, key, opts) {\n  return pickMem(opts).get(`key:${cache}:${key}`)\n}\n\nmodule.exports.get.byDigest = getDigest\nfunction getDigest (cache, integrity, opts) {\n  return pickMem(opts).get(`digest:${cache}:${integrity}`)\n}\n\nclass ObjProxy {\n  constructor (obj) {\n    this.obj = obj\n  }\n  get (key) { return this.obj[key] }\n  set (key, val) { this.obj[key] = val }\n}\n\nfunction pickMem (opts) {\n  if (!opts || !opts.memoize) {\n    return MEMOIZED\n  } else if (opts.memoize.get && opts.memoize.set) {\n    return opts.memoize\n  } else if (typeof opts.memoize === 'object') {\n    return new ObjProxy(opts.memoize)\n  } else {\n    return MEMOIZED\n  }\n}\n"},"sourceMaps":null,"error":null,"hash":"c9ee5b31ff3d30441c00ecbdcf9b846a","cacheData":{"env":{}}}