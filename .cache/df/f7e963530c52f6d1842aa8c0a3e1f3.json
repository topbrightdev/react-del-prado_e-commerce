{"id":"../node_modules/http-proxy-middleware/lib/handlers.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/package.json","includedInParent":true,"mtime":1594306880062},{"name":"lodash","loc":{"line":1,"column":16},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/handlers.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/lodash/lodash.js"},{"name":"./logger","loc":{"line":2,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/handlers.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/lib/logger.js"}],"generated":{"js":"var _ = require('lodash');\n\nvar logger = require('./logger').getInstance();\n\nmodule.exports = {\n  init: init,\n  getHandlers: getProxyEventHandlers\n};\n\nfunction init(proxy, opts) {\n  var handlers = getProxyEventHandlers(opts);\n\n  _.forIn(handlers, function (handler, eventName) {\n    proxy.on(eventName, handlers[eventName]);\n  });\n\n  logger.debug('[HPM] Subscribed to http-proxy events: ', _.keys(handlers));\n}\n\nfunction getProxyEventHandlers(opts) {\n  // https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events\n  var proxyEvents = ['error', 'proxyReq', 'proxyReqWs', 'proxyRes', 'open', 'close'];\n  var handlers = {};\n\n  _.forEach(proxyEvents, function (event) {\n    // all handlers for the http-proxy events are prefixed with 'on'.\n    // loop through options and try to find these handlers\n    // and add them to the handlers object for subscription in init().\n    var eventName = _.camelCase('on ' + event);\n\n    var fnHandler = _.get(opts, eventName);\n\n    if (_.isFunction(fnHandler)) {\n      handlers[event] = fnHandler;\n    }\n  }); // add default error handler in absence of error handler\n\n\n  if (!_.isFunction(handlers.error)) {\n    handlers.error = defaultErrorHandler;\n  } // add default close handler in absence of close handler\n\n\n  if (!_.isFunction(handlers.close)) {\n    handlers.close = logClose;\n  }\n\n  return handlers;\n}\n\nfunction defaultErrorHandler(err, req, res) {\n  var host = req.headers && req.headers.host;\n  var code = err.code;\n\n  if (res.writeHead && !res.headersSent) {\n    if (/HPE_INVALID/.test(code)) {\n      res.writeHead(502);\n    } else {\n      switch (code) {\n        case 'ECONNRESET':\n        case 'ENOTFOUND':\n        case 'ECONNREFUSED':\n          res.writeHead(504);\n          break;\n\n        default:\n          res.writeHead(500);\n      }\n    }\n  }\n\n  res.end('Error occured while trying to proxy to: ' + host + req.url);\n}\n\nfunction logClose(req, socket, head) {\n  // view disconnected websocket connections\n  logger.info('[HPM] Client disconnected');\n}"},"sourceMaps":null,"error":null,"hash":"a713a5f2bf58f9cdd670d5e72ae33c4b","cacheData":{"env":{}}}