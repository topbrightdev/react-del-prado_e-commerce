{"id":"../node_modules/inquirer/lib/utils/screen-manager.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/package.json","includedInParent":true,"mtime":1594570878526},{"name":"lodash","loc":{"line":2,"column":16},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/screen-manager.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/lodash/lodash.js"},{"name":"./readline","loc":{"line":3,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/screen-manager.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/readline.js"},{"name":"cli-width","loc":{"line":4,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/screen-manager.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/cli-width/index.js"},{"name":"strip-ansi","loc":{"line":5,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/screen-manager.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/node_modules/strip-ansi/index.js"},{"name":"string-width","loc":{"line":6,"column":26},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/screen-manager.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/string-width/index.js"}],"generated":{"js":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _ = require('lodash');\n\nvar util = require('./readline');\n\nvar cliWidth = require('cli-width');\n\nvar stripAnsi = require('strip-ansi');\n\nvar stringWidth = require('string-width');\n\nfunction height(content) {\n  return content.split('\\n').length;\n}\n\nfunction lastLine(content) {\n  return _.last(content.split('\\n'));\n}\n\nvar ScreenManager = /*#__PURE__*/function () {\n  function ScreenManager(rl) {\n    _classCallCheck(this, ScreenManager);\n\n    // These variables are keeping information to allow correct prompt re-rendering\n    this.height = 0;\n    this.extraLinesUnderPrompt = 0;\n    this.rl = rl;\n  }\n\n  _createClass(ScreenManager, [{\n    key: \"render\",\n    value: function render(content, bottomContent) {\n      this.rl.output.unmute();\n      this.clean(this.extraLinesUnderPrompt);\n      /**\n       * Write message to screen and setPrompt to control backspace\n       */\n\n      var promptLine = lastLine(content);\n      var rawPromptLine = stripAnsi(promptLine); // Remove the rl.line from our prompt. We can't rely on the content of\n      // rl.line (mainly because of the password prompt), so just rely on it's\n      // length.\n\n      var prompt = rawPromptLine;\n\n      if (this.rl.line.length) {\n        prompt = prompt.slice(0, -this.rl.line.length);\n      }\n\n      this.rl.setPrompt(prompt); // SetPrompt will change cursor position, now we can get correct value\n\n      var cursorPos = this.rl._getCursorPos();\n\n      var width = this.normalizedCliWidth();\n      content = this.forceLineReturn(content, width);\n\n      if (bottomContent) {\n        bottomContent = this.forceLineReturn(bottomContent, width);\n      } // Manually insert an extra line if we're at the end of the line.\n      // This prevent the cursor from appearing at the beginning of the\n      // current line.\n\n\n      if (rawPromptLine.length % width === 0) {\n        content += '\\n';\n      }\n\n      var fullContent = content + (bottomContent ? '\\n' + bottomContent : '');\n      this.rl.output.write(fullContent);\n      /**\n       * Re-adjust the cursor at the correct position.\n       */\n      // We need to consider parts of the prompt under the cursor as part of the bottom\n      // content in order to correctly cleanup and re-render.\n\n      var promptLineUpDiff = Math.floor(rawPromptLine.length / width) - cursorPos.rows;\n      var bottomContentHeight = promptLineUpDiff + (bottomContent ? height(bottomContent) : 0);\n\n      if (bottomContentHeight > 0) {\n        util.up(this.rl, bottomContentHeight);\n      } // Reset cursor at the beginning of the line\n\n\n      util.left(this.rl, stringWidth(lastLine(fullContent))); // Adjust cursor on the right\n\n      if (cursorPos.cols > 0) {\n        util.right(this.rl, cursorPos.cols);\n      }\n      /**\n       * Set up state for next re-rendering\n       */\n\n\n      this.extraLinesUnderPrompt = bottomContentHeight;\n      this.height = height(fullContent);\n      this.rl.output.mute();\n    }\n  }, {\n    key: \"clean\",\n    value: function clean(extraLines) {\n      if (extraLines > 0) {\n        util.down(this.rl, extraLines);\n      }\n\n      util.clearLine(this.rl, this.height);\n    }\n  }, {\n    key: \"done\",\n    value: function done() {\n      this.rl.setPrompt('');\n      this.rl.output.unmute();\n      this.rl.output.write('\\n');\n    }\n  }, {\n    key: \"releaseCursor\",\n    value: function releaseCursor() {\n      if (this.extraLinesUnderPrompt > 0) {\n        util.down(this.rl, this.extraLinesUnderPrompt);\n      }\n    }\n  }, {\n    key: \"normalizedCliWidth\",\n    value: function normalizedCliWidth() {\n      var width = cliWidth({\n        defaultWidth: 80,\n        output: this.rl.output\n      });\n      return width;\n    }\n  }, {\n    key: \"breakLines\",\n    value: function breakLines(lines, width) {\n      // Break lines who're longer than the cli width so we can normalize the natural line\n      // returns behavior across terminals.\n      width = width || this.normalizedCliWidth();\n      var regex = new RegExp('(?:(?:\\\\033[[0-9;]*m)*.?){1,' + width + '}', 'g');\n      return lines.map(function (line) {\n        var chunk = line.match(regex); // Last match is always empty\n\n        chunk.pop();\n        return chunk || '';\n      });\n    }\n  }, {\n    key: \"forceLineReturn\",\n    value: function forceLineReturn(content, width) {\n      width = width || this.normalizedCliWidth();\n      return _.flatten(this.breakLines(content.split('\\n'), width)).join('\\n');\n    }\n  }]);\n\n  return ScreenManager;\n}();\n\nmodule.exports = ScreenManager;"},"sourceMaps":null,"error":null,"hash":"79d4ef5984bfd8c112e05b3e0396777c","cacheData":{"env":{}}}