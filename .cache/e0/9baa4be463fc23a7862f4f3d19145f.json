{"id":"../node_modules/postcss-pseudo-class-any-link/index.es.mjs","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-pseudo-class-any-link/package.json","includedInParent":true,"mtime":1594306880762},{"name":"postcss","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-pseudo-class-any-link/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-pseudo-class-any-link/node_modules/postcss/lib/postcss.js"},{"name":"postcss-selector-parser","loc":{"line":2,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-pseudo-class-any-link/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-selector-parser/dist/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar anyAnyLinkMatch = /:any-link/;\n\nvar index = _postcss.default.plugin('postcss-pseudo-class-any-link', function (opts) {\n  var preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;\n  return function (root) {\n    // walk each matching rule\n    root.walkRules(anyAnyLinkMatch, function (rule) {\n      var rawSelector = rule.raws.selector && rule.raws.selector.raw || rule.selector; // workaround for https://github.com/postcss/postcss-selector-parser/issues/28#issuecomment-171910556\n\n      if (rawSelector[rawSelector.length - 1] !== ':') {\n        // update the selector\n        var updatedSelector = (0, _postcssSelectorParser.default)(function (selectors) {\n          // cache variables\n          var node;\n          var nodeIndex;\n          var selector;\n          var selectorLink;\n          var selectorVisited; // cache the selector index\n\n          var selectorIndex = -1; // for each selector\n\n          while (selector = selectors.nodes[++selectorIndex]) {\n            // reset the node index\n            nodeIndex = -1; // for each node\n\n            while (node = selector.nodes[++nodeIndex]) {\n              // if the node value matches the any-link value\n              if (node.value === ':any-link') {\n                // clone the selector\n                selectorLink = selector.clone();\n                selectorVisited = selector.clone(); // update the matching clone values\n\n                selectorLink.nodes[nodeIndex].value = ':link';\n                selectorVisited.nodes[nodeIndex].value = ':visited'; // replace the selector with the clones and roll back the selector index\n\n                selectors.nodes.splice(selectorIndex--, 1, selectorLink, selectorVisited); // stop updating the selector\n\n                break;\n              }\n            }\n          }\n        }).processSync(rawSelector);\n\n        if (updatedSelector !== rawSelector) {\n          if (preserve) {\n            rule.cloneBefore({\n              selector: updatedSelector\n            });\n          } else {\n            rule.selector = updatedSelector;\n          }\n        }\n      }\n    });\n  };\n});\n\nvar _default = index;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"eacfe416ee713d5b669be1849a9bdf68","cacheData":{"env":{}}}