{"id":"../config/env.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"fs","loc":{"line":3,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/env.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":4,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/env.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"./paths","loc":{"line":5,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/env.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/paths.js"},{"name":"dotenv-expand","loc":{"line":35,"column":12},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/env.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/dotenv-expand/lib/main.js"},{"name":"dotenv","loc":{"line":36,"column":14},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/env.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/dotenv/lib/main.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/config/env.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar paths = require('./paths'); // Make sure that including paths.js after env.js will read .env variables.\n\n\ndelete require.cache[require.resolve('./paths')];\nvar NODE_ENV = \"development\";\n\nif (!NODE_ENV) {\n  throw new Error('The NODE_ENV environment variable is required but was not specified.');\n} // https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\n\n\nvar dotenvFiles = [\"\".concat(paths.dotenv, \".\").concat(NODE_ENV, \".local\"), \"\".concat(paths.dotenv, \".\").concat(NODE_ENV), // Don't include `.env.local` for `test` environment\n// since normally you expect tests to produce the same\n// results for everyone\nNODE_ENV !== 'test' && \"\".concat(paths.dotenv, \".local\"), paths.dotenv].filter(Boolean); // Load environment variables from .env* files. Suppress warnings using silent\n// if this file is missing. dotenv will never modify any environment variables\n// that have already been set.  Variable expansion is supported in .env files.\n// https://github.com/motdotla/dotenv\n// https://github.com/motdotla/dotenv-expand\n\ndotenvFiles.forEach(function (dotenvFile) {\n  if (fs.existsSync(dotenvFile)) {\n    require('dotenv-expand')(require('dotenv').config({\n      path: dotenvFile\n    }));\n  }\n}); // We support resolving modules according to `NODE_PATH`.\n// This lets you use absolute paths in imports inside large monorepos:\n// https://github.com/facebook/create-react-app/issues/253.\n// It works similar to `NODE_PATH` in Node itself:\n// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\n// Note that unlike in Node, only *relative* paths from `NODE_PATH` are honored.\n// Otherwise, we risk importing Node.js core modules into an app instead of Webpack shims.\n// https://github.com/facebook/create-react-app/issues/1023#issuecomment-265344421\n// We also resolve them to make sure all tools using them work consistently.\n\nvar appDirectory = fs.realpathSync(process.cwd());\nundefined = (undefined || '').split(path.delimiter).filter(function (folder) {\n  return folder && !path.isAbsolute(folder);\n}).map(function (folder) {\n  return path.resolve(appDirectory, folder);\n}).join(path.delimiter); // Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be\n// injected into the application via DefinePlugin in Webpack configuration.\n\nvar REACT_APP = /^REACT_APP_/i;\n\nfunction getClientEnvironment(publicUrl) {\n  var raw = Object.keys(process.env).filter(function (key) {\n    return REACT_APP.test(key);\n  }).reduce(function (env, key) {\n    env[key] = process.env[key];\n    return env;\n  }, {\n    // Useful for determining whether weâ€™re running in production mode.\n    // Most importantly, it switches React into the correct mode.\n    NODE_ENV: \"development\" || 'development',\n    // Useful for resolving the correct path to static assets in `public`.\n    // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\n    // This should only be used as an escape hatch. Normally you would put\n    // images into the `src` and `import` them in code to get their paths.\n    PUBLIC_URL: publicUrl\n  }); // Stringify all values so we can feed into Webpack DefinePlugin\n\n  var stringified = {\n    'process.env': Object.keys(raw).reduce(function (env, key) {\n      env[key] = JSON.stringify(raw[key]);\n      return env;\n    }, {})\n  };\n  return {\n    raw: raw,\n    stringified: stringified\n  };\n}\n\nmodule.exports = getClientEnvironment;"},"sourceMaps":null,"error":null,"hash":"a9c7c44df2675551a193e1df9c380e80","cacheData":{"env":{"NODE_ENV":"development"}}}