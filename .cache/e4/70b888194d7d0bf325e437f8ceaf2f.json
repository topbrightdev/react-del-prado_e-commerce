{"id":"../node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/extglob/lib/parsers.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/extglob/package.json","includedInParent":true,"mtime":1594306880006},{"name":"expand-brackets","loc":{"line":3,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/extglob/lib/parsers.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/expand-brackets/index.js"},{"name":"define-property","loc":{"line":4,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/extglob/lib/parsers.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/extglob/node_modules/define-property/index.js"},{"name":"./utils","loc":{"line":5,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/extglob/lib/parsers.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/extglob/lib/utils.js"}],"generated":{"js":"\n'use strict';\n\nvar brackets = require('expand-brackets');\n\nvar define = require('define-property');\n\nvar utils = require('./utils');\n/**\n * Characters to use in text regex (we want to \"not\" match\n * characters that are matched by other parsers)\n */\n\n\nvar TEXT_REGEX = '([!@*?+]?\\\\(|\\\\)|[*?.+\\\\\\\\]|\\\\[:?(?=.*\\\\])|:?\\\\])+';\nvar not = utils.createRegex(TEXT_REGEX);\n/**\n * Extglob parsers\n */\n\nfunction parsers(extglob) {\n  extglob.state = extglob.state || {};\n  /**\n   * Use `expand-brackets` parsers\n   */\n\n  extglob.use(brackets.parsers);\n  extglob.parser.sets.paren = extglob.parser.sets.paren || [];\n  extglob.parser\n  /**\n   * Extglob open: \"*(\"\n   */\n  .capture('paren.open', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^([!@*?+])?\\(/);\n    if (!m) return;\n    var prev = this.prev();\n    var prefix = m[1];\n    var val = m[0];\n    var open = pos({\n      type: 'paren.open',\n      parsed: parsed,\n      val: val\n    });\n    var node = pos({\n      type: 'paren',\n      prefix: prefix,\n      nodes: [open]\n    }); // if nested negation extglobs, just cancel them out to simplify\n\n    if (prefix === '!' && prev.type === 'paren' && prev.prefix === '!') {\n      prev.prefix = '@';\n      node.prefix = '@';\n    }\n\n    define(node, 'rest', this.input);\n    define(node, 'parsed', parsed);\n    define(node, 'parent', prev);\n    define(open, 'parent', node);\n    this.push('paren', node);\n    prev.nodes.push(node);\n  })\n  /**\n   * Extglob close: \")\"\n   */\n  .capture('paren.close', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\)/);\n    if (!m) return;\n    var parent = this.pop('paren');\n    var node = pos({\n      type: 'paren.close',\n      rest: this.input,\n      parsed: parsed,\n      val: m[0]\n    });\n\n    if (!this.isType(parent, 'paren')) {\n      if (this.options.strict) {\n        throw new Error('missing opening paren: \"(\"');\n      }\n\n      node.escaped = true;\n      return node;\n    }\n\n    node.prefix = parent.prefix;\n    parent.nodes.push(node);\n    define(node, 'parent', parent);\n  })\n  /**\n   * Escape: \"\\\\.\"\n   */\n  .capture('escape', function () {\n    var pos = this.position();\n    var m = this.match(/^\\\\(.)/);\n    if (!m) return;\n    return pos({\n      type: 'escape',\n      val: m[0],\n      ch: m[1]\n    });\n  })\n  /**\n   * Question marks: \"?\"\n   */\n  .capture('qmark', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\?+(?!\\()/);\n    if (!m) return;\n    extglob.state.metachar = true;\n    return pos({\n      type: 'qmark',\n      rest: this.input,\n      parsed: parsed,\n      val: m[0]\n    });\n  })\n  /**\n   * Character parsers\n   */\n  .capture('star', /^\\*(?!\\()/).capture('plus', /^\\+(?!\\()/).capture('dot', /^\\./).capture('text', not);\n}\n\n;\n/**\n * Expose text regex string\n */\n\nmodule.exports.TEXT_REGEX = TEXT_REGEX;\n/**\n * Extglob parsers\n */\n\nmodule.exports = parsers;"},"sourceMaps":null,"error":null,"hash":"c3e4a6ac4b22944469fc4dfaa650b02d","cacheData":{"env":{}}}