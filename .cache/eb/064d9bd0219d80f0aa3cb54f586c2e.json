{"id":"../node_modules/source-list-map/lib/SingleLineNode.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/package.json","includedInParent":true,"mtime":1594717993842},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/source-list-map/package.json","includedInParent":true,"mtime":1594306881450},{"name":"./base64-vlq","loc":{"line":7,"column":26},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/source-list-map/lib/SingleLineNode.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/source-list-map/lib/base64-vlq.js"},{"name":"./helpers","loc":{"line":9,"column":34},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/source-list-map/lib/SingleLineNode.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/source-list-map/lib/helpers.js"},{"name":"./SourceNode","loc":{"line":93,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/source-list-map/lib/SingleLineNode.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/source-list-map/lib/SourceNode.js"}],"generated":{"js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nconst LINE_MAPPING = \";AAAA\";\n\nclass SingleLineNode {\n\n\tconstructor(generatedCode, source, originalSource, line) {\n\t\tthis.generatedCode = generatedCode;\n\t\tthis.originalSource = originalSource;\n\t\tthis.source = source;\n\t\tthis.line = line || 1;\n\t\tthis._numberOfLines = getNumberOfLines(this.generatedCode);\n\t\tthis._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n\t}\n\n\tclone() {\n\t\treturn new SingleLineNode(this.generatedCode, this.source, this.originalSource, this.line);\n\t}\n\n\tgetGeneratedCode() {\n\t\treturn this.generatedCode;\n\t}\n\n\tgetMappings(mappingsContext) {\n\t\tif(!this.generatedCode)\n\t\t\treturn \"\";\n\t\tconst lines = this._numberOfLines;\n\t\tconst sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n\t\tlet mappings = \"A\"; // generated column 0\n\t\tif(mappingsContext.unfinishedGeneratedLine)\n\t\t\tmappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n\t\tmappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\t\tmappings += base64VLQ.encode(this.line - mappingsContext.currentOriginalLine); // original line index\n\t\tmappings += \"A\"; // original column 0\n\t\tmappingsContext.currentSource = sourceIdx;\n\t\tmappingsContext.currentOriginalLine = this.line;\n\t\tconst unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode)\n\t\tmappings += Array(lines).join(LINE_MAPPING);\n\t\tif(unfinishedGeneratedLine === 0) {\n\t\t\tmappings += \";\";\n\t\t} else {\n\t\t\tif(lines !== 0)\n\t\t\t\tmappings += LINE_MAPPING;\n\t\t}\n\t\treturn mappings;\n\t}\n\n\tgetNormalizedNodes() {\n\t\treturn [this];\n\t}\n\n\tmapGeneratedCode(fn) {\n\t\tconst generatedCode = fn(this.generatedCode);\n\t\treturn new SingleLineNode(generatedCode, this.source, this.originalSource, this.line);\n\t}\n\n\tmerge(otherNode) {\n\t\tif(otherNode instanceof SingleLineNode) {\n\t\t\treturn this.mergeSingleLineNode(otherNode);\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSingleLineNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis.originalSource === otherNode.originalSource) {\n\t\t\tif(this.line === otherNode.line) {\n\t\t\t\tthis.generatedCode += otherNode.generatedCode;\n\t\t\t\tthis._numberOfLines += otherNode._numberOfLines;\n\t\t\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t\t\t\treturn this;\n\t\t\t} else if(this.line + 1 === otherNode.line && \n\t\t\t\tthis._endsWithNewLine &&\n\t\t\t\tthis._numberOfLines === 1 && \n\t\t\t\totherNode._numberOfLines <= 1) {\n\t\t\t\treturn new SourceNode(this.generatedCode + otherNode.generatedCode, this.source, this.originalSource, this.line);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nmodule.exports = SingleLineNode;\n\nconst SourceNode = require(\"./SourceNode\"); // circular dependency\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/source-list-map/lib/SingleLineNode.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}}],"sources":{"../node_modules/source-list-map/lib/SingleLineNode.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nconst LINE_MAPPING = \";AAAA\";\n\nclass SingleLineNode {\n\n\tconstructor(generatedCode, source, originalSource, line) {\n\t\tthis.generatedCode = generatedCode;\n\t\tthis.originalSource = originalSource;\n\t\tthis.source = source;\n\t\tthis.line = line || 1;\n\t\tthis._numberOfLines = getNumberOfLines(this.generatedCode);\n\t\tthis._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n\t}\n\n\tclone() {\n\t\treturn new SingleLineNode(this.generatedCode, this.source, this.originalSource, this.line);\n\t}\n\n\tgetGeneratedCode() {\n\t\treturn this.generatedCode;\n\t}\n\n\tgetMappings(mappingsContext) {\n\t\tif(!this.generatedCode)\n\t\t\treturn \"\";\n\t\tconst lines = this._numberOfLines;\n\t\tconst sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n\t\tlet mappings = \"A\"; // generated column 0\n\t\tif(mappingsContext.unfinishedGeneratedLine)\n\t\t\tmappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n\t\tmappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\t\tmappings += base64VLQ.encode(this.line - mappingsContext.currentOriginalLine); // original line index\n\t\tmappings += \"A\"; // original column 0\n\t\tmappingsContext.currentSource = sourceIdx;\n\t\tmappingsContext.currentOriginalLine = this.line;\n\t\tconst unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode)\n\t\tmappings += Array(lines).join(LINE_MAPPING);\n\t\tif(unfinishedGeneratedLine === 0) {\n\t\t\tmappings += \";\";\n\t\t} else {\n\t\t\tif(lines !== 0)\n\t\t\t\tmappings += LINE_MAPPING;\n\t\t}\n\t\treturn mappings;\n\t}\n\n\tgetNormalizedNodes() {\n\t\treturn [this];\n\t}\n\n\tmapGeneratedCode(fn) {\n\t\tconst generatedCode = fn(this.generatedCode);\n\t\treturn new SingleLineNode(generatedCode, this.source, this.originalSource, this.line);\n\t}\n\n\tmerge(otherNode) {\n\t\tif(otherNode instanceof SingleLineNode) {\n\t\t\treturn this.mergeSingleLineNode(otherNode);\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSingleLineNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis.originalSource === otherNode.originalSource) {\n\t\t\tif(this.line === otherNode.line) {\n\t\t\t\tthis.generatedCode += otherNode.generatedCode;\n\t\t\t\tthis._numberOfLines += otherNode._numberOfLines;\n\t\t\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t\t\t\treturn this;\n\t\t\t} else if(this.line + 1 === otherNode.line && \n\t\t\t\tthis._endsWithNewLine &&\n\t\t\t\tthis._numberOfLines === 1 && \n\t\t\t\totherNode._numberOfLines <= 1) {\n\t\t\t\treturn new SourceNode(this.generatedCode + otherNode.generatedCode, this.source, this.originalSource, this.line);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nmodule.exports = SingleLineNode;\n\nconst SourceNode = require(\"./SourceNode\"); // circular dependency\n"},"lineCount":94}},"error":null,"hash":"24c3d2593fad5582f300af32ba0ed1e1","cacheData":{"env":{}}}