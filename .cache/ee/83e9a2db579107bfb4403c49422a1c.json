{"id":"../node_modules/picomatch/lib/parse.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/picomatch/package.json","includedInParent":true,"mtime":1594578778241},{"name":"./constants","loc":{"line":3,"column":26},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/picomatch/lib/parse.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/picomatch/lib/constants.js"},{"name":"./utils","loc":{"line":4,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/picomatch/lib/parse.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/picomatch/lib/utils.js"}],"generated":{"js":"'use strict';\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar constants = require('./constants');\n\nvar utils = require('./utils');\n/**\n * Constants\n */\n\n\nvar MAX_LENGTH = constants.MAX_LENGTH,\n    POSIX_REGEX_SOURCE = constants.POSIX_REGEX_SOURCE,\n    REGEX_NON_SPECIAL_CHARS = constants.REGEX_NON_SPECIAL_CHARS,\n    REGEX_SPECIAL_CHARS_BACKREF = constants.REGEX_SPECIAL_CHARS_BACKREF,\n    REPLACEMENTS = constants.REPLACEMENTS;\n/**\n * Helpers\n */\n\nvar expandRange = function expandRange(args, options) {\n  if (typeof options.expandRange === 'function') {\n    return options.expandRange.apply(options, _toConsumableArray(args).concat([options]));\n  }\n\n  args.sort();\n  var value = \"[\".concat(args.join('-'), \"]\");\n\n  try {\n    /* eslint-disable-next-line no-new */\n    new RegExp(value);\n  } catch (ex) {\n    return args.map(function (v) {\n      return utils.escapeRegex(v);\n    }).join('..');\n  }\n\n  return value;\n};\n/**\n * Create the message for a syntax error\n */\n\n\nvar syntaxError = function syntaxError(type, char) {\n  return \"Missing \".concat(type, \": \\\"\").concat(char, \"\\\" - use \\\"\\\\\\\\\").concat(char, \"\\\" to match literal characters\");\n};\n/**\n * Parse the given input string.\n * @param {String} input\n * @param {Object} options\n * @return {Object}\n */\n\n\nvar parse = function parse(input, options) {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  input = REPLACEMENTS[input] || input;\n\n  var opts = _objectSpread({}, options);\n\n  var max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  var len = input.length;\n\n  if (len > max) {\n    throw new SyntaxError(\"Input length: \".concat(len, \", exceeds maximum allowed length: \").concat(max));\n  }\n\n  var bos = {\n    type: 'bos',\n    value: '',\n    output: opts.prepend || ''\n  };\n  var tokens = [bos];\n  var capture = opts.capture ? '' : '?:';\n  var win32 = utils.isWindows(options); // create constants based on platform, for windows or posix\n\n  var PLATFORM_CHARS = constants.globChars(win32);\n  var EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);\n  var DOT_LITERAL = PLATFORM_CHARS.DOT_LITERAL,\n      PLUS_LITERAL = PLATFORM_CHARS.PLUS_LITERAL,\n      SLASH_LITERAL = PLATFORM_CHARS.SLASH_LITERAL,\n      ONE_CHAR = PLATFORM_CHARS.ONE_CHAR,\n      DOTS_SLASH = PLATFORM_CHARS.DOTS_SLASH,\n      NO_DOT = PLATFORM_CHARS.NO_DOT,\n      NO_DOT_SLASH = PLATFORM_CHARS.NO_DOT_SLASH,\n      NO_DOTS_SLASH = PLATFORM_CHARS.NO_DOTS_SLASH,\n      QMARK = PLATFORM_CHARS.QMARK,\n      QMARK_NO_DOT = PLATFORM_CHARS.QMARK_NO_DOT,\n      STAR = PLATFORM_CHARS.STAR,\n      START_ANCHOR = PLATFORM_CHARS.START_ANCHOR;\n\n  var globstar = function globstar(opts) {\n    return \"(\".concat(capture, \"(?:(?!\").concat(START_ANCHOR).concat(opts.dot ? DOTS_SLASH : DOT_LITERAL, \").)*?)\");\n  };\n\n  var nodot = opts.dot ? '' : NO_DOT;\n  var qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\n  var star = opts.bash === true ? globstar(opts) : STAR;\n\n  if (opts.capture) {\n    star = \"(\".concat(star, \")\");\n  } // minimatch options support\n\n\n  if (typeof opts.noext === 'boolean') {\n    opts.noextglob = opts.noext;\n  }\n\n  var state = {\n    input,\n    index: -1,\n    start: 0,\n    dot: opts.dot === true,\n    consumed: '',\n    output: '',\n    prefix: '',\n    backtrack: false,\n    negated: false,\n    brackets: 0,\n    braces: 0,\n    parens: 0,\n    quotes: 0,\n    globstar: false,\n    tokens\n  };\n  input = utils.removePrefix(input, state);\n  len = input.length;\n  var extglobs = [];\n  var braces = [];\n  var stack = [];\n  var prev = bos;\n  var value;\n  /**\n   * Tokenizing helpers\n   */\n\n  var eos = function eos() {\n    return state.index === len - 1;\n  };\n\n  var peek = state.peek = function () {\n    var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return input[state.index + n];\n  };\n\n  var advance = state.advance = function () {\n    return input[++state.index];\n  };\n\n  var remaining = function remaining() {\n    return input.slice(state.index + 1);\n  };\n\n  var consume = function consume() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    state.consumed += value;\n    state.index += num;\n  };\n\n  var append = function append(token) {\n    state.output += token.output != null ? token.output : token.value;\n    consume(token.value);\n  };\n\n  var negate = function negate() {\n    var count = 1;\n\n    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\n      advance();\n      state.start++;\n      count++;\n    }\n\n    if (count % 2 === 0) {\n      return false;\n    }\n\n    state.negated = true;\n    state.start++;\n    return true;\n  };\n\n  var increment = function increment(type) {\n    state[type]++;\n    stack.push(type);\n  };\n\n  var decrement = function decrement(type) {\n    state[type]--;\n    stack.pop();\n  };\n  /**\n   * Push tokens onto the tokens array. This helper speeds up\n   * tokenizing by 1) helping us avoid backtracking as much as possible,\n   * and 2) helping us avoid creating extra tokens when consecutive\n   * characters are plain text. This improves performance and simplifies\n   * lookbehinds.\n   */\n\n\n  var push = function push(tok) {\n    if (prev.type === 'globstar') {\n      var isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\n      var isExtglob = tok.extglob === true || extglobs.length && (tok.type === 'pipe' || tok.type === 'paren');\n\n      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\n        state.output = state.output.slice(0, -prev.output.length);\n        prev.type = 'star';\n        prev.value = '*';\n        prev.output = star;\n        state.output += prev.output;\n      }\n    }\n\n    if (extglobs.length && tok.type !== 'paren' && !EXTGLOB_CHARS[tok.value]) {\n      extglobs[extglobs.length - 1].inner += tok.value;\n    }\n\n    if (tok.value || tok.output) append(tok);\n\n    if (prev && prev.type === 'text' && tok.type === 'text') {\n      prev.value += tok.value;\n      prev.output = (prev.output || '') + tok.value;\n      return;\n    }\n\n    tok.prev = prev;\n    tokens.push(tok);\n    prev = tok;\n  };\n\n  var extglobOpen = function extglobOpen(type, value) {\n    var token = _objectSpread(_objectSpread({}, EXTGLOB_CHARS[value]), {}, {\n      conditions: 1,\n      inner: ''\n    });\n\n    token.prev = prev;\n    token.parens = state.parens;\n    token.output = state.output;\n    var output = (opts.capture ? '(' : '') + token.open;\n    increment('parens');\n    push({\n      type,\n      value,\n      output: state.output ? '' : ONE_CHAR\n    });\n    push({\n      type: 'paren',\n      extglob: true,\n      value: advance(),\n      output\n    });\n    extglobs.push(token);\n  };\n\n  var extglobClose = function extglobClose(token) {\n    var output = token.close + (opts.capture ? ')' : '');\n\n    if (token.type === 'negate') {\n      var extglobStar = star;\n\n      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\n        extglobStar = globstar(opts);\n      }\n\n      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\n        output = token.close = \")$))\".concat(extglobStar);\n      }\n\n      if (token.prev.type === 'bos' && eos()) {\n        state.negatedExtglob = true;\n      }\n    }\n\n    push({\n      type: 'paren',\n      extglob: true,\n      value,\n      output\n    });\n    decrement('parens');\n  };\n  /**\n   * Fast paths\n   */\n\n\n  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}\"])/.test(input)) {\n    var backslashes = false;\n    var output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, function (m, esc, chars, first, rest, index) {\n      if (first === '\\\\') {\n        backslashes = true;\n        return m;\n      }\n\n      if (first === '?') {\n        if (esc) {\n          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\n        }\n\n        if (index === 0) {\n          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\n        }\n\n        return QMARK.repeat(chars.length);\n      }\n\n      if (first === '.') {\n        return DOT_LITERAL.repeat(chars.length);\n      }\n\n      if (first === '*') {\n        if (esc) {\n          return esc + first + (rest ? star : '');\n        }\n\n        return star;\n      }\n\n      return esc ? m : \"\\\\\".concat(m);\n    });\n\n    if (backslashes === true) {\n      if (opts.unescape === true) {\n        output = output.replace(/\\\\/g, '');\n      } else {\n        output = output.replace(/\\\\+/g, function (m) {\n          return m.length % 2 === 0 ? '\\\\\\\\' : m ? '\\\\' : '';\n        });\n      }\n    }\n\n    if (output === input && opts.contains === true) {\n      state.output = input;\n      return state;\n    }\n\n    state.output = utils.wrapOutput(output, state, options);\n    return state;\n  }\n  /**\n   * Tokenize input until we reach end-of-string\n   */\n\n\n  while (!eos()) {\n    value = advance();\n\n    if (value === '\\u0000') {\n      continue;\n    }\n    /**\n     * Escaped characters\n     */\n\n\n    if (value === '\\\\') {\n      var next = peek();\n\n      if (next === '/' && opts.bash !== true) {\n        continue;\n      }\n\n      if (next === '.' || next === ';') {\n        continue;\n      }\n\n      if (!next) {\n        value += '\\\\';\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      } // collapse slashes to reduce potential for exploits\n\n\n      var match = /^\\\\+/.exec(remaining());\n      var slashes = 0;\n\n      if (match && match[0].length > 2) {\n        slashes = match[0].length;\n        state.index += slashes;\n\n        if (slashes % 2 !== 0) {\n          value += '\\\\';\n        }\n      }\n\n      if (opts.unescape === true) {\n        value = advance() || '';\n      } else {\n        value += advance() || '';\n      }\n\n      if (state.brackets === 0) {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n    }\n    /**\n     * If we're inside a regex character class, continue\n     * until we reach the closing bracket.\n     */\n\n\n    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\n      if (opts.posix !== false && value === ':') {\n        var inner = prev.value.slice(1);\n\n        if (inner.includes('[')) {\n          prev.posix = true;\n\n          if (inner.includes(':')) {\n            var idx = prev.value.lastIndexOf('[');\n            var pre = prev.value.slice(0, idx);\n\n            var _rest = prev.value.slice(idx + 2);\n\n            var posix = POSIX_REGEX_SOURCE[_rest];\n\n            if (posix) {\n              prev.value = pre + posix;\n              state.backtrack = true;\n              advance();\n\n              if (!bos.output && tokens.indexOf(prev) === 1) {\n                bos.output = ONE_CHAR;\n              }\n\n              continue;\n            }\n          }\n        }\n      }\n\n      if (value === '[' && peek() !== ':' || value === '-' && peek() === ']') {\n        value = \"\\\\\".concat(value);\n      }\n\n      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\n        value = \"\\\\\".concat(value);\n      }\n\n      if (opts.posix === true && value === '!' && prev.value === '[') {\n        value = '^';\n      }\n\n      prev.value += value;\n      append({\n        value\n      });\n      continue;\n    }\n    /**\n     * If we're inside a quoted string, continue\n     * until we reach the closing double quote.\n     */\n\n\n    if (state.quotes === 1 && value !== '\"') {\n      value = utils.escapeRegex(value);\n      prev.value += value;\n      append({\n        value\n      });\n      continue;\n    }\n    /**\n     * Double quotes\n     */\n\n\n    if (value === '\"') {\n      state.quotes = state.quotes === 1 ? 0 : 1;\n\n      if (opts.keepQuotes === true) {\n        push({\n          type: 'text',\n          value\n        });\n      }\n\n      continue;\n    }\n    /**\n     * Parentheses\n     */\n\n\n    if (value === '(') {\n      increment('parens');\n      push({\n        type: 'paren',\n        value\n      });\n      continue;\n    }\n\n    if (value === ')') {\n      if (state.parens === 0 && opts.strictBrackets === true) {\n        throw new SyntaxError(syntaxError('opening', '('));\n      }\n\n      var extglob = extglobs[extglobs.length - 1];\n\n      if (extglob && state.parens === extglob.parens + 1) {\n        extglobClose(extglobs.pop());\n        continue;\n      }\n\n      push({\n        type: 'paren',\n        value,\n        output: state.parens ? ')' : '\\\\)'\n      });\n      decrement('parens');\n      continue;\n    }\n    /**\n     * Square brackets\n     */\n\n\n    if (value === '[') {\n      if (opts.nobracket === true || !remaining().includes(']')) {\n        if (opts.nobracket !== true && opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('closing', ']'));\n        }\n\n        value = \"\\\\\".concat(value);\n      } else {\n        increment('brackets');\n      }\n\n      push({\n        type: 'bracket',\n        value\n      });\n      continue;\n    }\n\n    if (value === ']') {\n      if (opts.nobracket === true || prev && prev.type === 'bracket' && prev.value.length === 1) {\n        push({\n          type: 'text',\n          value,\n          output: \"\\\\\".concat(value)\n        });\n        continue;\n      }\n\n      if (state.brackets === 0) {\n        if (opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('opening', '['));\n        }\n\n        push({\n          type: 'text',\n          value,\n          output: \"\\\\\".concat(value)\n        });\n        continue;\n      }\n\n      decrement('brackets');\n      var prevValue = prev.value.slice(1);\n\n      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\n        value = \"/\".concat(value);\n      }\n\n      prev.value += value;\n      append({\n        value\n      }); // when literal brackets are explicitly disabled\n      // assume we should match with a regex character class\n\n      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {\n        continue;\n      }\n\n      var escaped = utils.escapeRegex(prev.value);\n      state.output = state.output.slice(0, -prev.value.length); // when literal brackets are explicitly enabled\n      // assume we should escape the brackets to match literal characters\n\n      if (opts.literalBrackets === true) {\n        state.output += escaped;\n        prev.value = escaped;\n        continue;\n      } // when the user specifies nothing, try to match both\n\n\n      prev.value = \"(\".concat(capture).concat(escaped, \"|\").concat(prev.value, \")\");\n      state.output += prev.value;\n      continue;\n    }\n    /**\n     * Braces\n     */\n\n\n    if (value === '{' && opts.nobrace !== true) {\n      increment('braces');\n      var open = {\n        type: 'brace',\n        value,\n        output: '(',\n        outputIndex: state.output.length,\n        tokensIndex: state.tokens.length\n      };\n      braces.push(open);\n      push(open);\n      continue;\n    }\n\n    if (value === '}') {\n      var brace = braces[braces.length - 1];\n\n      if (opts.nobrace === true || !brace) {\n        push({\n          type: 'text',\n          value,\n          output: value\n        });\n        continue;\n      }\n\n      var _output = ')';\n\n      if (brace.dots === true) {\n        var arr = tokens.slice();\n        var range = [];\n\n        for (var i = arr.length - 1; i >= 0; i--) {\n          tokens.pop();\n\n          if (arr[i].type === 'brace') {\n            break;\n          }\n\n          if (arr[i].type !== 'dots') {\n            range.unshift(arr[i].value);\n          }\n        }\n\n        _output = expandRange(range, opts);\n        state.backtrack = true;\n      }\n\n      if (brace.comma !== true && brace.dots !== true) {\n        var out = state.output.slice(0, brace.outputIndex);\n        var toks = state.tokens.slice(brace.tokensIndex);\n        brace.value = brace.output = '\\\\{';\n        value = _output = '\\\\}';\n        state.output = out;\n\n        var _iterator = _createForOfIteratorHelper(toks),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var t = _step.value;\n            state.output += t.output || t.value;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      push({\n        type: 'brace',\n        value,\n        output: _output\n      });\n      decrement('braces');\n      braces.pop();\n      continue;\n    }\n    /**\n     * Pipes\n     */\n\n\n    if (value === '|') {\n      if (extglobs.length > 0) {\n        extglobs[extglobs.length - 1].conditions++;\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Commas\n     */\n\n\n    if (value === ',') {\n      var _output2 = value;\n      var _brace = braces[braces.length - 1];\n\n      if (_brace && stack[stack.length - 1] === 'braces') {\n        _brace.comma = true;\n        _output2 = '|';\n      }\n\n      push({\n        type: 'comma',\n        value,\n        output: _output2\n      });\n      continue;\n    }\n    /**\n     * Slashes\n     */\n\n\n    if (value === '/') {\n      // if the beginning of the glob is \"./\", advance the start\n      // to the current index, and don't add the \"./\" characters\n      // to the state. This greatly simplifies lookbehinds when\n      // checking for BOS characters like \"!\" and \".\" (not \"./\")\n      if (prev.type === 'dot' && state.index === state.start + 1) {\n        state.start = state.index + 1;\n        state.consumed = '';\n        state.output = '';\n        tokens.pop();\n        prev = bos; // reset \"prev\" to the first token\n\n        continue;\n      }\n\n      push({\n        type: 'slash',\n        value,\n        output: SLASH_LITERAL\n      });\n      continue;\n    }\n    /**\n     * Dots\n     */\n\n\n    if (value === '.') {\n      if (state.braces > 0 && prev.type === 'dot') {\n        if (prev.value === '.') prev.output = DOT_LITERAL;\n        var _brace2 = braces[braces.length - 1];\n        prev.type = 'dots';\n        prev.output += value;\n        prev.value += value;\n        _brace2.dots = true;\n        continue;\n      }\n\n      if (state.braces + state.parens === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\n        push({\n          type: 'text',\n          value,\n          output: DOT_LITERAL\n        });\n        continue;\n      }\n\n      push({\n        type: 'dot',\n        value,\n        output: DOT_LITERAL\n      });\n      continue;\n    }\n    /**\n     * Question marks\n     */\n\n\n    if (value === '?') {\n      var isGroup = prev && prev.value === '(';\n\n      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('qmark', value);\n        continue;\n      }\n\n      if (prev && prev.type === 'paren') {\n        var _next = peek();\n\n        var _output3 = value;\n\n        if (_next === '<' && !utils.supportsLookbehinds()) {\n          throw new Error('Node.js v10 or higher is required for regex lookbehinds');\n        }\n\n        if (prev.value === '(' && !/[!=<:]/.test(_next) || _next === '<' && !/<([!=]|\\w+>)/.test(remaining())) {\n          _output3 = \"\\\\\".concat(value);\n        }\n\n        push({\n          type: 'text',\n          value,\n          output: _output3\n        });\n        continue;\n      }\n\n      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\n        push({\n          type: 'qmark',\n          value,\n          output: QMARK_NO_DOT\n        });\n        continue;\n      }\n\n      push({\n        type: 'qmark',\n        value,\n        output: QMARK\n      });\n      continue;\n    }\n    /**\n     * Exclamation\n     */\n\n\n    if (value === '!') {\n      if (opts.noextglob !== true && peek() === '(') {\n        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\n          extglobOpen('negate', value);\n          continue;\n        }\n      }\n\n      if (opts.nonegate !== true && state.index === 0) {\n        negate();\n        continue;\n      }\n    }\n    /**\n     * Plus\n     */\n\n\n    if (value === '+') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('plus', value);\n        continue;\n      }\n\n      if (prev && prev.value === '(' || opts.regex === false) {\n        push({\n          type: 'plus',\n          value,\n          output: PLUS_LITERAL\n        });\n        continue;\n      }\n\n      if (prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace') || state.parens > 0) {\n        push({\n          type: 'plus',\n          value\n        });\n        continue;\n      }\n\n      push({\n        type: 'plus',\n        value: PLUS_LITERAL\n      });\n      continue;\n    }\n    /**\n     * Plain text\n     */\n\n\n    if (value === '@') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        push({\n          type: 'at',\n          extglob: true,\n          value,\n          output: ''\n        });\n        continue;\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Plain text\n     */\n\n\n    if (value !== '*') {\n      if (value === '$' || value === '^') {\n        value = \"\\\\\".concat(value);\n      }\n\n      var _match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\n\n      if (_match) {\n        value += _match[0];\n        state.index += _match[0].length;\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Stars\n     */\n\n\n    if (prev && (prev.type === 'globstar' || prev.star === true)) {\n      prev.type = 'star';\n      prev.star = true;\n      prev.value += value;\n      prev.output = star;\n      state.backtrack = true;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    var rest = remaining();\n\n    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\n      extglobOpen('star', value);\n      continue;\n    }\n\n    if (prev.type === 'star') {\n      if (opts.noglobstar === true) {\n        consume(value);\n        continue;\n      }\n\n      var prior = prev.prev;\n      var before = prior.prev;\n      var isStart = prior.type === 'slash' || prior.type === 'bos';\n      var afterStar = before && (before.type === 'star' || before.type === 'globstar');\n\n      if (opts.bash === true && (!isStart || rest[0] && rest[0] !== '/')) {\n        push({\n          type: 'star',\n          value,\n          output: ''\n        });\n        continue;\n      }\n\n      var isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\n      var isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\n\n      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\n        push({\n          type: 'star',\n          value,\n          output: ''\n        });\n        continue;\n      } // strip consecutive `/**/`\n\n\n      while (rest.slice(0, 3) === '/**') {\n        var after = input[state.index + 4];\n\n        if (after && after !== '/') {\n          break;\n        }\n\n        rest = rest.slice(3);\n        consume('/**', 3);\n      }\n\n      if (prior.type === 'bos' && eos()) {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = globstar(opts);\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = \"(?:\".concat(prior.output);\n        prev.type = 'globstar';\n        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\n        prev.value += value;\n        state.globstar = true;\n        state.output += prior.output + prev.output;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\n        var end = rest[1] !== void 0 ? '|$' : '';\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = \"(?:\".concat(prior.output);\n        prev.type = 'globstar';\n        prev.output = \"\".concat(globstar(opts)).concat(SLASH_LITERAL, \"|\").concat(SLASH_LITERAL).concat(end, \")\");\n        prev.value += value;\n        state.output += prior.output + prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({\n          type: 'slash',\n          value: '/',\n          output: ''\n        });\n        continue;\n      }\n\n      if (prior.type === 'bos' && rest[0] === '/') {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = \"(?:^|\".concat(SLASH_LITERAL, \"|\").concat(globstar(opts)).concat(SLASH_LITERAL, \")\");\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({\n          type: 'slash',\n          value: '/',\n          output: ''\n        });\n        continue;\n      } // remove single star from output\n\n\n      state.output = state.output.slice(0, -prev.output.length); // reset previous token to globstar\n\n      prev.type = 'globstar';\n      prev.output = globstar(opts);\n      prev.value += value; // reset output with globstar\n\n      state.output += prev.output;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    var token = {\n      type: 'star',\n      value,\n      output: star\n    };\n\n    if (opts.bash === true) {\n      token.output = '.*?';\n\n      if (prev.type === 'bos' || prev.type === 'slash') {\n        token.output = nodot + token.output;\n      }\n\n      push(token);\n      continue;\n    }\n\n    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\n      token.output = value;\n      push(token);\n      continue;\n    }\n\n    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\n      if (prev.type === 'dot') {\n        state.output += NO_DOT_SLASH;\n        prev.output += NO_DOT_SLASH;\n      } else if (opts.dot === true) {\n        state.output += NO_DOTS_SLASH;\n        prev.output += NO_DOTS_SLASH;\n      } else {\n        state.output += nodot;\n        prev.output += nodot;\n      }\n\n      if (peek() !== '*') {\n        state.output += ONE_CHAR;\n        prev.output += ONE_CHAR;\n      }\n    }\n\n    push(token);\n  }\n\n  while (state.brackets > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));\n    state.output = utils.escapeLast(state.output, '[');\n    decrement('brackets');\n  }\n\n  while (state.parens > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));\n    state.output = utils.escapeLast(state.output, '(');\n    decrement('parens');\n  }\n\n  while (state.braces > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));\n    state.output = utils.escapeLast(state.output, '{');\n    decrement('braces');\n  }\n\n  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\n    push({\n      type: 'maybe_slash',\n      value: '',\n      output: \"\".concat(SLASH_LITERAL, \"?\")\n    });\n  } // rebuild the output if we had to backtrack at any point\n\n\n  if (state.backtrack === true) {\n    state.output = '';\n\n    var _iterator2 = _createForOfIteratorHelper(state.tokens),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _token = _step2.value;\n        state.output += _token.output != null ? _token.output : _token.value;\n\n        if (_token.suffix) {\n          state.output += _token.suffix;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return state;\n};\n/**\n * Fast paths for creating regular expressions for common glob patterns.\n * This can significantly speed up processing and has very little downside\n * impact when none of the fast paths match.\n */\n\n\nparse.fastpaths = function (input, options) {\n  var opts = _objectSpread({}, options);\n\n  var max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  var len = input.length;\n\n  if (len > max) {\n    throw new SyntaxError(\"Input length: \".concat(len, \", exceeds maximum allowed length: \").concat(max));\n  }\n\n  input = REPLACEMENTS[input] || input;\n  var win32 = utils.isWindows(options); // create constants based on platform, for windows or posix\n\n  var _constants$globChars = constants.globChars(win32),\n      DOT_LITERAL = _constants$globChars.DOT_LITERAL,\n      SLASH_LITERAL = _constants$globChars.SLASH_LITERAL,\n      ONE_CHAR = _constants$globChars.ONE_CHAR,\n      DOTS_SLASH = _constants$globChars.DOTS_SLASH,\n      NO_DOT = _constants$globChars.NO_DOT,\n      NO_DOTS = _constants$globChars.NO_DOTS,\n      NO_DOTS_SLASH = _constants$globChars.NO_DOTS_SLASH,\n      STAR = _constants$globChars.STAR,\n      START_ANCHOR = _constants$globChars.START_ANCHOR;\n\n  var nodot = opts.dot ? NO_DOTS : NO_DOT;\n  var slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\n  var capture = opts.capture ? '' : '?:';\n  var state = {\n    negated: false,\n    prefix: ''\n  };\n  var star = opts.bash === true ? '.*?' : STAR;\n\n  if (opts.capture) {\n    star = \"(\".concat(star, \")\");\n  }\n\n  var globstar = function globstar(opts) {\n    if (opts.noglobstar === true) return star;\n    return \"(\".concat(capture, \"(?:(?!\").concat(START_ANCHOR).concat(opts.dot ? DOTS_SLASH : DOT_LITERAL, \").)*?)\");\n  };\n\n  var create = function create(str) {\n    switch (str) {\n      case '*':\n        return \"\".concat(nodot).concat(ONE_CHAR).concat(star);\n\n      case '.*':\n        return \"\".concat(DOT_LITERAL).concat(ONE_CHAR).concat(star);\n\n      case '*.*':\n        return \"\".concat(nodot).concat(star).concat(DOT_LITERAL).concat(ONE_CHAR).concat(star);\n\n      case '*/*':\n        return \"\".concat(nodot).concat(star).concat(SLASH_LITERAL).concat(ONE_CHAR).concat(slashDot).concat(star);\n\n      case '**':\n        return nodot + globstar(opts);\n\n      case '**/*':\n        return \"(?:\".concat(nodot).concat(globstar(opts)).concat(SLASH_LITERAL, \")?\").concat(slashDot).concat(ONE_CHAR).concat(star);\n\n      case '**/*.*':\n        return \"(?:\".concat(nodot).concat(globstar(opts)).concat(SLASH_LITERAL, \")?\").concat(slashDot).concat(star).concat(DOT_LITERAL).concat(ONE_CHAR).concat(star);\n\n      case '**/.*':\n        return \"(?:\".concat(nodot).concat(globstar(opts)).concat(SLASH_LITERAL, \")?\").concat(DOT_LITERAL).concat(ONE_CHAR).concat(star);\n\n      default:\n        {\n          var match = /^(.*?)\\.(\\w+)$/.exec(str);\n          if (!match) return;\n\n          var _source = create(match[1]);\n\n          if (!_source) return;\n          return _source + DOT_LITERAL + match[2];\n        }\n    }\n  };\n\n  var output = utils.removePrefix(input, state);\n  var source = create(output);\n\n  if (source && opts.strictSlashes !== true) {\n    source += \"\".concat(SLASH_LITERAL, \"?\");\n  }\n\n  return source;\n};\n\nmodule.exports = parse;"},"sourceMaps":null,"error":null,"hash":"66486fd0230cce14e02ab2d4600f75c0","cacheData":{"env":{}}}