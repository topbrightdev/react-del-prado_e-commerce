{"id":"../node_modules/fork-ts-checker-webpack-plugin-alt/lib/NormalizedMessage.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/fork-ts-checker-webpack-plugin-alt/package.json","includedInParent":true,"mtime":1594306880006}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar NormalizedMessage =\n/** @class */\nfunction () {\n  function NormalizedMessage(data) {\n    this.type = data.type;\n    this.code = data.code;\n    this.severity = data.severity;\n    this.content = data.content;\n    this.file = data.file;\n    this.line = data.line;\n    this.character = data.character;\n  } // message types\n\n\n  NormalizedMessage.createFromDiagnostic = function (flattenDiagnosticMessageText, diagnostic) {\n    var file;\n    var line;\n    var character;\n\n    if (diagnostic.file) {\n      file = diagnostic.file.fileName;\n      var position = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n      line = position.line + 1;\n      character = position.character + 1;\n    }\n\n    return new NormalizedMessage({\n      type: NormalizedMessage.TYPE_DIAGNOSTIC,\n      code: diagnostic.code,\n      // TODO: Keep in sync with TypeScript's DiagnosticCategory.Error or pass in\n      severity: diagnostic.category.toString() === '1' ? NormalizedMessage.SEVERITY_ERROR : NormalizedMessage.SEVERITY_WARNING,\n      content: flattenDiagnosticMessageText(diagnostic.messageText, '\\n'),\n      file: file,\n      line: line,\n      character: character\n    });\n  };\n\n  NormalizedMessage.createFromLint = function (lint) {\n    var position = lint.getStartPosition().getLineAndCharacter();\n    return new NormalizedMessage({\n      type: NormalizedMessage.TYPE_LINT,\n      code: lint.getRuleName(),\n      severity: lint.getRuleSeverity(),\n      content: lint.getFailure(),\n      file: lint.getFileName(),\n      line: position.line + 1,\n      character: position.character + 1\n    });\n  };\n\n  NormalizedMessage.createFromJSON = function (json) {\n    return new NormalizedMessage(json);\n  };\n\n  NormalizedMessage.compare = function (messageA, messageB) {\n    if (!(messageA instanceof NormalizedMessage)) {\n      return -1;\n    }\n\n    if (!(messageB instanceof NormalizedMessage)) {\n      return 1;\n    }\n\n    return NormalizedMessage.compareTypes(messageA.getType(), messageB.getType()) || NormalizedMessage.compareOptionalStrings(messageA.getFile(), messageB.getFile()) || NormalizedMessage.compareSeverities(messageA.getSeverity(), messageB.getSeverity()) || NormalizedMessage.compareNumbers(messageA.getLine(), messageB.getLine()) || NormalizedMessage.compareNumbers(messageA.getCharacter(), messageB.getCharacter()) || // code can be string (lint failure) or number (typescript error) - should the following line cater for this in some way?\n    NormalizedMessage.compareOptionalStrings(messageA.getCode(), messageB.getCode()) || NormalizedMessage.compareOptionalStrings(messageA.getContent(), messageB.getContent()) || 0\n    /* EqualTo */\n    ;\n  };\n\n  NormalizedMessage.equals = function (messageA, messageB) {\n    return this.compare(messageA, messageB) === 0;\n  };\n\n  NormalizedMessage.deduplicate = function (messages) {\n    return messages.sort(NormalizedMessage.compare).filter(function (message, index) {\n      return index === 0 || !NormalizedMessage.equals(message, messages[index - 1]);\n    });\n  };\n\n  NormalizedMessage.compareTypes = function (typeA, typeB) {\n    var priorities = [typeA, typeB].map(function (type) {\n      return [NormalizedMessage.TYPE_LINT\n      /* 0 */\n      , NormalizedMessage.TYPE_DIAGNOSTIC\n      /* 1 */\n      ].indexOf(type);\n    });\n    return priorities[0] - priorities[1];\n  };\n\n  NormalizedMessage.compareSeverities = function (severityA, severityB) {\n    var priorities = [severityA, severityB].map(function (type) {\n      return [NormalizedMessage.SEVERITY_WARNING\n      /* 0 */\n      , NormalizedMessage.SEVERITY_ERROR\n      /* 1 */\n      ].indexOf(type);\n    });\n    return priorities[0] - priorities[1];\n  };\n\n  NormalizedMessage.compareOptionalStrings = function (stringA, stringB) {\n    if (stringA === stringB) {\n      return 0;\n    }\n\n    if (stringA === undefined || stringA === null) {\n      return -1;\n    }\n\n    if (stringB === undefined || stringB === null) {\n      return 1;\n    }\n\n    return stringA.toString().localeCompare(stringB.toString());\n  };\n\n  NormalizedMessage.compareNumbers = function (numberA, numberB) {\n    return numberA - numberB;\n  };\n\n  NormalizedMessage.prototype.toJSON = function () {\n    return {\n      type: this.type,\n      code: this.code,\n      severity: this.severity,\n      content: this.content,\n      file: this.file,\n      line: this.line,\n      character: this.character\n    };\n  };\n\n  NormalizedMessage.prototype.getType = function () {\n    return this.type;\n  };\n\n  NormalizedMessage.prototype.isDiagnosticType = function () {\n    return NormalizedMessage.TYPE_DIAGNOSTIC === this.getType();\n  };\n\n  NormalizedMessage.prototype.isLintType = function () {\n    return NormalizedMessage.TYPE_LINT === this.getType();\n  };\n\n  NormalizedMessage.prototype.getCode = function () {\n    return this.code;\n  };\n\n  NormalizedMessage.prototype.getFormattedCode = function () {\n    return this.isDiagnosticType() ? 'TS' + this.getCode() : this.getCode();\n  };\n\n  NormalizedMessage.prototype.getSeverity = function () {\n    return this.severity;\n  };\n\n  NormalizedMessage.prototype.isErrorSeverity = function () {\n    return this.getSeverity() === NormalizedMessage.SEVERITY_ERROR;\n  };\n\n  NormalizedMessage.prototype.isWarningSeverity = function () {\n    return this.getSeverity() === NormalizedMessage.SEVERITY_WARNING;\n  };\n\n  NormalizedMessage.prototype.getContent = function () {\n    return this.content;\n  };\n\n  NormalizedMessage.prototype.getFile = function () {\n    return this.file;\n  };\n\n  NormalizedMessage.prototype.getLine = function () {\n    return this.line;\n  };\n\n  NormalizedMessage.prototype.getCharacter = function () {\n    return this.character;\n  };\n\n  NormalizedMessage.TYPE_DIAGNOSTIC = 'diagnostic';\n  NormalizedMessage.TYPE_LINT = 'lint'; // severity types\n\n  NormalizedMessage.SEVERITY_ERROR = 'error';\n  NormalizedMessage.SEVERITY_WARNING = 'warning';\n  return NormalizedMessage;\n}();\n\nexports.NormalizedMessage = NormalizedMessage;"},"sourceMaps":null,"error":null,"hash":"11c8821b68ade61e9612dfe66be3defe","cacheData":{"env":{}}}