{"id":"../node_modules/spdy-transport/lib/spdy-transport/stream.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/package.json","includedInParent":true,"mtime":1594570878662},{"name":"../spdy-transport","loc":{"line":3,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/stream.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport.js"},{"name":"assert","loc":{"line":5,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/stream.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/assert/assert.js"},{"name":"util","loc":{"line":6,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/stream.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"debug","loc":{"line":10,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/stream.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/node_modules/debug/src/browser.js"},{"name":"safe-buffer","loc":{"line":12,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/stream.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/safe-buffer/index.js"},{"name":"readable-stream","loc":{"line":13,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/stream.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/readable-stream/readable-browser.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/stream.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"\nvar process = require(\"process\");\n'use strict'\n\nvar transport = require('../spdy-transport')\n\nvar assert = require('assert')\nvar util = require('util')\n\nvar debug = {\n  client: require('debug')('spdy:stream:client'),\n  server: require('debug')('spdy:stream:server')\n}\nvar Buffer = require('safe-buffer').Buffer\nvar Duplex = require('readable-stream').Duplex\n\nfunction Stream (connection, options) {\n  Duplex.call(this)\n\n  var connectionState = connection._spdyState\n\n  var state = {}\n  this._spdyState = state\n\n  this.id = options.id\n  this.method = options.method\n  this.path = options.path\n  this.host = options.host\n  this.headers = options.headers || {}\n  this.connection = connection\n  this.parent = options.parent || null\n\n  state.socket = null\n  state.protocol = connectionState.protocol\n  state.constants = state.protocol.constants\n\n  // See _initPriority()\n  state.priority = null\n\n  state.version = this.connection.getVersion()\n  state.isServer = this.connection.isServer()\n  state.debug = state.isServer ? debug.server : debug.client\n\n  state.framer = connectionState.framer\n  state.parser = connectionState.parser\n\n  state.request = options.request\n  state.needResponse = options.request\n  state.window = connectionState.streamWindow.clone(options.id)\n  state.sessionWindow = connectionState.window\n  state.maxChunk = connectionState.maxChunk\n\n  // Can't send incoming request\n  // (See `.send()` method)\n  state.sent = !state.request\n\n  state.readable = options.readable !== false\n  state.writable = options.writable !== false\n\n  state.aborted = false\n\n  state.corked = 0\n  state.corkQueue = []\n\n  state.timeout = new transport.utils.Timeout(this)\n\n  this.on('finish', this._onFinish)\n  this.on('end', this._onEnd)\n\n  var self = this\n  function _onWindowOverflow () {\n    self._onWindowOverflow()\n  }\n\n  state.window.recv.on('overflow', _onWindowOverflow)\n  state.window.send.on('overflow', _onWindowOverflow)\n\n  this._initPriority(options.priority)\n\n  if (!state.readable) { this.push(null) }\n  if (!state.writable) {\n    this._writableState.ended = true\n    this._writableState.finished = true\n  }\n}\nutil.inherits(Stream, Duplex)\nexports.Stream = Stream\n\nStream.prototype._init = function _init (socket) {\n  this.socket = socket\n}\n\nStream.prototype._initPriority = function _initPriority (priority) {\n  var state = this._spdyState\n  var connectionState = this.connection._spdyState\n  var root = connectionState.priorityRoot\n\n  if (!priority) {\n    state.priority = root.addDefault(this.id)\n    return\n  }\n\n  state.priority = root.add({\n    id: this.id,\n    parent: priority.parent,\n    weight: priority.weight,\n    exclusive: priority.exclusive\n  })\n}\n\nStream.prototype._handleFrame = function _handleFrame (frame) {\n  var state = this._spdyState\n\n  // Ignore any kind of data after abort\n  if (state.aborted) {\n    state.debug('id=%d ignoring frame=%s after abort', this.id, frame.type)\n    return\n  }\n\n  // Restart the timer on incoming frames\n  state.timeout.reset()\n\n  if (frame.type === 'DATA') {\n    this._handleData(frame)\n  } else if (frame.type === 'HEADERS') {\n    this._handleHeaders(frame)\n  } else if (frame.type === 'RST') {\n    this._handleRST(frame)\n  } else if (frame.type === 'WINDOW_UPDATE') { this._handleWindowUpdate(frame) } else if (frame.type === 'PRIORITY') {\n    this._handlePriority(frame)\n  } else if (frame.type === 'PUSH_PROMISE') { this._handlePushPromise(frame) }\n\n  if (frame.fin) {\n    state.debug('id=%d end', this.id)\n    this.push(null)\n  }\n}\n\nfunction checkAborted (stream, state, callback) {\n  if (state.aborted) {\n    state.debug('id=%d abort write', stream.id)\n    process.nextTick(function () {\n      callback(new Error('Stream write aborted'))\n    })\n    return true\n  }\n\n  return false\n}\n\nfunction _send (stream, state, data, callback) {\n  if (checkAborted(stream, state, callback)) {\n    return\n  }\n\n  state.debug('id=%d presend=%d', stream.id, data.length)\n\n  state.timeout.reset()\n\n  state.window.send.update(-data.length, function () {\n    if (checkAborted(stream, state, callback)) {\n      return\n    }\n\n    state.debug('id=%d send=%d', stream.id, data.length)\n\n    state.timeout.reset()\n\n    state.framer.dataFrame({\n      id: stream.id,\n      priority: state.priority.getPriority(),\n      fin: false,\n      data: data\n    }, function (err) {\n      state.debug('id=%d postsend=%d', stream.id, data.length)\n      callback(err)\n    })\n  })\n}\n\nStream.prototype._write = function _write (data, enc, callback) {\n  var state = this._spdyState\n\n  // Send the request if it wasn't sent\n  if (!state.sent) { this.send() }\n\n  // Writes should come after pending control frames (response and headers)\n  if (state.corked !== 0) {\n    var self = this\n    state.corkQueue.push(function () {\n      self._write(data, enc, callback)\n    })\n    return\n  }\n\n  // Split DATA in chunks to prevent window from going negative\n  this._splitStart(data, _send, callback)\n}\n\nStream.prototype._splitStart = function _splitStart (data, onChunk, callback) {\n  return this._split(data, 0, onChunk, callback)\n}\n\nStream.prototype._split = function _split (data, offset, onChunk, callback) {\n  if (offset === data.length) {\n    return process.nextTick(callback)\n  }\n\n  var state = this._spdyState\n  var local = state.window.send\n  var session = state.sessionWindow.send\n\n  var availSession = Math.max(0, session.getCurrent())\n  if (availSession === 0) {\n    availSession = session.getMax()\n  }\n  var availLocal = Math.max(0, local.getCurrent())\n  if (availLocal === 0) {\n    availLocal = local.getMax()\n  }\n\n  var avail = Math.min(availSession, availLocal)\n  avail = Math.min(avail, state.maxChunk)\n\n  var self = this\n\n  if (avail === 0) {\n    state.window.send.update(0, function () {\n      self._split(data, offset, onChunk, callback)\n    })\n    return\n  }\n\n  // Split data in chunks in a following way:\n  var limit = avail\n  var size = Math.min(data.length - offset, limit)\n\n  var chunk = data.slice(offset, offset + size)\n\n  onChunk(this, state, chunk, function (err) {\n    if (err) { return callback(err) }\n\n    // Get the next chunk\n    self._split(data, offset + size, onChunk, callback)\n  })\n}\n\nStream.prototype._read = function _read () {\n  var state = this._spdyState\n\n  if (!state.window.recv.isDraining()) {\n    return\n  }\n\n  var delta = state.window.recv.getDelta()\n\n  state.debug('id=%d window emptying, update by %d', this.id, delta)\n\n  state.window.recv.update(delta)\n  state.framer.windowUpdateFrame({\n    id: this.id,\n    delta: delta\n  })\n}\n\nStream.prototype._handleData = function _handleData (frame) {\n  var state = this._spdyState\n\n  // DATA on ended or not readable stream!\n  if (!state.readable || this._readableState.ended) {\n    state.framer.rstFrame({ id: this.id, code: 'STREAM_CLOSED' })\n    return\n  }\n\n  state.debug('id=%d recv=%d', this.id, frame.data.length)\n  state.window.recv.update(-frame.data.length)\n\n  this.push(frame.data)\n}\n\nStream.prototype._handleRST = function _handleRST (frame) {\n  if (frame.code !== 'CANCEL') {\n    this.emit('error', new Error('Got RST: ' + frame.code))\n  }\n  this.abort()\n}\n\nStream.prototype._handleWindowUpdate = function _handleWindowUpdate (frame) {\n  var state = this._spdyState\n\n  state.window.send.update(frame.delta)\n}\n\nStream.prototype._onWindowOverflow = function _onWindowOverflow () {\n  var state = this._spdyState\n\n  state.debug('id=%d window overflow', this.id)\n  state.framer.rstFrame({ id: this.id, code: 'FLOW_CONTROL_ERROR' })\n\n  this.aborted = true\n  this.emit('error', new Error('HTTP2 window overflow'))\n}\n\nStream.prototype._handlePriority = function _handlePriority (frame) {\n  var state = this._spdyState\n\n  state.priority.remove()\n  state.priority = null\n  this._initPriority(frame.priority)\n\n  // Mostly for testing purposes\n  this.emit('priority', frame.priority)\n}\n\nStream.prototype._handleHeaders = function _handleHeaders (frame) {\n  var state = this._spdyState\n\n  if (!state.readable || this._readableState.ended) {\n    state.framer.rstFrame({ id: this.id, code: 'STREAM_CLOSED' })\n    return\n  }\n\n  if (state.needResponse) {\n    return this._handleResponse(frame)\n  }\n\n  this.emit('headers', frame.headers)\n}\n\nStream.prototype._handleResponse = function _handleResponse (frame) {\n  var state = this._spdyState\n\n  if (frame.headers[':status'] === undefined) {\n    state.framer.rstFrame({ id: this.id, code: 'PROTOCOL_ERROR' })\n    return\n  }\n\n  state.needResponse = false\n  this.emit('response', frame.headers[':status'] | 0, frame.headers)\n}\n\nStream.prototype._onFinish = function _onFinish () {\n  var state = this._spdyState\n\n  // Send the request if it wasn't sent\n  if (!state.sent) {\n    // NOTE: will send HEADERS with FIN flag\n    this.send()\n  } else {\n    // Just an `.end()` without any writes will trigger immediate `finish` event\n    // without any calls to `_write()`.\n    if (state.corked !== 0) {\n      var self = this\n      state.corkQueue.push(function () {\n        self._onFinish()\n      })\n      return\n    }\n\n    state.framer.dataFrame({\n      id: this.id,\n      priority: state.priority.getPriority(),\n      fin: true,\n      data: new Buffer(0)\n    })\n  }\n\n  this._maybeClose()\n}\n\nStream.prototype._onEnd = function _onEnd () {\n  this._maybeClose()\n}\n\nStream.prototype._checkEnded = function _checkEnded (callback) {\n  var state = this._spdyState\n\n  var ended = false\n  if (state.aborted) { ended = true }\n\n  if (!state.writable || this._writableState.finished) { ended = true }\n\n  if (!ended) {\n    return true\n  }\n\n  if (!callback) {\n    return false\n  }\n\n  var err = new Error('Ended stream can\\'t send frames')\n  process.nextTick(function () {\n    callback(err)\n  })\n\n  return false\n}\n\nStream.prototype._maybeClose = function _maybeClose () {\n  var state = this._spdyState\n\n  // .abort() emits `close`\n  if (state.aborted) {\n    return\n  }\n\n  if ((!state.readable || this._readableState.ended) &&\n      this._writableState.finished) {\n    // Clear timeout\n    state.timeout.set(0)\n\n    this.emit('close')\n  }\n}\n\nStream.prototype._handlePushPromise = function _handlePushPromise (frame) {\n  var push = this.connection._createStream({\n    id: frame.promisedId,\n    parent: this,\n    push: true,\n    request: true,\n    method: frame.headers[':method'],\n    path: frame.headers[':path'],\n    host: frame.headers[':authority'],\n    priority: frame.priority,\n    headers: frame.headers,\n    writable: false\n  })\n\n  // GOAWAY\n  if (this.connection._isGoaway(push.id)) {\n    return\n  }\n\n  if (!this.emit('pushPromise', push)) {\n    push.abort()\n  }\n}\n\nStream.prototype._hardCork = function _hardCork () {\n  var state = this._spdyState\n\n  this.cork()\n  state.corked++\n}\n\nStream.prototype._hardUncork = function _hardUncork () {\n  var state = this._spdyState\n\n  this.uncork()\n  state.corked--\n  if (state.corked !== 0) {\n    return\n  }\n\n  // Invoke callbacks\n  var queue = state.corkQueue\n  state.corkQueue = []\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]()\n  }\n}\n\nStream.prototype._sendPush = function _sendPush (status, response, callback) {\n  var self = this\n  var state = this._spdyState\n\n  this._hardCork()\n  state.framer.pushFrame({\n    id: this.parent.id,\n    promisedId: this.id,\n    priority: state.priority.toJSON(),\n    path: this.path,\n    host: this.host,\n    method: this.method,\n    status: status,\n    headers: this.headers,\n    response: response\n  }, function (err) {\n    self._hardUncork()\n\n    callback(err)\n  })\n}\n\nStream.prototype._wasSent = function _wasSent () {\n  var state = this._spdyState\n  return state.sent\n}\n\n// Public API\n\nStream.prototype.send = function send (callback) {\n  var state = this._spdyState\n\n  if (state.sent) {\n    var err = new Error('Stream was already sent')\n    process.nextTick(function () {\n      if (callback) {\n        callback(err)\n      }\n    })\n    return\n  }\n\n  state.sent = true\n  state.timeout.reset()\n\n  // GET requests should always be auto-finished\n  if (this.method === 'GET') {\n    this._writableState.ended = true\n    this._writableState.finished = true\n  }\n\n  // TODO(indunty): ideally it should just take a stream object as an input\n  var self = this\n  this._hardCork()\n  state.framer.requestFrame({\n    id: this.id,\n    method: this.method,\n    path: this.path,\n    host: this.host,\n    priority: state.priority.toJSON(),\n    headers: this.headers,\n    fin: this._writableState.finished\n  }, function (err) {\n    self._hardUncork()\n\n    if (!callback) {\n      return\n    }\n\n    callback(err)\n  })\n}\n\nStream.prototype.respond = function respond (status, headers, callback) {\n  var self = this\n  var state = this._spdyState\n  assert(!state.request, 'Can\\'t respond on request')\n\n  state.timeout.reset()\n\n  if (!this._checkEnded(callback)) { return }\n\n  var frame = {\n    id: this.id,\n    status: status,\n    headers: headers\n  }\n  this._hardCork()\n  state.framer.responseFrame(frame, function (err) {\n    self._hardUncork()\n    if (callback) { callback(err) }\n  })\n}\n\nStream.prototype.setWindow = function setWindow (size) {\n  var state = this._spdyState\n\n  state.timeout.reset()\n\n  if (!this._checkEnded()) {\n    return\n  }\n\n  state.debug('id=%d force window max=%d', this.id, size)\n  state.window.recv.setMax(size)\n\n  var delta = state.window.recv.getDelta()\n  if (delta === 0) { return }\n\n  state.framer.windowUpdateFrame({\n    id: this.id,\n    delta: delta\n  })\n  state.window.recv.update(delta)\n}\n\nStream.prototype.sendHeaders = function sendHeaders (headers, callback) {\n  var self = this\n  var state = this._spdyState\n\n  state.timeout.reset()\n\n  if (!this._checkEnded(callback)) {\n    return\n  }\n\n  // Request wasn't yet send, coalesce headers\n  if (!state.sent) {\n    this.headers = Object.assign({}, this.headers)\n    Object.assign(this.headers, headers)\n    process.nextTick(function () {\n      if (callback) {\n        callback(null)\n      }\n    })\n    return\n  }\n\n  this._hardCork()\n  state.framer.headersFrame({\n    id: this.id,\n    headers: headers\n  }, function (err) {\n    self._hardUncork()\n    if (callback) { callback(err) }\n  })\n}\n\nStream.prototype.destroy = function destroy () {\n  this.abort()\n}\n\nStream.prototype.abort = function abort (code, callback) {\n  var state = this._spdyState\n\n  // .abort(callback)\n  if (typeof code === 'function') {\n    callback = code\n    code = null\n  }\n\n  if (this._readableState.ended && this._writableState.finished) {\n    state.debug('id=%d already closed', this.id)\n    if (callback) {\n      process.nextTick(callback)\n    }\n    return\n  }\n\n  if (state.aborted) {\n    state.debug('id=%d already aborted', this.id)\n    if (callback) { process.nextTick(callback) }\n    return\n  }\n\n  state.aborted = true\n  state.debug('id=%d abort', this.id)\n\n  this.setTimeout(0)\n\n  var abortCode = code || 'CANCEL'\n\n  state.framer.rstFrame({\n    id: this.id,\n    code: abortCode\n  })\n\n  var self = this\n  process.nextTick(function () {\n    if (callback) {\n      callback(null)\n    }\n    self.emit('close', new Error('Aborted, code: ' + abortCode))\n  })\n}\n\nStream.prototype.setPriority = function setPriority (info) {\n  var state = this._spdyState\n\n  state.timeout.reset()\n\n  if (!this._checkEnded()) {\n    return\n  }\n\n  state.debug('id=%d priority change', this.id, info)\n\n  var frame = { id: this.id, priority: info }\n\n  // Change priority on this side\n  this._handlePriority(frame)\n\n  // And on the other too\n  state.framer.priorityFrame(frame)\n}\n\nStream.prototype.pushPromise = function pushPromise (uri, callback) {\n  if (!this._checkEnded(callback)) {\n    return\n  }\n\n  var self = this\n  this._hardCork()\n  var push = this.connection.pushPromise(this, uri, function (err) {\n    self._hardUncork()\n    if (!err) {\n      push._hardUncork()\n    }\n\n    if (callback) {\n      return callback(err, push)\n    }\n\n    if (err) { push.emit('error', err) }\n  })\n  push._hardCork()\n\n  return push\n}\n\nStream.prototype.setMaxChunk = function setMaxChunk (size) {\n  var state = this._spdyState\n  state.maxChunk = size\n}\n\nStream.prototype.setTimeout = function setTimeout (delay, callback) {\n  var state = this._spdyState\n\n  state.timeout.set(delay, callback)\n}\n"},"sourceMaps":null,"error":null,"hash":"0db852582703f95c73b42ebf4f0d5d48","cacheData":{"env":{}}}