{"id":"../node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/framer.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/package.json","includedInParent":true,"mtime":1594570878662},{"name":"../../../spdy-transport","loc":{"line":3,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport.js"},{"name":"./","loc":{"line":4,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/index.js"},{"name":"assert","loc":{"line":8,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/assert/assert.js"},{"name":"util","loc":{"line":9,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/util/util.js"},{"name":"buffer","loc":{"line":10,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/buffer/index.js"},{"name":"wbuf","loc":{"line":11,"column":26},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/wbuf/index.js"},{"name":"debug","loc":{"line":13,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/node_modules/debug/src/browser.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/framer.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"\nvar process = require(\"process\");\n'use strict'\n\nvar transport = require('../../../spdy-transport')\nvar constants = require('./').constants\nvar base = transport.protocol.base\nvar utils = base.utils\n\nvar assert = require('assert')\nvar util = require('util')\nvar Buffer = require('buffer').Buffer\nvar WriteBuffer = require('wbuf')\n\nvar debug = require('debug')('spdy:framer')\n\nfunction Framer (options) {\n  base.Framer.call(this, options)\n}\nutil.inherits(Framer, base.Framer)\nmodule.exports = Framer\n\nFramer.create = function create (options) {\n  return new Framer(options)\n}\n\nFramer.prototype.setMaxFrameSize = function setMaxFrameSize (size) {\n  // http2-only\n}\n\nFramer.prototype.headersToDict = function headersToDict (headers,\n                                                        preprocess,\n                                                        callback) {\n  function stringify (value) {\n    if (value !== undefined) {\n      if (Array.isArray(value)) {\n        return value.join('\\x00')\n      } else if (typeof value === 'string') {\n        return value\n      } else {\n        return value.toString()\n      }\n    } else {\n      return ''\n    }\n  }\n\n  // Lower case of all headers keys\n  var loweredHeaders = {}\n  Object.keys(headers || {}).map(function (key) {\n    loweredHeaders[key.toLowerCase()] = headers[key]\n  })\n\n  // Allow outer code to add custom headers or remove something\n  if (preprocess) { preprocess(loweredHeaders) }\n\n  // Transform object into kv pairs\n  var size = this.version === 2 ? 2 : 4\n  var len = size\n  var pairs = Object.keys(loweredHeaders).filter(function (key) {\n    var lkey = key.toLowerCase()\n\n    // Will be in `:host`\n    if (lkey === 'host' && this.version >= 3) {\n      return false\n    }\n\n    return lkey !== 'connection' && lkey !== 'keep-alive' &&\n           lkey !== 'proxy-connection' && lkey !== 'transfer-encoding'\n  }, this).map(function (key) {\n    var klen = Buffer.byteLength(key)\n    var value = stringify(loweredHeaders[key])\n    var vlen = Buffer.byteLength(value)\n\n    len += size * 2 + klen + vlen\n    return [klen, key, vlen, value]\n  })\n\n  var block = new WriteBuffer()\n  block.reserve(len)\n\n  if (this.version === 2) {\n    block.writeUInt16BE(pairs.length)\n  } else {\n    block.writeUInt32BE(pairs.length)\n  }\n\n  pairs.forEach(function (pair) {\n    // Write key length\n    if (this.version === 2) {\n      block.writeUInt16BE(pair[0])\n    } else {\n      block.writeUInt32BE(pair[0])\n    }\n\n    // Write key\n    block.write(pair[1])\n\n    // Write value length\n    if (this.version === 2) {\n      block.writeUInt16BE(pair[2])\n    } else {\n      block.writeUInt32BE(pair[2])\n    }\n    // Write value\n    block.write(pair[3])\n  }, this)\n\n  assert(this.compress !== null, 'Framer version not initialized')\n  this.compress.write(block.render(), callback)\n}\n\nFramer.prototype._frame = function _frame (frame, body, callback) {\n  if (!this.version) {\n    this.on('version', function () {\n      this._frame(frame, body, callback)\n    })\n    return\n  }\n\n  debug('id=%d type=%s', frame.id, frame.type)\n\n  var buffer = new WriteBuffer()\n\n  buffer.writeUInt16BE(0x8000 | this.version)\n  buffer.writeUInt16BE(constants.frameType[frame.type])\n  buffer.writeUInt8(frame.flags)\n  var len = buffer.skip(3)\n\n  body(buffer)\n\n  var frameSize = buffer.size - constants.FRAME_HEADER_SIZE\n  len.writeUInt24BE(frameSize)\n\n  var chunks = buffer.render()\n  var toWrite = {\n    stream: frame.id,\n    priority: false,\n    chunks: chunks,\n    callback: callback\n  }\n\n  this._resetTimeout()\n  this.schedule(toWrite)\n\n  return chunks\n}\n\nFramer.prototype._synFrame = function _synFrame (frame, callback) {\n  var self = this\n\n  if (!frame.path) {\n    throw new Error('`path` is required frame argument')\n  }\n\n  function preprocess (headers) {\n    var method = frame.method || base.constants.DEFAULT_METHOD\n    var version = frame.version || 'HTTP/1.1'\n    var scheme = frame.scheme || 'https'\n    var host = frame.host ||\n               (frame.headers && frame.headers.host) ||\n               base.constants.DEFAULT_HOST\n\n    if (self.version === 2) {\n      headers.method = method\n      headers.version = version\n      headers.url = frame.path\n      headers.scheme = scheme\n      headers.host = host\n      if (frame.status) {\n        headers.status = frame.status\n      }\n    } else {\n      headers[':method'] = method\n      headers[':version'] = version\n      headers[':path'] = frame.path\n      headers[':scheme'] = scheme\n      headers[':host'] = host\n      if (frame.status) { headers[':status'] = frame.status }\n    }\n  }\n\n  this.headersToDict(frame.headers, preprocess, function (err, chunks) {\n    if (err) {\n      if (callback) {\n        return callback(err)\n      } else {\n        return self.emit('error', err)\n      }\n    }\n\n    self._frame({\n      type: 'SYN_STREAM',\n      id: frame.id,\n      flags: frame.fin ? constants.flags.FLAG_FIN : 0\n    }, function (buf) {\n      buf.reserve(10)\n\n      buf.writeUInt32BE(frame.id & 0x7fffffff)\n      buf.writeUInt32BE(frame.associated & 0x7fffffff)\n\n      var weight = (frame.priority && frame.priority.weight) ||\n                   constants.DEFAULT_WEIGHT\n\n      // We only have 3 bits for priority in SPDY, try to fit it into this\n      var priority = utils.weightToPriority(weight)\n      buf.writeUInt8(priority << 5)\n\n      // CREDENTIALS slot\n      buf.writeUInt8(0)\n\n      for (var i = 0; i < chunks.length; i++) {\n        buf.copyFrom(chunks[i])\n      }\n    }, callback)\n  })\n}\n\nFramer.prototype.requestFrame = function requestFrame (frame, callback) {\n  this._synFrame({\n    id: frame.id,\n    fin: frame.fin,\n    associated: 0,\n    method: frame.method,\n    version: frame.version,\n    scheme: frame.scheme,\n    host: frame.host,\n    path: frame.path,\n    priority: frame.priority,\n    headers: frame.headers\n  }, callback)\n}\n\nFramer.prototype.responseFrame = function responseFrame (frame, callback) {\n  var self = this\n\n  var reason = frame.reason\n  if (!reason) {\n    reason = constants.statusReason[frame.status]\n  }\n\n  function preprocess (headers) {\n    if (self.version === 2) {\n      headers.status = frame.status + ' ' + reason\n      headers.version = 'HTTP/1.1'\n    } else {\n      headers[':status'] = frame.status + ' ' + reason\n      headers[':version'] = 'HTTP/1.1'\n    }\n  }\n\n  this.headersToDict(frame.headers, preprocess, function (err, chunks) {\n    if (err) {\n      if (callback) {\n        return callback(err)\n      } else {\n        return self.emit('error', err)\n      }\n    }\n\n    self._frame({\n      type: 'SYN_REPLY',\n      id: frame.id,\n      flags: 0\n    }, function (buf) {\n      buf.reserve(self.version === 2 ? 6 : 4)\n\n      buf.writeUInt32BE(frame.id & 0x7fffffff)\n\n      // Unused data\n      if (self.version === 2) {\n        buf.writeUInt16BE(0)\n      }\n\n      for (var i = 0; i < chunks.length; i++) {\n        buf.copyFrom(chunks[i])\n      }\n    }, callback)\n  })\n}\n\nFramer.prototype.pushFrame = function pushFrame (frame, callback) {\n  var self = this\n\n  this._checkPush(function (err) {\n    if (err) { return callback(err) }\n\n    self._synFrame({\n      id: frame.promisedId,\n      associated: frame.id,\n      method: frame.method,\n      status: frame.status || 200,\n      version: frame.version,\n      scheme: frame.scheme,\n      host: frame.host,\n      path: frame.path,\n      priority: frame.priority,\n\n      // Merge everything together, there is no difference in SPDY protocol\n      headers: Object.assign(Object.assign({}, frame.headers), frame.response)\n    }, callback)\n  })\n}\n\nFramer.prototype.headersFrame = function headersFrame (frame, callback) {\n  var self = this\n\n  this.headersToDict(frame.headers, null, function (err, chunks) {\n    if (err) {\n      if (callback) { return callback(err) } else {\n        return self.emit('error', err)\n      }\n    }\n\n    self._frame({\n      type: 'HEADERS',\n      id: frame.id,\n      priority: false,\n      flags: 0\n    }, function (buf) {\n      buf.reserve(4 + (self.version === 2 ? 2 : 0))\n      buf.writeUInt32BE(frame.id & 0x7fffffff)\n\n      // Unused data\n      if (self.version === 2) { buf.writeUInt16BE(0) }\n\n      for (var i = 0; i < chunks.length; i++) {\n        buf.copyFrom(chunks[i])\n      }\n    }, callback)\n  })\n}\n\nFramer.prototype.dataFrame = function dataFrame (frame, callback) {\n  if (!this.version) {\n    return this.on('version', function () {\n      this.dataFrame(frame, callback)\n    })\n  }\n\n  debug('id=%d type=DATA', frame.id)\n\n  var buffer = new WriteBuffer()\n  buffer.reserve(8 + frame.data.length)\n\n  buffer.writeUInt32BE(frame.id & 0x7fffffff)\n  buffer.writeUInt8(frame.fin ? 0x01 : 0x0)\n  buffer.writeUInt24BE(frame.data.length)\n  buffer.copyFrom(frame.data)\n\n  var chunks = buffer.render()\n  var toWrite = {\n    stream: frame.id,\n    priority: frame.priority,\n    chunks: chunks,\n    callback: callback\n  }\n\n  var self = this\n  this._resetTimeout()\n\n  var bypass = this.version < 3.1\n  this.window.send.update(-frame.data.length, bypass ? undefined : function () {\n    self._resetTimeout()\n    self.schedule(toWrite)\n  })\n\n  if (bypass) {\n    this._resetTimeout()\n    this.schedule(toWrite)\n  }\n}\n\nFramer.prototype.pingFrame = function pingFrame (frame, callback) {\n  this._frame({\n    type: 'PING',\n    id: 0,\n    flags: 0\n  }, function (buf, callback) {\n    buf.reserve(4)\n\n    var opaque = frame.opaque\n    buf.writeUInt32BE(opaque.readUInt32BE(opaque.length - 4, true))\n  }, callback)\n}\n\nFramer.prototype.rstFrame = function rstFrame (frame, callback) {\n  this._frame({\n    type: 'RST_STREAM',\n    id: frame.id,\n    flags: 0\n  }, function (buf) {\n    buf.reserve(8)\n\n    // Stream ID\n    buf.writeUInt32BE(frame.id & 0x7fffffff)\n    // Status Code\n    buf.writeUInt32BE(constants.error[frame.code])\n\n    // Extra debugging information\n    if (frame.extra) {\n      buf.write(frame.extra)\n    }\n  }, callback)\n}\n\nFramer.prototype.prefaceFrame = function prefaceFrame () {\n}\n\nFramer.prototype.settingsFrame = function settingsFrame (options, callback) {\n  var self = this\n\n  var key = this.version + '/' + JSON.stringify(options)\n\n  var settings = Framer.settingsCache[key]\n  if (settings) {\n    debug('cached settings')\n    this._resetTimeout()\n    this.schedule({\n      stream: 0,\n      priority: false,\n      chunks: settings,\n      callback: callback\n    })\n    return\n  }\n\n  var params = []\n  for (var i = 0; i < constants.settingsIndex.length; i++) {\n    var name = constants.settingsIndex[i]\n    if (!name) { continue }\n\n    // value: Infinity\n    if (!isFinite(options[name])) {\n      continue\n    }\n\n    if (options[name] !== undefined) {\n      params.push({ key: i, value: options[name] })\n    }\n  }\n\n  var frame = this._frame({\n    type: 'SETTINGS',\n    id: 0,\n    flags: 0\n  }, function (buf) {\n    buf.reserve(4 + 8 * params.length)\n\n    // Count of entries\n    buf.writeUInt32BE(params.length)\n\n    params.forEach(function (param) {\n      var flag = constants.settings.FLAG_SETTINGS_PERSIST_VALUE << 24\n\n      if (self.version === 2) {\n        buf.writeUInt32LE(flag | param.key)\n      } else { buf.writeUInt32BE(flag | param.key) }\n      buf.writeUInt32BE(param.value & 0x7fffffff)\n    })\n  }, callback)\n\n  Framer.settingsCache[key] = frame\n}\nFramer.settingsCache = {}\n\nFramer.prototype.ackSettingsFrame = function ackSettingsFrame (callback) {\n  if (callback) {\n    process.nextTick(callback)\n  }\n}\n\nFramer.prototype.windowUpdateFrame = function windowUpdateFrame (frame,\n                                                                callback) {\n  this._frame({\n    type: 'WINDOW_UPDATE',\n    id: frame.id,\n    flags: 0\n  }, function (buf) {\n    buf.reserve(8)\n\n    // ID\n    buf.writeUInt32BE(frame.id & 0x7fffffff)\n\n    // Delta\n    buf.writeInt32BE(frame.delta)\n  }, callback)\n}\n\nFramer.prototype.goawayFrame = function goawayFrame (frame, callback) {\n  this._frame({\n    type: 'GOAWAY',\n    id: 0,\n    flags: 0\n  }, function (buf) {\n    buf.reserve(8)\n\n    // Last-good-stream-ID\n    buf.writeUInt32BE(frame.lastId & 0x7fffffff)\n    // Status\n    buf.writeUInt32BE(constants.goaway[frame.code])\n  }, callback)\n}\n\nFramer.prototype.priorityFrame = function priorityFrame (frame, callback) {\n  // No such thing in SPDY\n  if (callback) {\n    process.nextTick(callback)\n  }\n}\n\nFramer.prototype.xForwardedFor = function xForwardedFor (frame, callback) {\n  this._frame({\n    type: 'X_FORWARDED_FOR',\n    id: 0,\n    flags: 0\n  }, function (buf) {\n    buf.writeUInt32BE(Buffer.byteLength(frame.host))\n    buf.write(frame.host)\n  }, callback)\n}\n"},"sourceMaps":null,"error":null,"hash":"2923f81ad1a3f90c5a08ac343aaae97d","cacheData":{"env":{}}}