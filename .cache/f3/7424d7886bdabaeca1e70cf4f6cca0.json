{"id":"../node_modules/webpack-dev-server/lib/Server.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/package.json","includedInParent":true,"mtime":1594306881666},{"name":"fs","loc":{"line":12,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":13,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/path-browserify/index.js"},{"name":"ip","loc":{"line":15,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/ip/lib/ip.js"},{"name":"url","loc":{"line":16,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/url/url.js"},{"name":"http","loc":{"line":17,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/stream-http/index.js"},{"name":"https","loc":{"line":18,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/https-browserify/index.js"},{"name":"spdy","loc":{"line":19,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/spdy/lib/spdy.js"},{"name":"sockjs","loc":{"line":20,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/sockjs/index.js"},{"name":"killable","loc":{"line":22,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/killable/index.js"},{"name":"del","loc":{"line":24,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/del/index.js"},{"name":"chokidar","loc":{"line":25,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/chokidar/index.js"},{"name":"express","loc":{"line":27,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/express/index.js"},{"name":"compression","loc":{"line":29,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/compression/index.js"},{"name":"serve-index","loc":{"line":30,"column":27},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/serve-index/index.js"},{"name":"http-proxy-middleware","loc":{"line":31,"column":36},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/http-proxy-middleware/index.js"},{"name":"connect-history-api-fallback","loc":{"line":32,"column":35},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/connect-history-api-fallback/lib/index.js"},{"name":"webpack","loc":{"line":34,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack/lib/webpack.js"},{"name":"webpack-dev-middleware","loc":{"line":35,"column":37},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-middleware/index.js"},{"name":"./utils/createLogger","loc":{"line":37,"column":29},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/utils/createLogger.js"},{"name":"./utils/createCertificate","loc":{"line":38,"column":34},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/utils/createCertificate.js"},{"name":"schema-utils","loc":{"line":40,"column":32},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/schema-utils/src/index.js"},{"name":"./options.json","loc":{"line":41,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/options.json"},{"name":"./utils/addEntries","loc":{"line":879,"column":41},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/utils/addEntries.js"},{"name":"process","parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib/Server.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/process/browser.js"}],"generated":{"js":"var __dirname = \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/webpack-dev-server/lib\";\nvar process = require(\"process\");\n'use strict';\n/* eslint-disable\n  import/order,\n  no-shadow,\n  no-undefined,\n  func-names,\n  multiline-ternary,\n  array-bracket-spacing,\n  space-before-function-paren\n*/\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar ip = require('ip');\n\nvar url = require('url');\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar spdy = require('spdy');\n\nvar sockjs = require('sockjs');\n\nvar killable = require('killable');\n\nvar del = require('del');\n\nvar chokidar = require('chokidar');\n\nvar express = require('express');\n\nvar _compress = require('compression');\n\nvar serveIndex = require('serve-index');\n\nvar httpProxyMiddleware = require('http-proxy-middleware');\n\nvar _historyApiFallback = require('connect-history-api-fallback');\n\nvar webpack = require('webpack');\n\nvar webpackDevMiddleware = require('webpack-dev-middleware');\n\nvar createLogger = require('./utils/createLogger');\n\nvar createCertificate = require('./utils/createCertificate');\n\nvar validateOptions = require('schema-utils');\n\nvar schema = require('./options.json');\n\nvar STATS = {\n  all: false,\n  hash: true,\n  assets: true,\n  warnings: true,\n  errors: true,\n  errorDetails: false\n};\n\nfunction Server(compiler) {\n  var _this = this;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _log = arguments.length > 2 ? arguments[2] : undefined;\n\n  this.log = _log || createLogger(options);\n  validateOptions(schema, options, 'webpack Dev Server');\n\n  if (options.lazy && !options.filename) {\n    throw new Error(\"'filename' option must be set in lazy mode.\");\n  }\n\n  this.hot = options.hot || options.hotOnly;\n  this.headers = options.headers;\n  this.progress = options.progress;\n  this.clientOverlay = options.overlay;\n  this.clientLogLevel = options.clientLogLevel;\n  this.publicHost = options.public;\n  this.allowedHosts = options.allowedHosts;\n  this.disableHostCheck = !!options.disableHostCheck;\n  this.sockets = [];\n  this.watchOptions = options.watchOptions || {};\n  this.contentBaseWatchers = []; // Listening for events\n\n  var invalidPlugin = function invalidPlugin() {\n    _this.sockWrite(_this.sockets, 'invalid');\n  };\n\n  if (this.progress) {\n    var progressPlugin = new webpack.ProgressPlugin(function (percent, msg, addInfo) {\n      percent = Math.floor(percent * 100);\n\n      if (percent === 100) {\n        msg = 'Compilation completed';\n      }\n\n      if (addInfo) {\n        msg = \"\".concat(msg, \" (\").concat(addInfo, \")\");\n      }\n\n      _this.sockWrite(_this.sockets, 'progress-update', {\n        percent,\n        msg\n      });\n    });\n    progressPlugin.apply(compiler);\n  }\n\n  var addHooks = function addHooks(compiler) {\n    var _compiler$hooks = compiler.hooks,\n        compile = _compiler$hooks.compile,\n        invalid = _compiler$hooks.invalid,\n        done = _compiler$hooks.done;\n    compile.tap('webpack-dev-server', invalidPlugin);\n    invalid.tap('webpack-dev-server', invalidPlugin);\n    done.tap('webpack-dev-server', function (stats) {\n      _this._sendStats(_this.sockets, stats.toJson(STATS));\n\n      _this._stats = stats;\n    });\n  };\n\n  if (compiler.compilers) {\n    compiler.compilers.forEach(addHooks);\n  } else {\n    addHooks(compiler);\n  } // Init express server\n  // eslint-disable-next-line\n\n\n  var app = this.app = new express();\n  app.all('*', function (req, res, next) {\n    if (_this.checkHost(req.headers)) {\n      return next();\n    }\n\n    res.send('Invalid Host header');\n  });\n  var wdmOptions = {\n    logLevel: this.log.options.level\n  }; // middleware for serving webpack bundle\n\n  this.middleware = webpackDevMiddleware(compiler, Object.assign({}, options, wdmOptions));\n  app.get('/__webpack_dev_server__/live.bundle.js', function (req, res) {\n    res.setHeader('Content-Type', 'application/javascript');\n    fs.createReadStream(path.join(__dirname, '..', 'client', 'live.bundle.js')).pipe(res);\n  });\n  app.get('/__webpack_dev_server__/sockjs.bundle.js', function (req, res) {\n    res.setHeader('Content-Type', 'application/javascript');\n    fs.createReadStream(path.join(__dirname, '..', 'client', 'sockjs.bundle.js')).pipe(res);\n  });\n  app.get('/webpack-dev-server.js', function (req, res) {\n    res.setHeader('Content-Type', 'application/javascript');\n    fs.createReadStream(path.join(__dirname, '..', 'client', 'index.bundle.js')).pipe(res);\n  });\n  app.get('/webpack-dev-server/*', function (req, res) {\n    res.setHeader('Content-Type', 'text/html');\n    fs.createReadStream(path.join(__dirname, '..', 'client', 'live.html')).pipe(res);\n  });\n  app.get('/webpack-dev-server', function (req, res) {\n    res.setHeader('Content-Type', 'text/html');\n    res.write('<!DOCTYPE html><html><head><meta charset=\"utf-8\"/></head><body>');\n\n    var outputPath = _this.middleware.getFilenameFromUrl(options.publicPath || '/');\n\n    var filesystem = _this.middleware.fileSystem;\n\n    function writeDirectory(baseUrl, basePath) {\n      var content = filesystem.readdirSync(basePath);\n      res.write('<ul>');\n      content.forEach(function (item) {\n        var p = \"\".concat(basePath, \"/\").concat(item);\n\n        if (filesystem.statSync(p).isFile()) {\n          res.write('<li><a href=\"');\n          res.write(baseUrl + item);\n          res.write('\">');\n          res.write(item);\n          res.write('</a></li>');\n\n          if (/\\.js$/.test(item)) {\n            var html = item.substr(0, item.length - 3);\n            res.write('<li><a href=\"');\n            res.write(baseUrl + html);\n            res.write('\">');\n            res.write(html);\n            res.write('</a> (magic html for ');\n            res.write(item);\n            res.write(') (<a href=\"');\n            res.write(baseUrl.replace( // eslint-disable-next-line\n            /(^(https?:\\/\\/[^\\/]+)?\\/)/, '$1webpack-dev-server/') + html);\n            res.write('\">webpack-dev-server</a>)</li>');\n          }\n        } else {\n          res.write('<li>');\n          res.write(item);\n          res.write('<br>');\n          writeDirectory(\"\".concat(baseUrl + item, \"/\"), p);\n          res.write('</li>');\n        }\n      });\n      res.write('</ul>');\n    }\n\n    writeDirectory(options.publicPath || '/', outputPath);\n    res.end('</body></html>');\n  });\n  var contentBase;\n\n  if (options.contentBase !== undefined) {\n    contentBase = options.contentBase;\n  } else {\n    contentBase = process.cwd();\n  } // Keep track of websocket proxies for external websocket upgrade.\n\n\n  var websocketProxies = [];\n  var features = {\n    compress: function compress() {\n      if (options.compress) {\n        // Enable gzip compression.\n        app.use(_compress());\n      }\n    },\n    proxy: function proxy() {\n      if (options.proxy) {\n        /**\n          * Assume a proxy configuration specified as:\n          * proxy: {\n          *   'context': { options }\n          * }\n          * OR\n          * proxy: {\n          *   'context': 'target'\n          * }\n          */\n        if (!Array.isArray(options.proxy)) {\n          options.proxy = Object.keys(options.proxy).map(function (context) {\n            var proxyOptions; // For backwards compatibility reasons.\n\n            var correctedContext = context.replace(/^\\*$/, '**').replace(/\\/\\*$/, '');\n\n            if (typeof options.proxy[context] === 'string') {\n              proxyOptions = {\n                context: correctedContext,\n                target: options.proxy[context]\n              };\n            } else {\n              proxyOptions = Object.assign({}, options.proxy[context]);\n              proxyOptions.context = correctedContext;\n            }\n\n            proxyOptions.logLevel = proxyOptions.logLevel || 'warn';\n            return proxyOptions;\n          });\n        }\n\n        var getProxyMiddleware = function getProxyMiddleware(proxyConfig) {\n          var context = proxyConfig.context || proxyConfig.path; // It is possible to use the `bypass` method without a `target`.\n          // However, the proxy middleware has no use in this case, and will fail to instantiate.\n\n          if (proxyConfig.target) {\n            return httpProxyMiddleware(context, proxyConfig);\n          }\n        };\n        /**\n        * Assume a proxy configuration specified as:\n        * proxy: [\n        *   {\n        *     context: ...,\n        *     ...options...\n        *   },\n        *   // or:\n        *   function() {\n        *     return {\n        *       context: ...,\n        *       ...options...\n        *     };\n        *   }\n        * ]\n        */\n\n\n        options.proxy.forEach(function (proxyConfigOrCallback) {\n          var proxyConfig;\n          var proxyMiddleware;\n\n          if (typeof proxyConfigOrCallback === 'function') {\n            proxyConfig = proxyConfigOrCallback();\n          } else {\n            proxyConfig = proxyConfigOrCallback;\n          }\n\n          proxyMiddleware = getProxyMiddleware(proxyConfig);\n\n          if (proxyConfig.ws) {\n            websocketProxies.push(proxyMiddleware);\n          }\n\n          app.use(function (req, res, next) {\n            if (typeof proxyConfigOrCallback === 'function') {\n              var newProxyConfig = proxyConfigOrCallback();\n\n              if (newProxyConfig !== proxyConfig) {\n                proxyConfig = newProxyConfig;\n                proxyMiddleware = getProxyMiddleware(proxyConfig);\n              }\n            }\n\n            var bypass = typeof proxyConfig.bypass === 'function';\n            var bypassUrl = bypass && proxyConfig.bypass(req, res, proxyConfig) || false;\n\n            if (bypassUrl) {\n              req.url = bypassUrl;\n              next();\n            } else if (proxyMiddleware) {\n              return proxyMiddleware(req, res, next);\n            } else {\n              next();\n            }\n          });\n        });\n      }\n    },\n    historyApiFallback: function historyApiFallback() {\n      if (options.historyApiFallback) {\n        var fallback = typeof options.historyApiFallback === 'object' ? options.historyApiFallback : null; // Fall back to /index.html if nothing else matches.\n\n        app.use(_historyApiFallback(fallback));\n      }\n    },\n    contentBaseFiles: function contentBaseFiles() {\n      if (Array.isArray(contentBase)) {\n        contentBase.forEach(function (item) {\n          app.get('*', express.static(item));\n        });\n      } else if (/^(https?:)?\\/\\//.test(contentBase)) {\n        _this.log.warn('Using a URL as contentBase is deprecated and will be removed in the next major version. Please use the proxy option instead.');\n\n        _this.log.warn('proxy: {\\n\\t\"*\": \"<your current contentBase configuration>\"\\n}'); // Redirect every request to contentBase\n\n\n        app.get('*', function (req, res) {\n          res.writeHead(302, {\n            Location: contentBase + req.path + (req._parsedUrl.search || '')\n          });\n          res.end();\n        });\n      } else if (typeof contentBase === 'number') {\n        _this.log.warn('Using a number as contentBase is deprecated and will be removed in the next major version. Please use the proxy option instead.');\n\n        _this.log.warn('proxy: {\\n\\t\"*\": \"//localhost:<your current contentBase configuration>\"\\n}'); // Redirect every request to the port contentBase\n\n\n        app.get('*', function (req, res) {\n          res.writeHead(302, {\n            Location: \"//localhost:\".concat(contentBase).concat(req.path).concat(req._parsedUrl.search || '')\n          });\n          res.end();\n        });\n      } else {\n        // route content request\n        app.get('*', express.static(contentBase, options.staticOptions));\n      }\n    },\n    contentBaseIndex: function contentBaseIndex() {\n      if (Array.isArray(contentBase)) {\n        contentBase.forEach(function (item) {\n          app.get('*', serveIndex(item));\n        });\n      } else if (!/^(https?:)?\\/\\//.test(contentBase) && typeof contentBase !== 'number') {\n        app.get('*', serveIndex(contentBase));\n      }\n    },\n    watchContentBase: function watchContentBase() {\n      if (/^(https?:)?\\/\\//.test(contentBase) || typeof contentBase === 'number') {\n        throw new Error('Watching remote files is not supported.');\n      } else if (Array.isArray(contentBase)) {\n        contentBase.forEach(function (item) {\n          _this._watch(item);\n        });\n      } else {\n        _this._watch(contentBase);\n      }\n    },\n    before: function before() {\n      if (typeof options.before === 'function') {\n        options.before(app, _this);\n      }\n    },\n    middleware: function middleware() {\n      // include our middleware to ensure\n      // it is able to handle '/index.html' request after redirect\n      app.use(_this.middleware);\n    },\n    after: function after() {\n      if (typeof options.after === 'function') {\n        options.after(app, _this);\n      }\n    },\n    headers: function headers() {\n      app.all('*', _this.setContentHeaders.bind(_this));\n    },\n    magicHtml: function magicHtml() {\n      app.get('*', _this.serveMagicHtml.bind(_this));\n    },\n    setup: function setup() {\n      if (typeof options.setup === 'function') {\n        _this.log.warn('The `setup` option is deprecated and will be removed in v3. Please update your config to use `before`');\n\n        options.setup(app, _this);\n      }\n    }\n  };\n  var defaultFeatures = ['setup', 'before', 'headers', 'middleware'];\n\n  if (options.proxy) {\n    defaultFeatures.push('proxy', 'middleware');\n  }\n\n  if (contentBase !== false) {\n    defaultFeatures.push('contentBaseFiles');\n  }\n\n  if (options.watchContentBase) {\n    defaultFeatures.push('watchContentBase');\n  }\n\n  if (options.historyApiFallback) {\n    defaultFeatures.push('historyApiFallback', 'middleware');\n\n    if (contentBase !== false) {\n      defaultFeatures.push('contentBaseFiles');\n    }\n  }\n\n  defaultFeatures.push('magicHtml');\n\n  if (contentBase !== false) {\n    defaultFeatures.push('contentBaseIndex');\n  } // compress is placed last and uses unshift so that it will be the first middleware used\n\n\n  if (options.compress) {\n    defaultFeatures.unshift('compress');\n  }\n\n  if (options.after) {\n    defaultFeatures.push('after');\n  }\n\n  (options.features || defaultFeatures).forEach(function (feature) {\n    features[feature]();\n  });\n\n  if (options.https) {\n    // for keep supporting CLI parameters\n    if (typeof options.https === 'boolean') {\n      options.https = {\n        ca: options.ca,\n        pfx: options.pfx,\n        key: options.key,\n        cert: options.cert,\n        passphrase: options.pfxPassphrase,\n        requestCert: options.requestCert || false\n      };\n    }\n\n    var fakeCert;\n\n    if (!options.https.key || !options.https.cert) {\n      // Use a self-signed certificate if no certificate was configured.\n      // Cycle certs every 24 hours\n      var certPath = path.join(__dirname, '../ssl/server.pem');\n      var certExists = fs.existsSync(certPath);\n\n      if (certExists) {\n        var certTtl = 1000 * 60 * 60 * 24;\n        var certStat = fs.statSync(certPath);\n        var now = new Date(); // cert is more than 30 days old, kill it with fire\n\n        if ((now - certStat.ctime) / certTtl > 30) {\n          this.log.info('SSL Certificate is more than 30 days old. Removing.');\n          del.sync([certPath], {\n            force: true\n          });\n          certExists = false;\n        }\n      }\n\n      if (!certExists) {\n        this.log.info('Generating SSL Certificate');\n        var attrs = [{\n          name: 'commonName',\n          value: 'localhost'\n        }];\n        var pems = createCertificate(attrs);\n        fs.writeFileSync(certPath, pems.private + pems.cert, {\n          encoding: 'utf-8'\n        });\n      }\n\n      fakeCert = fs.readFileSync(certPath);\n    }\n\n    options.https.key = options.https.key || fakeCert;\n    options.https.cert = options.https.cert || fakeCert;\n\n    if (!options.https.spdy) {\n      options.https.spdy = {\n        protocols: ['h2', 'http/1.1']\n      };\n    } // `spdy` is effectively unmaintained, and as a consequence of an\n    // implementation that extensively relies on Node’s non-public APIs, broken\n    // on Node 10 and above. In those cases, only https will be used for now.\n    // Once express supports Node's built-in HTTP/2 support, migrating over to\n    // that should be the best way to go.\n    // The relevant issues are:\n    // - https://github.com/nodejs/node/issues/21665\n    // - https://github.com/webpack/webpack-dev-server/issues/1449\n    // - https://github.com/expressjs/express/issues/3388\n\n\n    if (+process.version.match(/^v(\\d+)/)[1] >= 10) {\n      this.listeningApp = https.createServer(options.https, app);\n    } else {\n      this.listeningApp = spdy.createServer(options.https, app);\n    }\n  } else {\n    this.listeningApp = http.createServer(app);\n  }\n\n  killable(this.listeningApp); // Proxy websockets without the initial http request\n  // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade\n\n  websocketProxies.forEach(function (wsProxy) {\n    this.listeningApp.on('upgrade', wsProxy.upgrade);\n  }, this);\n}\n\nServer.prototype.use = function () {\n  // eslint-disable-next-line\n  this.app.use.apply(this.app, arguments);\n};\n\nServer.prototype.setContentHeaders = function (req, res, next) {\n  if (this.headers) {\n    for (var name in this.headers) {\n      // eslint-disable-line\n      res.setHeader(name, this.headers[name]);\n    }\n  }\n\n  next();\n};\n\nServer.prototype.checkHost = function (headers) {\n  // allow user to opt-out this security check, at own risk\n  if (this.disableHostCheck) {\n    return true;\n  } // get the Host header and extract hostname\n  // we don't care about port not matching\n\n\n  var hostHeader = headers.host;\n\n  if (!hostHeader) {\n    return false;\n  } // use the node url-parser to retrieve the hostname from the host-header.\n\n\n  var hostname = url.parse(\"//\".concat(hostHeader), false, true).hostname; // always allow requests with explicit IPv4 or IPv6-address.\n  // A note on IPv6 addresses:\n  // hostHeader will always contain the brackets denoting\n  // an IPv6-address in URLs,\n  // these are removed from the hostname in url.parse(),\n  // so we have the pure IPv6-address in hostname.\n\n  if (ip.isV4Format(hostname) || ip.isV6Format(hostname)) {\n    return true;\n  } // always allow localhost host, for convience\n\n\n  if (hostname === 'localhost') {\n    return true;\n  } // allow if hostname is in allowedHosts\n\n\n  if (this.allowedHosts && this.allowedHosts.length) {\n    for (var hostIdx = 0; hostIdx < this.allowedHosts.length; hostIdx++) {\n      var allowedHost = this.allowedHosts[hostIdx];\n      if (allowedHost === hostname) return true; // support \".\" as a subdomain wildcard\n      // e.g. \".example.com\" will allow \"example.com\", \"www.example.com\", \"subdomain.example.com\", etc\n\n      if (allowedHost[0] === '.') {\n        // \"example.com\"\n        if (hostname === allowedHost.substring(1)) {\n          return true;\n        } // \"*.example.com\"\n\n\n        if (hostname.endsWith(allowedHost)) {\n          return true;\n        }\n      }\n    }\n  } // allow hostname of listening adress\n\n\n  if (hostname === this.hostname) {\n    return true;\n  } // also allow public hostname if provided\n\n\n  if (typeof this.publicHost === 'string') {\n    var idxPublic = this.publicHost.indexOf(':');\n    var publicHostname = idxPublic >= 0 ? this.publicHost.substr(0, idxPublic) : this.publicHost;\n\n    if (hostname === publicHostname) {\n      return true;\n    }\n  } // disallow\n\n\n  return false;\n}; // delegate listen call and init sockjs\n\n\nServer.prototype.listen = function (port, hostname, fn) {\n  var _this2 = this;\n\n  this.hostname = hostname;\n  var returnValue = this.listeningApp.listen(port, hostname, function (err) {\n    var socket = sockjs.createServer({\n      // Use provided up-to-date sockjs-client\n      sockjs_url: '/__webpack_dev_server__/sockjs.bundle.js',\n      // Limit useless logs\n      log: function log(severity, line) {\n        if (severity === 'error') {\n          _this2.log.error(line);\n        } else {\n          _this2.log.debug(line);\n        }\n      }\n    });\n    socket.on('connection', function (connection) {\n      if (!connection) {\n        return;\n      }\n\n      if (!_this2.checkHost(connection.headers)) {\n        _this2.sockWrite([connection], 'error', 'Invalid Host header');\n\n        connection.close();\n        return;\n      }\n\n      _this2.sockets.push(connection);\n\n      connection.on('close', function () {\n        var idx = _this2.sockets.indexOf(connection);\n\n        if (idx >= 0) {\n          _this2.sockets.splice(idx, 1);\n        }\n      });\n\n      if (_this2.hot) {\n        _this2.sockWrite([connection], 'hot');\n      }\n\n      if (_this2.progress) {\n        _this2.sockWrite([connection], 'progress', _this2.progress);\n      }\n\n      if (_this2.clientOverlay) {\n        _this2.sockWrite([connection], 'overlay', _this2.clientOverlay);\n      }\n\n      if (_this2.clientLogLevel) {\n        _this2.sockWrite([connection], 'log-level', _this2.clientLogLevel);\n      }\n\n      if (!_this2._stats) {\n        return;\n      }\n\n      _this2._sendStats([connection], _this2._stats.toJson(STATS), true);\n    });\n    socket.installHandlers(_this2.listeningApp, {\n      prefix: '/sockjs-node'\n    });\n\n    if (fn) {\n      fn.call(_this2.listeningApp, err);\n    }\n  });\n  return returnValue;\n};\n\nServer.prototype.close = function (cb) {\n  var _this3 = this;\n\n  this.sockets.forEach(function (socket) {\n    socket.close();\n  });\n  this.sockets = [];\n  this.contentBaseWatchers.forEach(function (watcher) {\n    watcher.close();\n  });\n  this.contentBaseWatchers = [];\n  this.listeningApp.kill(function () {\n    _this3.middleware.close(cb);\n  });\n};\n\nServer.prototype.sockWrite = function (sockets, type, data) {\n  sockets.forEach(function (socket) {\n    socket.write(JSON.stringify({\n      type,\n      data\n    }));\n  });\n};\n\nServer.prototype.serveMagicHtml = function (req, res, next) {\n  var _path = req.path;\n\n  try {\n    var isFile = this.middleware.fileSystem.statSync(this.middleware.getFilenameFromUrl(\"\".concat(_path, \".js\"))).isFile();\n\n    if (!isFile) {\n      return next();\n    } // Serve a page that executes the javascript\n\n\n    res.write('<!DOCTYPE html><html><head><meta charset=\"utf-8\"/></head><body><script type=\"text/javascript\" charset=\"utf-8\" src=\"');\n    res.write(_path);\n    res.write('.js');\n    res.write(req._parsedUrl.search || '');\n    res.end('\"></script></body></html>');\n  } catch (err) {\n    return next();\n  }\n}; // send stats to a socket or multiple sockets\n\n\nServer.prototype._sendStats = function (sockets, stats, force) {\n  if (!force && stats && (!stats.errors || stats.errors.length === 0) && stats.assets && stats.assets.every(function (asset) {\n    return !asset.emitted;\n  })) {\n    return this.sockWrite(sockets, 'still-ok');\n  }\n\n  this.sockWrite(sockets, 'hash', stats.hash);\n\n  if (stats.errors.length > 0) {\n    this.sockWrite(sockets, 'errors', stats.errors);\n  } else if (stats.warnings.length > 0) {\n    this.sockWrite(sockets, 'warnings', stats.warnings);\n  } else {\n    this.sockWrite(sockets, 'ok');\n  }\n};\n\nServer.prototype._watch = function (watchPath) {\n  var _this4 = this;\n\n  // duplicate the same massaging of options that watchpack performs\n  // https://github.com/webpack/watchpack/blob/master/lib/DirectoryWatcher.js#L49\n  // this isn't an elegant solution, but we'll improve it in the future\n  var usePolling = this.watchOptions.poll ? true : undefined;\n  var interval = typeof this.watchOptions.poll === 'number' ? this.watchOptions.poll : undefined;\n  var options = {\n    ignoreInitial: true,\n    persistent: true,\n    followSymlinks: false,\n    depth: 0,\n    atomic: false,\n    alwaysStat: true,\n    ignorePermissionErrors: true,\n    ignored: this.watchOptions.ignored,\n    usePolling,\n    interval\n  };\n  var watcher = chokidar.watch(watchPath, options);\n  watcher.on('change', function () {\n    _this4.sockWrite(_this4.sockets, 'content-changed');\n  });\n  this.contentBaseWatchers.push(watcher);\n};\n\nServer.prototype.invalidate = function () {\n  if (this.middleware) {\n    this.middleware.invalidate();\n  }\n}; // Export this logic,\n// so that other implementations,\n// like task-runners can use it\n\n\nServer.addDevServerEntrypoints = require('./utils/addEntries');\nmodule.exports = Server;"},"sourceMaps":null,"error":null,"hash":"121fc216d80a2991a9ec33086c8c73df","cacheData":{"env":{}}}