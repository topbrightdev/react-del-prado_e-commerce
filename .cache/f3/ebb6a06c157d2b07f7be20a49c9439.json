{"id":"../node_modules/inquirer/lib/prompts/expand.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/package.json","includedInParent":true,"mtime":1594570878526},{"name":"lodash","loc":{"line":6,"column":16},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/expand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/lodash/lodash.js"},{"name":"chalk","loc":{"line":7,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/expand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/chalk/index.js"},{"name":"rxjs/operators","loc":{"line":8,"column":33},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/expand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/rxjs/_esm5/operators/index.js"},{"name":"./base","loc":{"line":9,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/expand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/base.js"},{"name":"../objects/separator","loc":{"line":10,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/expand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/objects/separator.js"},{"name":"../utils/events","loc":{"line":11,"column":22},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/expand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/events.js"},{"name":"../utils/paginator","loc":{"line":12,"column":24},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/prompts/expand.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/inquirer/lib/utils/paginator.js"}],"generated":{"js":"'use strict';\n/**\n * `rawlist` type prompt\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar _ = require('lodash');\n\nvar chalk = require('chalk');\n\nvar {\n  map,\n  takeUntil\n} = require('rxjs/operators');\n\nvar Base = require('./base');\n\nvar Separator = require('../objects/separator');\n\nvar observe = require('../utils/events');\n\nvar Paginator = require('../utils/paginator');\n\nvar ExpandPrompt = /*#__PURE__*/function (_Base) {\n  _inherits(ExpandPrompt, _Base);\n\n  var _super = _createSuper(ExpandPrompt);\n\n  function ExpandPrompt(questions, rl, answers) {\n    var _this;\n\n    _classCallCheck(this, ExpandPrompt);\n\n    _this = _super.call(this, questions, rl, answers);\n\n    if (!_this.opt.choices) {\n      _this.throwParamError('choices');\n    }\n\n    _this.validateChoices(_this.opt.choices); // Add the default `help` (/expand) option\n\n\n    _this.opt.choices.push({\n      key: 'h',\n      name: 'Help, list all options',\n      value: 'help'\n    });\n\n    _this.opt.validate = function (choice) {\n      if (choice == null) {\n        return 'Please enter a valid command';\n      }\n\n      return choice !== 'help';\n    }; // Setup the default string (capitalize the default key)\n\n\n    _this.opt.default = _this.generateChoicesString(_this.opt.choices, _this.opt.default);\n    _this.paginator = new Paginator(_this.screen);\n    return _this;\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _createClass(ExpandPrompt, [{\n    key: \"_run\",\n    value: function _run(cb) {\n      this.done = cb; // Save user answer and update prompt to show selected option.\n\n      var events = observe(this.rl);\n      var validation = this.handleSubmitEvents(events.line.pipe(map(this.getCurrentValue.bind(this))));\n      validation.success.forEach(this.onSubmit.bind(this));\n      validation.error.forEach(this.onError.bind(this));\n      this.keypressObs = events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this)); // Init the prompt\n\n      this.render();\n      return this;\n    }\n    /**\n     * Render the prompt to screen\n     * @return {ExpandPrompt} self\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(error, hint) {\n      var message = this.getQuestion();\n      var bottomContent = '';\n\n      if (this.status === 'answered') {\n        message += chalk.cyan(this.answer);\n      } else if (this.status === 'expanded') {\n        var choicesStr = renderChoices(this.opt.choices, this.selectedKey);\n        message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);\n        message += '\\n  Answer: ';\n      }\n\n      message += this.rl.line;\n\n      if (error) {\n        bottomContent = chalk.red('>> ') + error;\n      }\n\n      if (hint) {\n        bottomContent = chalk.cyan('>> ') + hint;\n      }\n\n      this.screen.render(message, bottomContent);\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue(input) {\n      if (!input) {\n        input = this.rawDefault;\n      }\n\n      var selected = this.opt.choices.where({\n        key: input.toLowerCase().trim()\n      })[0];\n\n      if (!selected) {\n        return null;\n      }\n\n      return selected.value;\n    }\n    /**\n     * Generate the prompt choices string\n     * @return {String}  Choices string\n     */\n\n  }, {\n    key: \"getChoices\",\n    value: function getChoices() {\n      var _this2 = this;\n\n      var output = '';\n      this.opt.choices.forEach(function (choice) {\n        output += '\\n  ';\n\n        if (choice.type === 'separator') {\n          output += ' ' + choice;\n          return;\n        }\n\n        var choiceStr = choice.key + ') ' + choice.name;\n\n        if (_this2.selectedKey === choice.key) {\n          choiceStr = chalk.cyan(choiceStr);\n        }\n\n        output += choiceStr;\n      });\n      return output;\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(state) {\n      if (state.value === 'help') {\n        this.selectedKey = '';\n        this.status = 'expanded';\n        this.render();\n        return;\n      }\n\n      this.render(state.isValid);\n    }\n    /**\n     * When user press `enter` key\n     */\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(state) {\n      this.status = 'answered';\n      var choice = this.opt.choices.where({\n        value: state.value\n      })[0];\n      this.answer = choice.short || choice.name; // Re-render prompt\n\n      this.render();\n      this.screen.done();\n      this.done(state.value);\n    }\n    /**\n     * When user press a key\n     */\n\n  }, {\n    key: \"onKeypress\",\n    value: function onKeypress() {\n      this.selectedKey = this.rl.line.toLowerCase();\n      var selected = this.opt.choices.where({\n        key: this.selectedKey\n      })[0];\n\n      if (this.status === 'expanded') {\n        this.render();\n      } else {\n        this.render(null, selected ? selected.name : null);\n      }\n    }\n    /**\n     * Validate the choices\n     * @param {Array} choices\n     */\n\n  }, {\n    key: \"validateChoices\",\n    value: function validateChoices(choices) {\n      var formatError;\n      var errors = [];\n      var keymap = {};\n      choices.filter(Separator.exclude).forEach(function (choice) {\n        if (!choice.key || choice.key.length !== 1) {\n          formatError = true;\n        }\n\n        if (keymap[choice.key]) {\n          errors.push(choice.key);\n        }\n\n        keymap[choice.key] = true;\n        choice.key = String(choice.key).toLowerCase();\n      });\n\n      if (formatError) {\n        throw new Error('Format error: `key` param must be a single letter and is required.');\n      }\n\n      if (keymap.h) {\n        throw new Error('Reserved key error: `key` param cannot be `h` - this value is reserved.');\n      }\n\n      if (errors.length) {\n        throw new Error('Duplicate key error: `key` param must be unique. Duplicates: ' + _.uniq(errors).join(', '));\n      }\n    }\n    /**\n     * Generate a string out of the choices keys\n     * @param  {Array}  choices\n     * @param  {Number|String} default - the choice index or name to capitalize\n     * @return {String} The rendered choices key string\n     */\n\n  }, {\n    key: \"generateChoicesString\",\n    value: function generateChoicesString(choices, defaultChoice) {\n      var defIndex = choices.realLength - 1;\n\n      if (_.isNumber(defaultChoice) && this.opt.choices.getChoice(defaultChoice)) {\n        defIndex = defaultChoice;\n      } else if (_.isString(defaultChoice)) {\n        var index = _.findIndex(choices.realChoices, function (_ref) {\n          var {\n            value\n          } = _ref;\n          return value === defaultChoice;\n        });\n\n        defIndex = index === -1 ? defIndex : index;\n      }\n\n      var defStr = this.opt.choices.pluck('key');\n      this.rawDefault = defStr[defIndex];\n      defStr[defIndex] = String(defStr[defIndex]).toUpperCase();\n      return defStr.join('');\n    }\n  }]);\n\n  return ExpandPrompt;\n}(Base);\n/**\n * Function for rendering checkbox choices\n * @param  {String} pointer Selected key\n * @return {String}         Rendered content\n */\n\n\nfunction renderChoices(choices, pointer) {\n  var output = '';\n  choices.forEach(function (choice) {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      output += ' ' + choice;\n      return;\n    }\n\n    var choiceStr = choice.key + ') ' + choice.name;\n\n    if (pointer === choice.key) {\n      choiceStr = chalk.cyan(choiceStr);\n    }\n\n    output += choiceStr;\n  });\n  return output;\n}\n\nmodule.exports = ExpandPrompt;"},"sourceMaps":null,"error":null,"hash":"198cf680c27390ce57d3e193487d6f7b","cacheData":{"env":{}}}