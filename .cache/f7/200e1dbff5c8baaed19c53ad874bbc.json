{"id":"../node_modules/postcss-logical/index.es.mjs","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655291184},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-logical/package.json","includedInParent":true,"mtime":1594306880586},{"name":"postcss","loc":{"line":1,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-logical/index.es.mjs","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-logical/node_modules/postcss/lib/postcss.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar cloneRule = function (decl, dir) {\n  var rule = Object(decl.parent).type === 'rule' ? decl.parent.clone({\n    raws: {}\n  }).removeAll() : _postcss.default.rule({\n    selector: '&'\n  });\n  rule.selectors = rule.selectors.map(function (selector) {\n    return \"\".concat(selector, \":dir(\").concat(dir, \")\");\n  });\n  return rule;\n};\n\nvar matchLogical = /^\\s*logical\\s+/i;\nvar matchLogicalBorder = /^border(-width|-style|-color)?$/i;\nvar matchLogicalBorderSide = /^border-(block|block-start|block-end|inline|inline-start|inline-end|start|end)(-(width|style|color))?$/i;\nvar transformBorder = {\n  // border\n  'border': function (decl, values, dir) {\n    var isLogical = matchLogical.test(values[0]);\n\n    if (isLogical) {\n      values[0] = values[0].replace(matchLogical, '');\n    }\n\n    var ltrDecls = [decl.clone({\n      prop: \"border-top\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-left\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[1] || values[0]\n    }), decl.clone({\n      prop: \"border-bottom\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[2] || values[0]\n    }), decl.clone({\n      prop: \"border-right\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[3] || values[1] || values[0]\n    })];\n    var rtlDecls = [decl.clone({\n      prop: \"border-top\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-right\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[1] || values[0]\n    }), decl.clone({\n      prop: \"border-bottom\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[2] || values[0]\n    }), decl.clone({\n      prop: \"border-left\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[3] || values[1] || values[0]\n    })];\n    return isLogical ? 1 === values.length ? decl.clone({\n      value: decl.value.replace(matchLogical, '')\n    }) : !values[3] || values[3] === values[1] ? [decl.clone({\n      prop: \"border-top\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-right\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[3] || values[1] || values[0]\n    }), decl.clone({\n      prop: \"border-bottom\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[2] || values[0]\n    }), decl.clone({\n      prop: \"border-left\".concat(decl.prop.replace(matchLogicalBorder, '$1')),\n      value: values[1] || values[0]\n    })] : 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)] : null;\n  },\n  // border-block\n  'border-block': function (decl, values) {\n    return [decl.clone({\n      prop: \"border-top\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-bottom\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[0]\n    })];\n  },\n  // border-block-start\n  'border-block-start': function (decl) {\n    decl.prop = 'border-top';\n  },\n  // border-block-end\n  'border-block-end': function (decl) {\n    decl.prop = 'border-bottom';\n  },\n  // border-inline\n  'border-inline': function (decl, values, dir) {\n    var ltrDecls = [decl.clone({\n      prop: \"border-left\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-right\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[1] || values[0]\n    })];\n    var rtlDecls = [decl.clone({\n      prop: \"border-right\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-left\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[1] || values[0]\n    })];\n    var isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n    return isLTR ? ltrDecls : 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  },\n  // border-inline-start\n  'border-inline-start': function (decl, values, dir) {\n    var ltrDecl = decl.clone({\n      prop: \"border-left\".concat(decl.prop.replace(matchLogicalBorderSide, '$2'))\n    });\n    var rtlDecl = decl.clone({\n      prop: \"border-right\".concat(decl.prop.replace(matchLogicalBorderSide, '$2'))\n    });\n    return 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n  },\n  // border-inline-end\n  'border-inline-end': function (decl, values, dir) {\n    var ltrDecl = decl.clone({\n      prop: \"border-right\".concat(decl.prop.replace(matchLogicalBorderSide, '$2'))\n    });\n    var rtlDecl = decl.clone({\n      prop: \"border-left\".concat(decl.prop.replace(matchLogicalBorderSide, '$2'))\n    });\n    return 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n  },\n  // border-start\n  'border-start': function (decl, values, dir) {\n    var ltrDecls = [decl.clone({\n      prop: \"border-top\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-left\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[1] || values[0]\n    })];\n    var rtlDecls = [decl.clone({\n      prop: \"border-top\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-right\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[1] || values[0]\n    })];\n    return 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  },\n  // border-end\n  'border-end': function (decl, values, dir) {\n    var ltrDecls = [decl.clone({\n      prop: \"border-bottom\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-right\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[1] || values[0]\n    })];\n    var rtlDecls = [decl.clone({\n      prop: \"border-bottom\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[0]\n    }), decl.clone({\n      prop: \"border-left\".concat(decl.prop.replace(matchLogicalBorderSide, '$2')),\n      value: values[1] || values[0]\n    })];\n    return 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  }\n};\n\nvar transformFloat = function (decl, values, dir) {\n  var lDecl = decl.clone({\n    value: 'left'\n  });\n  var rDecl = decl.clone({\n    value: 'right'\n  });\n  return /^inline-start$/i.test(decl.value) ? 'ltr' === dir ? lDecl : 'rtl' === dir ? rDecl : [cloneRule(decl, 'ltr').append(lDecl), cloneRule(decl, 'rtl').append(rDecl)] : /^inline-end$/i.test(decl.value) ? 'ltr' === dir ? rDecl : 'rtl' === dir ? lDecl : [cloneRule(decl, 'ltr').append(rDecl), cloneRule(decl, 'rtl').append(lDecl)] : null;\n};\n\nvar transformInset = function (decl, values, dir) {\n  if ('logical' !== values[0]) {\n    return [decl.clone({\n      prop: 'top',\n      value: values[0]\n    }), decl.clone({\n      prop: 'right',\n      value: values[1] || values[0]\n    }), decl.clone({\n      prop: 'bottom',\n      value: values[2] || values[0]\n    }), decl.clone({\n      prop: 'left',\n      value: values[3] || values[1] || values[0]\n    })];\n  }\n\n  var isLTR = !values[4] || values[4] === values[2];\n  var ltrDecls = [decl.clone({\n    prop: 'top',\n    value: values[1]\n  }), decl.clone({\n    prop: 'left',\n    value: values[2] || values[1]\n  }), decl.clone({\n    prop: 'bottom',\n    value: values[3] || values[1]\n  }), decl.clone({\n    prop: 'right',\n    value: values[4] || values[2] || values[1]\n  })];\n  var rtlDecls = [decl.clone({\n    prop: 'top',\n    value: values[1]\n  }), decl.clone({\n    prop: 'right',\n    value: values[2] || values[1]\n  }), decl.clone({\n    prop: 'bottom',\n    value: values[3] || values[1]\n  }), decl.clone({\n    prop: 'left',\n    value: values[4] || values[2] || values[1]\n  })];\n  return isLTR || 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n};\n\nvar transformResize = function (decl) {\n  return /^block$/i.test(decl.value) ? decl.clone({\n    value: 'vertical'\n  }) : /^inline$/i.test(decl.value) ? decl.clone({\n    value: 'horizontal'\n  }) : null;\n};\n\nvar matchSide = /^(inset|margin|padding)(?:-(block|block-start|block-end|inline|inline-start|inline-end|start|end))$/i;\nvar matchInsetPrefix = /^inset-/i;\n\nvar cloneDecl = function (decl, suffix, value) {\n  return decl.clone({\n    prop: \"\".concat(decl.prop.replace(matchSide, '$1')).concat(suffix).replace(matchInsetPrefix, ''),\n    value\n  });\n};\n\nvar transformSide = {\n  // inset-block, margin-block, padding-block\n  'block': function (decl, values) {\n    return [cloneDecl(decl, '-top', values[0]), cloneDecl(decl, '-bottom', values[1] || values[0])];\n  },\n  // inset-block-start, margin-block-start, padding-block-start\n  'block-start': function (decl) {\n    decl.prop = decl.prop.replace(matchSide, '$1-top').replace(matchInsetPrefix, '');\n  },\n  // inset-block-end, margin-block-end, padding-block-end\n  'block-end': function (decl) {\n    decl.prop = decl.prop.replace(matchSide, '$1-bottom').replace(matchInsetPrefix, '');\n  },\n  // inset-inline, margin-inline, padding-inline\n  'inline': function (decl, values, dir) {\n    var ltrDecls = [cloneDecl(decl, '-left', values[0]), cloneDecl(decl, '-right', values[1] || values[0])];\n    var rtlDecls = [cloneDecl(decl, '-right', values[0]), cloneDecl(decl, '-left', values[1] || values[0])];\n    var isLTR = 1 === values.length || 2 === values.length && values[0] === values[1];\n    return isLTR ? ltrDecls : 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  },\n  // inset-inline-start, margin-inline-start, padding-inline-start\n  'inline-start': function (decl, values, dir) {\n    var ltrDecl = cloneDecl(decl, '-left', decl.value);\n    var rtlDecl = cloneDecl(decl, '-right', decl.value);\n    return 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n  },\n  // inset-inline-end, margin-inline-end, padding-inline-end\n  'inline-end': function (decl, values, dir) {\n    var ltrDecl = cloneDecl(decl, '-right', decl.value);\n    var rtlDecl = cloneDecl(decl, '-left', decl.value);\n    return 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n  },\n  // inset-start, margin-start, padding-start\n  'start': function (decl, values, dir) {\n    var ltrDecls = [cloneDecl(decl, '-top', values[0]), cloneDecl(decl, '-left', values[1] || values[0])];\n    var rtlDecls = [cloneDecl(decl, '-top', values[0]), cloneDecl(decl, '-right', values[1] || values[0])];\n    return 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  },\n  // inset-end, margin-end, padding-end\n  'end': function (decl, values, dir) {\n    var ltrDecls = [cloneDecl(decl, '-bottom', values[0]), cloneDecl(decl, '-right', values[1] || values[0])];\n    var rtlDecls = [cloneDecl(decl, '-bottom', values[0]), cloneDecl(decl, '-left', values[1] || values[0])];\n    return 'ltr' === dir ? ltrDecls : 'rtl' === dir ? rtlDecls : [cloneRule(decl, 'ltr').append(ltrDecls), cloneRule(decl, 'rtl').append(rtlDecls)];\n  }\n};\nvar matchSize = /^(min-|max-)?(block|inline)-(size)$/i;\n\nvar transformSize = function (decl) {\n  decl.prop = decl.prop.replace(matchSize, function ($0, minmax, flow) {\n    return \"\".concat(minmax || '').concat('block' === flow ? 'height' : 'width');\n  });\n};\n\nvar transformSpacing = function (decl, values, dir) {\n  if ('logical' !== values[0]) {\n    return null;\n  }\n\n  var isLTR = !values[4] || values[4] === values[2];\n  var ltrDecl = decl.clone({\n    value: [values[1], values[4] || values[2] || values[1], values[3] || values[1], values[2] || values[1]].join(' ')\n  });\n  var rtlDecl = decl.clone({\n    value: [values[1], values[2] || values[1], values[3] || values[1], values[4] || values[2] || values[1]].join(' ')\n  });\n  return isLTR ? decl.clone({\n    value: decl.value.replace(/^\\s*logical\\s+/i, '')\n  }) : 'ltr' === dir ? ltrDecl : 'rtl' === dir ? rtlDecl : [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)];\n};\n\nvar transformTextAlign = function (decl, values, dir) {\n  var lDecl = decl.clone({\n    value: 'left'\n  });\n  var rDecl = decl.clone({\n    value: 'right'\n  });\n  return /^start$/i.test(decl.value) ? 'ltr' === dir ? lDecl : 'rtl' === dir ? rDecl : [cloneRule(decl, 'ltr').append(lDecl), cloneRule(decl, 'rtl').append(rDecl)] : /^end$/i.test(decl.value) ? 'ltr' === dir ? rDecl : 'rtl' === dir ? lDecl : [cloneRule(decl, 'ltr').append(rDecl), cloneRule(decl, 'rtl').append(lDecl)] : null;\n};\n\nfunction splitByComma(string, isTrimmed) {\n  return splitByRegExp(string, /^,$/, isTrimmed);\n}\n\nfunction splitBySpace(string, isTrimmed) {\n  return splitByRegExp(string, /^\\s$/, isTrimmed);\n}\n\nfunction splitBySlash(string, isTrimmed) {\n  return splitByRegExp(string, /^\\/$/, isTrimmed);\n}\n\nfunction splitByRegExp(string, re, isTrimmed) {\n  var array = [];\n  var buffer = '';\n  var split = false;\n  var func = 0;\n  var i = -1;\n\n  while (++i < string.length) {\n    var char = string[i];\n\n    if (char === '(') {\n      func += 1;\n    } else if (char === ')') {\n      if (func > 0) {\n        func -= 1;\n      }\n    } else if (func === 0) {\n      if (re.test(char)) {\n        split = true;\n      }\n    }\n\n    if (split) {\n      if (!isTrimmed || buffer.trim()) {\n        array.push(isTrimmed ? buffer.trim() : buffer);\n      }\n\n      if (!isTrimmed) {\n        array.push(char);\n      }\n\n      buffer = '';\n      split = false;\n    } else {\n      buffer += char;\n    }\n  }\n\n  if (buffer !== '') {\n    array.push(isTrimmed ? buffer.trim() : buffer);\n  }\n\n  return array;\n}\n\nvar transformTransition = function (decl, notValues, dir) {\n  var ltrValues = [];\n  var rtlValues = [];\n  splitByComma(decl.value).forEach(function (value) {\n    var hasBeenSplit = false;\n    splitBySpace(value).forEach(function (word, index, words) {\n      if (word in valueMap) {\n        hasBeenSplit = true;\n        valueMap[word].ltr.forEach(function (replacement) {\n          var clone = words.slice();\n          clone.splice(index, 1, replacement);\n\n          if (ltrValues.length && !/^,$/.test(ltrValues[ltrValues.length - 1])) {\n            ltrValues.push(',');\n          }\n\n          ltrValues.push(clone.join(''));\n        });\n        valueMap[word].rtl.forEach(function (replacement) {\n          var clone = words.slice();\n          clone.splice(index, 1, replacement);\n\n          if (rtlValues.length && !/^,$/.test(rtlValues[rtlValues.length - 1])) {\n            rtlValues.push(',');\n          }\n\n          rtlValues.push(clone.join(''));\n        });\n      }\n    });\n\n    if (!hasBeenSplit) {\n      ltrValues.push(value);\n      rtlValues.push(value);\n    }\n  });\n  var ltrDecl = decl.clone({\n    value: ltrValues.join('')\n  });\n  var rtlDecl = decl.clone({\n    value: rtlValues.join('')\n  });\n  return ltrValues.length && 'ltr' === dir ? ltrDecl : rtlValues.length && 'rtl' === dir ? rtlDecl : ltrDecl.value !== rtlDecl.value ? [cloneRule(decl, 'ltr').append(ltrDecl), cloneRule(decl, 'rtl').append(rtlDecl)] : null;\n};\n\nvar valueMap = {\n  'border-block': {\n    ltr: ['border-top', 'border-bottom'],\n    rtl: ['border-top', 'border-bottom']\n  },\n  'border-block-color': {\n    ltr: ['border-top-color', 'border-bottom-color'],\n    rtl: ['border-top-color', 'border-bottom-color']\n  },\n  'border-block-end': {\n    ltr: ['border-bottom'],\n    rtl: ['border-bottom']\n  },\n  'border-block-end-color': {\n    ltr: ['border-bottom-color'],\n    rtl: ['border-bottom-color']\n  },\n  'border-block-end-style': {\n    ltr: ['border-bottom-style'],\n    rtl: ['border-bottom-style']\n  },\n  'border-block-end-width': {\n    ltr: ['border-bottom-width'],\n    rtl: ['border-bottom-width']\n  },\n  'border-block-start': {\n    ltr: ['border-top'],\n    rtl: ['border-top']\n  },\n  'border-block-start-color': {\n    ltr: ['border-top-color'],\n    rtl: ['border-top-color']\n  },\n  'border-block-start-style': {\n    ltr: ['border-top-style'],\n    rtl: ['border-top-style']\n  },\n  'border-block-start-width': {\n    ltr: ['border-top-width'],\n    rtl: ['border-top-width']\n  },\n  'border-block-style': {\n    ltr: ['border-top-style', 'border-bottom-style'],\n    rtl: ['border-top-style', 'border-bottom-style']\n  },\n  'border-block-width': {\n    ltr: ['border-top-width', 'border-bottom-width'],\n    rtl: ['border-top-width', 'border-bottom-width']\n  },\n  'border-end': {\n    ltr: ['border-bottom', 'border-right'],\n    rtl: ['border-bottom', 'border-left']\n  },\n  'border-end-color': {\n    ltr: ['border-bottom-color', 'border-right-color'],\n    rtl: ['border-bottom-color', 'border-left-color']\n  },\n  'border-end-style': {\n    ltr: ['border-bottom-style', 'border-right-style'],\n    rtl: ['border-bottom-style', 'border-left-style']\n  },\n  'border-end-width': {\n    ltr: ['border-bottom-width', 'border-right-width'],\n    rtl: ['border-bottom-width', 'border-left-width']\n  },\n  'border-inline': {\n    ltr: ['border-left', 'border-right'],\n    rtl: ['border-left', 'border-right']\n  },\n  'border-inline-color': {\n    ltr: ['border-left-color', 'border-right-color'],\n    rtl: ['border-left-color', 'border-right-color']\n  },\n  'border-inline-end': {\n    ltr: ['border-right'],\n    rtl: ['border-left']\n  },\n  'border-inline-end-color': {\n    ltr: ['border-right-color'],\n    rtl: ['border-left-color']\n  },\n  'border-inline-end-style': {\n    ltr: ['border-right-style'],\n    rtl: ['border-left-style']\n  },\n  'border-inline-end-width': {\n    ltr: ['border-right-width'],\n    rtl: ['border-left-width']\n  },\n  'border-inline-start': {\n    ltr: ['border-left'],\n    rtl: ['border-right']\n  },\n  'border-inline-start-color': {\n    ltr: ['border-left-color'],\n    rtl: ['border-right-color']\n  },\n  'border-inline-start-style': {\n    ltr: ['border-left-style'],\n    rtl: ['border-right-style']\n  },\n  'border-inline-start-width': {\n    ltr: ['border-left-width'],\n    rtl: ['border-right-width']\n  },\n  'border-inline-style': {\n    ltr: ['border-left-style', 'border-right-style'],\n    rtl: ['border-left-style', 'border-right-style']\n  },\n  'border-inline-width': {\n    ltr: ['border-left-width', 'border-right-width'],\n    rtl: ['border-left-width', 'border-right-width']\n  },\n  'border-start': {\n    ltr: ['border-top', 'border-left'],\n    rtl: ['border-top', 'border-right']\n  },\n  'border-start-color': {\n    ltr: ['border-top-color', 'border-left-color'],\n    rtl: ['border-top-color', 'border-right-color']\n  },\n  'border-start-style': {\n    ltr: ['border-top-style', 'border-left-style'],\n    rtl: ['border-top-style', 'border-right-style']\n  },\n  'border-start-width': {\n    ltr: ['border-top-width', 'border-left-width'],\n    rtl: ['border-top-width', 'border-right-width']\n  },\n  'block-size': {\n    ltr: ['height'],\n    rtl: ['height']\n  },\n  'inline-size': {\n    ltr: ['width'],\n    rtl: ['width']\n  },\n  'inset': {\n    ltr: ['top', 'right', 'bottom', 'left'],\n    rtl: ['top', 'right', 'bottom', 'left']\n  },\n  'inset-block': {\n    ltr: ['top', 'bottom'],\n    rtl: ['top', 'bottom']\n  },\n  'inset-block-start': {\n    ltr: ['top'],\n    rtl: ['top']\n  },\n  'inset-block-end': {\n    ltr: ['bottom'],\n    rtl: ['bottom']\n  },\n  'inset-end': {\n    ltr: ['bottom', 'right'],\n    rtl: ['bottom', 'left']\n  },\n  'inset-inline': {\n    ltr: ['left', 'right'],\n    rtl: ['left', 'right']\n  },\n  'inset-inline-start': {\n    ltr: ['left'],\n    rtl: ['right']\n  },\n  'inset-inline-end': {\n    ltr: ['right'],\n    rtl: ['left']\n  },\n  'inset-start': {\n    ltr: ['top', 'left'],\n    rtl: ['top', 'right']\n  },\n  'margin-block': {\n    ltr: ['margin-top', 'margin-bottom'],\n    rtl: ['margin-top', 'margin-bottom']\n  },\n  'margin-block-start': {\n    ltr: ['margin-top'],\n    rtl: ['margin-top']\n  },\n  'margin-block-end': {\n    ltr: ['margin-bottom'],\n    rtl: ['margin-bottom']\n  },\n  'margin-end': {\n    ltr: ['margin-bottom', 'margin-right'],\n    rtl: ['margin-bottom', 'margin-left']\n  },\n  'margin-inline': {\n    ltr: ['margin-left', 'margin-right'],\n    rtl: ['margin-left', 'margin-right']\n  },\n  'margin-inline-start': {\n    ltr: ['margin-left'],\n    rtl: ['margin-right']\n  },\n  'margin-inline-end': {\n    ltr: ['margin-right'],\n    rtl: ['margin-left']\n  },\n  'margin-start': {\n    ltr: ['margin-top', 'margin-left'],\n    rtl: ['margin-top', 'margin-right']\n  },\n  'padding-block': {\n    ltr: ['padding-top', 'padding-bottom'],\n    rtl: ['padding-top', 'padding-bottom']\n  },\n  'padding-block-start': {\n    ltr: ['padding-top'],\n    rtl: ['padding-top']\n  },\n  'padding-block-end': {\n    ltr: ['padding-bottom'],\n    rtl: ['padding-bottom']\n  },\n  'padding-end': {\n    ltr: ['padding-bottom', 'padding-right'],\n    rtl: ['padding-bottom', 'padding-left']\n  },\n  'padding-inline': {\n    ltr: ['padding-left', 'padding-right'],\n    rtl: ['padding-left', 'padding-right']\n  },\n  'padding-inline-start': {\n    ltr: ['padding-left'],\n    rtl: ['padding-right']\n  },\n  'padding-inline-end': {\n    ltr: ['padding-right'],\n    rtl: ['padding-left']\n  },\n  'padding-start': {\n    ltr: ['padding-top', 'padding-left'],\n    rtl: ['padding-top', 'padding-right']\n  }\n};\nvar matchSupportedProperties = /^(?:(inset|margin|padding)(?:-(block|block-start|block-end|inline|inline-start|inline-end|start|end))|(min-|max-)?(block|inline)-(size))$/i; // tooling\n\nvar transforms = {\n  'border': transformBorder['border'],\n  'border-width': transformBorder['border'],\n  'border-style': transformBorder['border'],\n  'border-color': transformBorder['border'],\n  'border-block': transformBorder['border-block'],\n  'border-block-width': transformBorder['border-block'],\n  'border-block-style': transformBorder['border-block'],\n  'border-block-color': transformBorder['border-block'],\n  'border-block-start': transformBorder['border-block-start'],\n  'border-block-start-width': transformBorder['border-block-start'],\n  'border-block-start-style': transformBorder['border-block-start'],\n  'border-block-start-color': transformBorder['border-block-start'],\n  'border-block-end': transformBorder['border-block-end'],\n  'border-block-end-width': transformBorder['border-block-end'],\n  'border-block-end-style': transformBorder['border-block-end'],\n  'border-block-end-color': transformBorder['border-block-end'],\n  'border-inline': transformBorder['border-inline'],\n  'border-inline-width': transformBorder['border-inline'],\n  'border-inline-style': transformBorder['border-inline'],\n  'border-inline-color': transformBorder['border-inline'],\n  'border-inline-start': transformBorder['border-inline-start'],\n  'border-inline-start-width': transformBorder['border-inline-start'],\n  'border-inline-start-style': transformBorder['border-inline-start'],\n  'border-inline-start-color': transformBorder['border-inline-start'],\n  'border-inline-end': transformBorder['border-inline-end'],\n  'border-inline-end-width': transformBorder['border-inline-end'],\n  'border-inline-end-style': transformBorder['border-inline-end'],\n  'border-inline-end-color': transformBorder['border-inline-end'],\n  'border-start': transformBorder['border-start'],\n  'border-start-width': transformBorder['border-start'],\n  'border-start-style': transformBorder['border-start'],\n  'border-start-color': transformBorder['border-start'],\n  'border-end': transformBorder['border-end'],\n  'border-end-width': transformBorder['border-end'],\n  'border-end-style': transformBorder['border-end'],\n  'border-end-color': transformBorder['border-end'],\n  'clear': transformFloat,\n  'inset': transformInset,\n  'margin': transformSpacing,\n  'padding': transformSpacing,\n  'block': transformSide['block'],\n  'block-start': transformSide['block-start'],\n  'block-end': transformSide['block-end'],\n  'inline': transformSide['inline'],\n  'inline-start': transformSide['inline-start'],\n  'inline-end': transformSide['inline-end'],\n  'start': transformSide['start'],\n  'end': transformSide['end'],\n  'float': transformFloat,\n  'resize': transformResize,\n  'size': transformSize,\n  'text-align': transformTextAlign,\n  'transition': transformTransition,\n  'transition-property': transformTransition\n}; // properties that will be split by slash\n\nvar splitBySlashPropRegExp = /^border(-block|-inline|-start|-end)?(-width|-style|-color)?$/i; // plugin\n\nvar index = _postcss.default.plugin('postcss-logical-properties', function (opts) {\n  var preserve = Boolean(Object(opts).preserve);\n  var dir = !preserve && typeof Object(opts).dir === 'string' ? /^rtl$/i.test(opts.dir) ? 'rtl' : 'ltr' : false;\n  return function (root) {\n    root.walkDecls(function (decl) {\n      var parent = decl.parent;\n      var values = splitBySlashPropRegExp.test(decl.prop) ? splitBySlash(decl.value, true) : splitBySpace(decl.value, true);\n      var prop = decl.prop.replace(matchSupportedProperties, '$2$5').toLowerCase();\n\n      if (prop in transforms) {\n        var replacer = transforms[prop](decl, values, dir);\n\n        if (replacer) {\n          [].concat(replacer).forEach(function (replacement) {\n            if (replacement.type === 'rule') {\n              parent.before(replacement);\n            } else {\n              decl.before(replacement);\n            }\n          });\n\n          if (!preserve) {\n            decl.remove();\n\n            if (!parent.nodes.length) {\n              parent.remove();\n            }\n          }\n        }\n      }\n    });\n  };\n});\n\nvar _default = index;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"ca0a07266c6f3015cc53a812a0ac7161","cacheData":{"env":{}}}