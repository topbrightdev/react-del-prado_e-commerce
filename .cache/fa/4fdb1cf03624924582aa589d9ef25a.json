{"id":"../node_modules/websocket-extensions/lib/pipeline/functor.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-extensions/package.json","includedInParent":true,"mtime":1594570878394},{"name":"./ring_buffer","loc":{"line":3,"column":25},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-extensions/lib/pipeline/functor.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/websocket-extensions/lib/pipeline/ring_buffer.js"}],"generated":{"js":"'use strict';\n\nvar RingBuffer = require('./ring_buffer');\n\nvar Functor = function (session, method) {\n  this._session = session;\n  this._method = method;\n  this._queue = new RingBuffer(Functor.QUEUE_SIZE);\n  this._stopped = false;\n  this.pending = 0;\n};\n\nFunctor.QUEUE_SIZE = 8;\n\nFunctor.prototype.call = function (error, message, callback, context) {\n  if (this._stopped) return;\n  var record = {\n    error: error,\n    message: message,\n    callback: callback,\n    context: context,\n    done: false\n  },\n      called = false,\n      self = this;\n\n  this._queue.push(record);\n\n  if (record.error) {\n    record.done = true;\n\n    this._stop();\n\n    return this._flushQueue();\n  }\n\n  var handler = function (err, msg) {\n    if (!(called ^ (called = true))) return;\n\n    if (err) {\n      self._stop();\n\n      record.error = err;\n      record.message = null;\n    } else {\n      record.message = msg;\n    }\n\n    record.done = true;\n\n    self._flushQueue();\n  };\n\n  try {\n    this._session[this._method](message, handler);\n  } catch (err) {\n    handler(err);\n  }\n};\n\nFunctor.prototype._stop = function () {\n  this.pending = this._queue.length;\n  this._stopped = true;\n};\n\nFunctor.prototype._flushQueue = function () {\n  var queue = this._queue,\n      record;\n\n  while (queue.length > 0 && queue.peek().done) {\n    record = queue.shift();\n\n    if (record.error) {\n      this.pending = 0;\n      queue.clear();\n    } else {\n      this.pending -= 1;\n    }\n\n    record.callback.call(record.context, record.error, record.message);\n  }\n};\n\nmodule.exports = Functor;"},"sourceMaps":null,"error":null,"hash":"5e2d0de2d0da516b8598c1bd074a058a","cacheData":{"env":{}}}