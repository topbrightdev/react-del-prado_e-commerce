{"id":"../node_modules/autoprefixer/lib/resolution.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1594570878686},{"name":"./prefixer","loc":{"line":7,"column":23},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/resolution.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/prefixer.js"},{"name":"./utils","loc":{"line":9,"column":20},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/resolution.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/utils.js"},{"name":"num2fraction","loc":{"line":11,"column":18},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/resolution.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/num2fraction/index.js"}],"generated":{"js":"\"use strict\";\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _defaults(subClass, superClass);\n}\n\nvar Prefixer = require('./prefixer');\n\nvar utils = require('./utils');\n\nvar n2f = require('num2fraction');\n\nvar REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpi)/gi;\nvar SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpi)/i;\n\nvar Resolution = /*#__PURE__*/function (_Prefixer) {\n  _inheritsLoose(Resolution, _Prefixer);\n\n  function Resolution() {\n    return _Prefixer.apply(this, arguments) || this;\n  }\n\n  var _proto = Resolution.prototype;\n  /**\n     * Return prefixed query name\n     */\n\n  _proto.prefixName = function prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio';\n    } else {\n      return prefix + name + '-device-pixel-ratio';\n    }\n  };\n  /**\n     * Return prefixed query\n     */\n\n\n  _proto.prefixQuery = function prefixQuery(prefix, name, colon, value, units) {\n    if (units === 'dpi') {\n      value = Number(value / 96);\n    }\n\n    if (prefix === '-o-') {\n      value = n2f(value);\n    }\n\n    return this.prefixName(prefix, name) + colon + value;\n  };\n  /**\n     * Remove prefixed queries\n     */\n\n\n  _proto.clean = function clean(rule) {\n    var _this = this;\n\n    if (!this.bad) {\n      this.bad = [];\n\n      for (var _iterator = this.prefixes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var prefix = _ref;\n        this.bad.push(this.prefixName(prefix, 'min'));\n        this.bad.push(this.prefixName(prefix, 'max'));\n      }\n    }\n\n    rule.params = utils.editList(rule.params, function (queries) {\n      return queries.filter(function (query) {\n        return _this.bad.every(function (i) {\n          return query.indexOf(i) === -1;\n        });\n      });\n    });\n  };\n  /**\n     * Add prefixed queries\n     */\n\n\n  _proto.process = function process(rule) {\n    var _this2 = this;\n\n    var parent = this.parentPrefix(rule);\n    var prefixes = parent ? [parent] : this.prefixes;\n    rule.params = utils.editList(rule.params, function (origin, prefixed) {\n      for (var _iterator2 = origin, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var query = _ref2;\n\n        if (query.indexOf('min-resolution') === -1 && query.indexOf('max-resolution') === -1) {\n          prefixed.push(query);\n          continue;\n        }\n\n        var _loop = function _loop() {\n          if (_isArray3) {\n            if (_i3 >= _iterator3.length) return \"break\";\n            _ref3 = _iterator3[_i3++];\n          } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) return \"break\";\n            _ref3 = _i3.value;\n          }\n\n          var prefix = _ref3;\n          var processed = query.replace(REGEXP, function (str) {\n            var parts = str.match(SPLIT);\n            return _this2.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);\n          });\n          prefixed.push(processed);\n        };\n\n        for (var _iterator3 = prefixes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n          var _ref3;\n\n          var _ret = _loop();\n\n          if (_ret === \"break\") break;\n        }\n\n        prefixed.push(query);\n      }\n\n      return utils.uniq(prefixed);\n    });\n  };\n\n  return Resolution;\n}(Prefixer);\n\nmodule.exports = Resolution;"},"sourceMaps":null,"error":null,"hash":"d96ea2b41a9cc26a8966daf347d50959","cacheData":{"env":{}}}