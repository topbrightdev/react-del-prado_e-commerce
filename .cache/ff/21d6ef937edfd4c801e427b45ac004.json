{"id":"../node_modules/autoprefixer/lib/hacks/grid-utils.js","dependencies":[{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/package.json","includedInParent":true,"mtime":1594655165833},{"name":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1594570878686},{"name":"postcss-value-parser","loc":{"line":3,"column":21},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/hacks/grid-utils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/postcss-value-parser/lib/index.js"},{"name":"postcss","loc":{"line":5,"column":19},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/hacks/grid-utils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/node_modules/postcss/lib/postcss.js"},{"name":"../utils","loc":{"line":11,"column":28},"parent":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/hacks/grid-utils.js","resolved":"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/autoprefixer/lib/utils.js"}],"generated":{"js":"\"use strict\";\n\nvar parser = require('postcss-value-parser');\n\nvar list = require('postcss').list;\n\nvar uniq = require('../utils').uniq;\n\nvar escapeRegexp = require('../utils').escapeRegexp;\n\nvar splitSelector = require('../utils').splitSelector;\n\nfunction convert(value) {\n  if (value && value.length === 2 && value[0] === 'span' && parseInt(value[1], 10) > 0) {\n    return [false, parseInt(value[1], 10)];\n  }\n\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false];\n  }\n\n  return [false, false];\n}\n\nfunction translate(values, startIndex, endIndex) {\n  var startValue = values[startIndex];\n  var endValue = values[endIndex];\n\n  if (!startValue) {\n    return [false, false];\n  }\n\n  var _convert = convert(startValue),\n      start = _convert[0],\n      spanStart = _convert[1];\n\n  var _convert2 = convert(endValue),\n      end = _convert2[0],\n      spanEnd = _convert2[1];\n\n  if (start && !endValue) {\n    return [start, false];\n  }\n\n  if (spanStart && end) {\n    return [end - spanStart, spanStart];\n  }\n\n  if (start && spanEnd) {\n    return [start, spanEnd];\n  }\n\n  if (start && end) {\n    return [start, end - start];\n  }\n\n  return [false, false];\n}\n\nfunction parse(decl) {\n  var node = parser(decl.value);\n  var values = [];\n  var current = 0;\n  values[current] = [];\n\n  for (var _iterator = node.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var i = _ref;\n\n    if (i.type === 'div') {\n      current += 1;\n      values[current] = [];\n    } else if (i.type === 'word') {\n      values[current].push(i.value);\n    }\n  }\n\n  return values;\n}\n\nfunction insertDecl(decl, prop, value) {\n  if (value && !decl.parent.some(function (i) {\n    return i.prop === \"-ms-\" + prop;\n  })) {\n    decl.cloneBefore({\n      prop: \"-ms-\" + prop,\n      value: value.toString()\n    });\n  }\n} // Track transforms\n\n\nfunction prefixTrackProp(_ref2) {\n  var prop = _ref2.prop,\n      prefix = _ref2.prefix;\n  return prefix + prop.replace('template-', '');\n}\n\nfunction transformRepeat(_ref3, _ref4) {\n  var nodes = _ref3.nodes;\n  var gap = _ref4.gap;\n\n  var _nodes$reduce = nodes.reduce(function (result, node) {\n    if (node.type === 'div' && node.value === ',') {\n      result.key = 'size';\n    } else {\n      result[result.key].push(parser.stringify(node));\n    }\n\n    return result;\n  }, {\n    key: 'count',\n    size: [],\n    count: []\n  }),\n      count = _nodes$reduce.count,\n      size = _nodes$reduce.size; // insert gap values\n\n\n  if (gap) {\n    var _ret = function () {\n      size = size.filter(function (i) {\n        return i.trim();\n      });\n      var val = [];\n\n      var _loop = function _loop(i) {\n        size.forEach(function (item, index) {\n          if (index > 0 || i > 1) {\n            val.push(gap);\n          }\n\n          val.push(item);\n        });\n      };\n\n      for (var i = 1; i <= count; i++) {\n        _loop(i);\n      }\n\n      return {\n        v: val.join(' ')\n      };\n    }();\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n\n  return \"(\" + size.join('') + \")[\" + count.join('') + \"]\";\n}\n\nfunction prefixTrackValue(_ref5) {\n  var value = _ref5.value,\n      gap = _ref5.gap;\n  var result = parser(value).nodes.reduce(function (nodes, node) {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, {\n          gap: gap\n        })\n      });\n    }\n\n    if (gap && node.type === 'space') {\n      return nodes.concat({\n        type: 'space',\n        value: ' '\n      }, {\n        type: 'word',\n        value: gap\n      }, node);\n    }\n\n    return nodes.concat(node);\n  }, []);\n  return parser.stringify(result);\n} // Parse grid-template-areas\n\n\nvar DOTS = /^\\.+$/;\n\nfunction track(start, end) {\n  return {\n    start: start,\n    end: end,\n    span: end - start\n  };\n}\n\nfunction getColumns(line) {\n  return line.trim().split(/\\s+/g);\n}\n\nfunction parseGridAreas(_ref6) {\n  var rows = _ref6.rows,\n      gap = _ref6.gap;\n  return rows.reduce(function (areas, line, rowIndex) {\n    if (gap.row) rowIndex *= 2;\n    if (line.trim() === '') return areas;\n    getColumns(line).forEach(function (area, columnIndex) {\n      if (DOTS.test(area)) return;\n      if (gap.column) columnIndex *= 2;\n\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        };\n      } else {\n        var _areas$area = areas[area],\n            column = _areas$area.column,\n            row = _areas$area.row;\n        column.start = Math.min(column.start, columnIndex + 1);\n        column.end = Math.max(column.end, columnIndex + 2);\n        column.span = column.end - column.start;\n        row.start = Math.min(row.start, rowIndex + 1);\n        row.end = Math.max(row.end, rowIndex + 2);\n        row.span = row.end - row.start;\n      }\n    });\n    return areas;\n  }, {});\n} // Parse grid-template\n\n\nfunction testTrack(node) {\n  return node.type === 'word' && /^\\[.+\\]$/.test(node.value);\n}\n\nfunction verifyRowSize(result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto');\n  }\n\n  return result;\n}\n\nfunction parseTemplate(_ref7) {\n  var decl = _ref7.decl,\n      gap = _ref7.gap;\n  var gridTemplate = parser(decl.value).nodes.reduce(function (result, node) {\n    var type = node.type,\n        value = node.value;\n    if (testTrack(node) || type === 'space') return result; // area\n\n    if (type === 'string') {\n      result = verifyRowSize(result);\n      result.areas.push(value);\n    } // values and function\n\n\n    if (type === 'word' || type === 'function') {\n      result[result.key].push(parser.stringify(node));\n    } // divider(/)\n\n\n    if (type === 'div' && value === '/') {\n      result.key = 'columns';\n      result = verifyRowSize(result);\n    }\n\n    return result;\n  }, {\n    key: 'rows',\n    columns: [],\n    rows: [],\n    areas: []\n  });\n  return {\n    areas: parseGridAreas({\n      rows: gridTemplate.areas,\n      gap: gap\n    }),\n    columns: prefixTrackValue({\n      value: gridTemplate.columns.join(' '),\n      gap: gap.column\n    }),\n    rows: prefixTrackValue({\n      value: gridTemplate.rows.join(' '),\n      gap: gap.row\n    })\n  };\n} // Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\n\n\nfunction getMSDecls(area, addRowSpan, addColumnSpan) {\n  if (addRowSpan === void 0) {\n    addRowSpan = false;\n  }\n\n  if (addColumnSpan === void 0) {\n    addColumnSpan = false;\n  }\n\n  return [].concat({\n    prop: '-ms-grid-row',\n    value: String(area.row.start)\n  }, area.row.span > 1 || addRowSpan ? {\n    prop: '-ms-grid-row-span',\n    value: String(area.row.span)\n  } : [], {\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  }, area.column.span > 1 || addColumnSpan ? {\n    prop: '-ms-grid-column-span',\n    value: String(area.column.span)\n  } : []);\n}\n\nfunction getParentMedia(parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent;\n  }\n\n  if (!parent.parent) {\n    return false;\n  }\n\n  return getParentMedia(parent.parent);\n}\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\n\n\nfunction changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(function (selector) {\n    var selectorBySpace = list.space(selector);\n    var selectorByComma = list.comma(selector);\n\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('');\n    }\n\n    return selector;\n  });\n  return ruleSelectors.map(function (ruleSelector) {\n    var newSelector = templateSelectors.map(function (tplSelector, index) {\n      var space = index === 0 ? '' : ' ';\n      return \"\" + space + tplSelector + \" > \" + ruleSelector;\n    });\n    return newSelector;\n  });\n}\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\n\n\nfunction selectorsEqual(ruleA, ruleB) {\n  return ruleA.selectors.some(function (sel) {\n    return ruleB.selectors.some(function (s) {\n      return s === sel;\n    });\n  });\n}\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\n\n\nfunction parseGridTemplatesData(css) {\n  var parsed = []; // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n\n  css.walkDecls(/grid-template(-areas)?$/, function (d) {\n    var rule = d.parent;\n    var media = getParentMedia(rule);\n    var gap = getGridGap(d);\n    var inheritedGap = inheritGridGap(d, gap);\n\n    var _parseTemplate = parseTemplate({\n      decl: d,\n      gap: inheritedGap || gap\n    }),\n        areas = _parseTemplate.areas;\n\n    var areaNames = Object.keys(areas); // skip node if it doesn't have areas\n\n    if (areaNames.length === 0) {\n      return true;\n    } // check parsed array for item that include the same area names\n    // return index of that item\n\n\n    var index = parsed.reduce(function (acc, _ref8, idx) {\n      var allAreas = _ref8.allAreas;\n      var hasAreas = allAreas && areaNames.some(function (area) {\n        return allAreas.includes(area);\n      });\n      return hasAreas ? idx : acc;\n    }, null);\n\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      var _parsed$index = parsed[index],\n          allAreas = _parsed$index.allAreas,\n          rules = _parsed$index.rules; // check if rule has no duplicate area names\n\n      var hasNoDuplicates = rules.some(function (r) {\n        return r.hasDuplicates === false && selectorsEqual(r, rule);\n      });\n      var duplicatesFound = false; // check need to gather all duplicate area names\n\n      var duplicateAreaNames = rules.reduce(function (acc, r) {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true;\n          return r.duplicateAreaNames;\n        }\n\n        if (!duplicatesFound) {\n          areaNames.forEach(function (name) {\n            if (r.areas[name]) {\n              acc.push(name);\n            }\n          });\n        }\n\n        return uniq(acc);\n      }, []); // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n\n      rules.forEach(function (r) {\n        areaNames.forEach(function (name) {\n          var area = r.areas[name];\n\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true;\n          }\n\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true;\n          }\n        });\n      });\n      parsed[index].allAreas = uniq(allAreas.concat(areaNames));\n      parsed[index].rules.push({\n        hasDuplicates: !hasNoDuplicates,\n        params: media.params,\n        selectors: rule.selectors,\n        node: rule,\n        duplicateAreaNames: duplicateAreaNames,\n        areas: areas\n      });\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [{\n          hasDuplicates: false,\n          duplicateRules: [],\n          params: media.params,\n          selectors: rule.selectors,\n          node: rule,\n          duplicateAreaNames: [],\n          areas: areas\n        }]\n      });\n    }\n\n    return undefined;\n  });\n  return parsed;\n}\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\n\n\nfunction insertAreas(css, isDisabled) {\n  // parse grid-template declarations\n  var gridTemplatesData = parseGridTemplatesData(css); // return undefined if no declarations found\n\n  if (gridTemplatesData.length === 0) {\n    return undefined;\n  } // we need to store the rules that we will insert later\n\n\n  var rulesToInsert = {};\n  css.walkDecls('grid-area', function (gridArea) {\n    var gridAreaRule = gridArea.parent;\n    var hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row';\n    var gridAreaMedia = getParentMedia(gridAreaRule);\n\n    if (isDisabled(gridArea)) {\n      return undefined;\n    }\n\n    var gridAreaRuleIndex = gridAreaMedia ? css.index(gridAreaMedia) : css.index(gridAreaRule);\n    var value = gridArea.value; // found the data that matches grid-area identifier\n\n    var data = gridTemplatesData.filter(function (d) {\n      return d.allAreas.includes(value);\n    })[0];\n\n    if (!data) {\n      return true;\n    }\n\n    var lastArea = data.allAreas[data.allAreas.length - 1];\n    var selectorBySpace = list.space(gridAreaRule.selector);\n    var selectorByComma = list.comma(gridAreaRule.selector);\n    var selectorIsComplex = selectorBySpace.length > 1 && selectorBySpace.length > selectorByComma.length; // prevent doubling of prefixes\n\n    if (hasPrefixedRow) {\n      return false;\n    } // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n\n\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {};\n    } // walk through every grid-template rule data\n\n\n    for (var _iterator2 = data.rules, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref9;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref9 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref9 = _i2.value;\n      }\n\n      var rule = _ref9;\n      var area = rule.areas[value];\n      var hasDuplicateName = rule.duplicateAreaNames.includes(value); // if we can't find the area name, update lastRule and continue\n\n      if (!area) {\n        var lastRuleIndex = css.index(rulesToInsert[lastArea].lastRule);\n\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n        }\n\n        continue;\n      } // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n\n\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = [];\n      }\n\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n        getMSDecls(area, false, false).reverse().forEach(function (i) {\n          return gridAreaRule.prepend(Object.assign(i, {\n            raws: {\n              between: gridArea.raws.between\n            }\n          }));\n        });\n        rulesToInsert[lastArea].lastRule = gridAreaRule;\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        (function () {\n          // grid-template has duplicates and not inside media rule\n          var cloned = gridAreaRule.clone();\n          cloned.removeAll();\n          getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(function (i) {\n            return cloned.prepend(Object.assign(i, {\n              raws: {\n                between: gridArea.raws.between\n              }\n            }));\n          });\n          cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n\n          if (rulesToInsert[lastArea].lastRule) {\n            rulesToInsert[lastArea].lastRule.after(cloned);\n          }\n\n          rulesToInsert[lastArea].lastRule = cloned;\n        })();\n      } else if (rule.hasDuplicates && !rule.params && selectorIsComplex && gridAreaRule.selector.includes(rule.selectors[0])) {\n        // grid-template has duplicates and not inside media rule\n        // see the bottom of grid-template-areas test case for example\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, function (d) {\n          return d.remove();\n        });\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(function (i) {\n          return gridAreaRule.prepend(Object.assign(i, {\n            raws: {\n              between: gridArea.raws.between\n            }\n          }));\n        });\n      } else if (rule.params) {\n        (function () {\n          // grid-template is inside media rule\n          // if we're inside media rule, we need to store prefixed rules\n          // inside rulesToInsert object to be able to preserve the order of media\n          // rules and merge them easily\n          var cloned = gridAreaRule.clone();\n          cloned.removeAll();\n          getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(function (i) {\n            return cloned.prepend(Object.assign(i, {\n              raws: {\n                between: gridArea.raws.between\n              }\n            }));\n          });\n\n          if (rule.hasDuplicates && hasDuplicateName) {\n            cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n          }\n\n          cloned.raws = rule.node.raws;\n\n          if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n            // append the prefixed rules right inside media rule\n            // with grid-template\n            rule.node.parent.append(cloned);\n          } else {\n            // store the rule to insert later\n            rulesToInsert[lastArea][rule.params].push(cloned);\n          }\n\n          if (gridAreaMedia) {\n            rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n          }\n        })();\n      }\n    }\n\n    return undefined;\n  }); // append stored rules inside the media rules\n\n  Object.keys(rulesToInsert).forEach(function (area) {\n    var data = rulesToInsert[area];\n    var lastRule = data.lastRule;\n    Object.keys(data).reverse().filter(function (p) {\n      return p !== 'lastRule';\n    }).forEach(function (params) {\n      if (data[params].length > 0 && lastRule) {\n        lastRule.after({\n          name: 'media',\n          params: params\n        });\n        lastRule.next().append(data[params]);\n      }\n    });\n  });\n  return undefined;\n}\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnMissedAreas(areas, decl, result) {\n  var missed = Object.keys(areas);\n  decl.root().walkDecls('grid-area', function (gridArea) {\n    missed = missed.filter(function (e) {\n      return e !== gridArea.value;\n    });\n  });\n\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '));\n  }\n\n  return undefined;\n}\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnTemplateSelectorNotFound(decl, result) {\n  var rule = decl.parent;\n  var root = decl.root();\n  var duplicatesFound = false; // slice selector array. Remove the last part (for comparison)\n\n  var slicedSelectorArr = list.space(rule.selector).filter(function (str) {\n    return str !== '>';\n  }).slice(0, -1); // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n\n  if (slicedSelectorArr.length > 0) {\n    var gridTemplateFound = false;\n    var foundAreaSelector = null;\n    root.walkDecls(/grid-template(-areas)?$/, function (d) {\n      var parent = d.parent;\n      var templateSelectors = parent.selectors;\n\n      var _parseTemplate2 = parseTemplate({\n        decl: d,\n        gap: getGridGap(d)\n      }),\n          areas = _parseTemplate2.areas;\n\n      var hasArea = areas[decl.value]; // find the the matching selectors\n\n      for (var _iterator3 = templateSelectors, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref10;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref10 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref10 = _i3.value;\n        }\n\n        var tplSelector = _ref10;\n\n        if (gridTemplateFound) {\n          break;\n        }\n\n        var tplSelectorArr = list.space(tplSelector).filter(function (str) {\n          return str !== '>';\n        });\n        gridTemplateFound = tplSelectorArr.every(function (item, idx) {\n          return item === slicedSelectorArr[idx];\n        });\n      }\n\n      if (gridTemplateFound || !hasArea) {\n        return true;\n      }\n\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector;\n      } // if we found the duplicate area with different selector\n\n\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true;\n      }\n\n      return undefined;\n    }); // warn user if we didn't find template\n\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(result, \"Autoprefixer cannot find a grid-template \" + (\"containing the duplicate grid-area \\\"\" + decl.value + \"\\\" \") + (\"with full selector matching: \" + slicedSelectorArr.join(' ')));\n    }\n  }\n}\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nfunction warnIfGridRowColumnExists(decl, result) {\n  var rule = decl.parent;\n  var decls = [];\n  rule.walkDecls(/^grid-(row|column)/, function (d) {\n    decls.push(d);\n  });\n\n  if (decls.length > 0) {\n    decls.forEach(function (d) {\n      d.warn(result, \"You already have a grid-area declaration present in the rule. \" + (\"You should use either grid-area or \" + d.prop + \", not both\"));\n    });\n  }\n\n  return undefined;\n} // Gap utils\n\n\nfunction getGridGap(decl) {\n  var gap = {}; // try to find gap\n\n  var testGap = /^(grid-)?((row|column)-)?gap$/;\n  decl.parent.walkDecls(testGap, function (_ref11) {\n    var prop = _ref11.prop,\n        value = _ref11.value;\n\n    if (/^(grid-)?gap$/.test(prop)) {\n      var _parser$nodes = parser(value).nodes,\n          _parser$nodes$ = _parser$nodes[0],\n          row = _parser$nodes$ === void 0 ? {} : _parser$nodes$,\n          _parser$nodes$2 = _parser$nodes[2],\n          column = _parser$nodes$2 === void 0 ? {} : _parser$nodes$2;\n      gap.row = row.value;\n      gap.column = column.value || row.value;\n    }\n\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value;\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value;\n  });\n  return gap;\n}\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\n\n\nfunction parseMediaParams(params) {\n  if (!params) {\n    return false;\n  }\n\n  var parsed = parser(params);\n  var prop;\n  var value;\n  parsed.walk(function (node) {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value;\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''));\n    }\n  });\n  return [prop, value];\n}\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\n\n\nfunction shouldInheritGap(selA, selB) {\n  var result; // get arrays of selector split in 3-deep array\n\n  var splitSelectorArrA = splitSelector(selA);\n  var splitSelectorArrB = splitSelector(selB);\n\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false;\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n    var idx = splitSelectorArrA[0].reduce(function (res, _ref12, index) {\n      var item = _ref12[0];\n      var firstSelectorPart = splitSelectorArrB[0][0][0];\n\n      if (item === firstSelectorPart) {\n        return index;\n      }\n\n      return false;\n    }, false);\n\n    if (idx) {\n      result = splitSelectorArrB[0].every(function (arr, index) {\n        return arr.every(function (part, innerIndex) {\n          return (// because selectorA has more space elements, we need to slice\n            // selectorA array by 'idx' number to compare them\n            splitSelectorArrA[0].slice(idx)[index][innerIndex] === part\n          );\n        });\n      });\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(function (byCommaArr) {\n      return byCommaArr.every(function (bySpaceArr, index) {\n        return bySpaceArr.every(function (part, innerIndex) {\n          return splitSelectorArrA[0][index][innerIndex] === part;\n        });\n      });\n    });\n  }\n\n  return result;\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\n\n\nfunction inheritGridGap(decl, gap) {\n  var rule = decl.parent;\n  var mediaRule = getParentMedia(rule);\n  var root = rule.root(); // get an array of selector split in 3-deep array\n\n  var splitSelectorArr = splitSelector(rule.selector); // abort if the rule already has gaps\n\n  if (Object.keys(gap).length > 0) {\n    return false;\n  } // e.g ['min-width']\n\n\n  var _parseMediaParams = parseMediaParams(mediaRule.params),\n      prop = _parseMediaParams[0];\n\n  var lastBySpace = splitSelectorArr[0]; // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n\n  var escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);\n  var regexp = new RegExp(\"(\" + escaped + \"$)|(\" + escaped + \"[,.])\"); // find the closest rule with the same selector\n\n  var closestRuleGap;\n  root.walkRules(regexp, function (r) {\n    var gridGap; // abort if are checking the same rule\n\n    if (rule.toString() === r.toString()) {\n      return false;\n    } // find grid-gap values\n\n\n    r.walkDecls('grid-gap', function (d) {\n      return gridGap = getGridGap(d);\n    }); // skip rule without gaps\n\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true;\n    } // skip rules that should not be inherited from\n\n\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true;\n    }\n\n    var media = getParentMedia(r);\n\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      var propToCompare = parseMediaParams(media.params)[0];\n\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap;\n        return true;\n      }\n    } else {\n      closestRuleGap = gridGap;\n      return true;\n    }\n\n    return undefined;\n  }); // if we find the closest gap object\n\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap;\n  }\n\n  return false;\n}\n\nfunction warnGridGap(_ref13) {\n  var gap = _ref13.gap,\n      hasColumns = _ref13.hasColumns,\n      decl = _ref13.decl,\n      result = _ref13.result;\n  var hasBothGaps = gap.row && gap.column;\n\n  if (!hasColumns && (hasBothGaps || gap.column && !gap.row)) {\n    delete gap.column;\n    decl.warn(result, 'Can not impliment grid-gap without grid-tamplate-columns');\n  }\n}\n\nmodule.exports = {\n  parse: parse,\n  translate: translate,\n  parseTemplate: parseTemplate,\n  parseGridAreas: parseGridAreas,\n  warnMissedAreas: warnMissedAreas,\n  insertAreas: insertAreas,\n  insertDecl: insertDecl,\n  prefixTrackProp: prefixTrackProp,\n  prefixTrackValue: prefixTrackValue,\n  getGridGap: getGridGap,\n  warnGridGap: warnGridGap,\n  warnTemplateSelectorNotFound: warnTemplateSelectorNotFound,\n  warnIfGridRowColumnExists: warnIfGridRowColumnExists,\n  inheritGridGap: inheritGridGap\n};"},"sourceMaps":null,"error":null,"hash":"16438589a0b68f52451799d455b6b41d","cacheData":{"env":{}}}