{"ast":null,"code":"import _objectSpread from \"/home/jarri/Desktop/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/jarri/Desktop/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jarri/Desktop/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this;\n\nvar wooConfig = require(\"./wooConfig\");\n\nvar WooCommerceAPI = require(\"woocommerce-api\");\n\nvar WooCommerce = new WooCommerceAPI({\n  url: wooConfig.siteUrl,\n  consumerKey: wooConfig.consumerKey,\n  consumerSecret: wooConfig.consumerSecret,\n  wpAPI: true,\n  version: \"wc/v3\"\n});\n\nvar fillOrder = function fillOrder(user) {\n  var name = user.name,\n      lastName = user.lastName,\n      email = user.email,\n      address = user.address,\n      address2 = user.address2,\n      city = user.city,\n      state = user.state,\n      cp = user.cp,\n      country = user.country,\n      phone = user.phone,\n      cart = user.cart,\n      total = user.total;\n  var myCart = JSON.stringify(cart);\n\n  if (name && lastName && email && address && city && state && cp && country && phone && myCart && total) {\n    userOrder = {\n      payment_method: \"bacs\",\n      payment_method_title: \"Credit Card Payment\",\n      set_paid: \"true\",\n      billing: {\n        first_name: \"\".concat(name),\n        last_name: \"\".concat(lastName),\n        address_1: \"\".concat(address),\n        address_2: \"\".concat(address2),\n        city: \"\".concat(city),\n        state: \" \".concat(state),\n        postcode: \"\".concat(cp),\n        country: \"\".concat(country),\n        email: \"\".concat(email),\n        phone: \"\".concat(phone)\n      },\n      shipping: {\n        first_name: \"\".concat(name),\n        last_name: \"\".concat(lastName),\n        address_1: \"\".concat(address),\n        address_2: \"\".concat(address2),\n        city: \"\".concat(city),\n        state: \"\".concat(state),\n        postcode: \"\".concat(cp),\n        country: \"\".concat(country),\n        email: \"\".concat(email)\n      },\n      line_items: cart,\n      shipping_lines: [{\n        method_id: \"flat_rate\",\n        method_title: \"Flat Rate\",\n        total: \"\".concat(total)\n      }]\n    };\n    ready = true;\n  }\n};\n\nvar test = function test() {\n  return WooCommerce.getAsync(\"products/categories?hide_empty=false&per_page=100\").then(function (res) {\n    var data = res.toJSON().body;\n    Object.json1 = JSON.parse(data);\n    var items = Object.json1;\n    return items;\n  });\n};\n\ncreateOrder = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ready, userOrder) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _this.fillOrder();\n\n            if (!ready) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 4;\n            return WooCommerce.postAsync(\"orders\", userOrder).then(function (response) {}).catch(function (error) {});\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createOrder(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfillCustomer = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return WooCommerce.getAsync(\"customers?email=\".concat(email)).then(function (response) {\n              if (response) {\n                if (response.body) {\n                  var res = JSON.parse(response.body);\n                  var user = res[0];\n                  console.log(user);\n                  var theUser = {\n                    userId: user.id,\n                    company: user.billing.company,\n                    name: user.billing.first_name,\n                    lastName: user.billing.last_name,\n                    address: user.billing.address_1,\n                    address2: user.billing.address_2,\n                    city: user.billing.city,\n                    state: user.billing.state,\n                    cp: user.billing.postcode,\n                    country: user.billing.country,\n                    phone: user.billing.phone\n                  };\n                  return theUser;\n                }\n              }\n            }).catch(function (error) {\n              console.log(error);\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fillCustomer(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar receiveReceipt = function receiveReceipt(data) {\n  _this.setState(function () {\n    return _objectSpread({}, {\n      receipt: data\n    });\n  });\n\n  _this.createOrder();\n};\n\nvar receiveCart = function receiveCart(data) {\n  var receivedCart = [];\n  var total = null;\n\n  if (data.cart) {\n    if (!data.cart[0]) {\n      //If I empty the cart should clean the state\n      _this.setState(function () {\n        return _objectSpread({}, {\n          cart: null,\n          total: null\n        });\n      });\n    } else {\n      data.cart.map(function (i) {\n        var totalItem = i.price * i.count;\n        total = total + totalItem;\n        var receivedItem = {\n          product_id: i.id,\n          quantity: i.count\n        };\n        receivedCart.push(receivedItem);\n\n        _this.setState(function () {\n          return _objectSpread({}, {\n            cart: receivedCart,\n            total: total\n          });\n        });\n      });\n    }\n  }\n};\n\nexport default {\n  test: test\n};","map":{"version":3,"sources":["/home/jarri/Desktop/projects-web/eCommerce/template-store1/src/api/woo.js"],"names":["wooConfig","require","WooCommerceAPI","WooCommerce","url","siteUrl","consumerKey","consumerSecret","wpAPI","version","fillOrder","user","name","lastName","email","address","address2","city","state","cp","country","phone","cart","total","myCart","JSON","stringify","userOrder","payment_method","payment_method_title","set_paid","billing","first_name","last_name","address_1","address_2","postcode","shipping","line_items","shipping_lines","method_id","method_title","ready","test","getAsync","then","res","data","toJSON","body","Object","json1","parse","items","createOrder","postAsync","response","catch","error","fillCustomer","console","log","theUser","userId","id","company","receiveReceipt","setState","receipt","receiveCart","receivedCart","map","i","totalItem","price","count","receivedItem","product_id","quantity","push"],"mappings":"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","sourcesContent":["const wooConfig = require(\"./wooConfig\");\nconst WooCommerceAPI = require(\"woocommerce-api\");\n\nconst WooCommerce = new WooCommerceAPI({\n  url: wooConfig.siteUrl,\n  consumerKey: wooConfig.consumerKey,\n  consumerSecret: wooConfig.consumerSecret,\n  wpAPI: true,\n  version: \"wc/v3\",\n});\n\nconst fillOrder = (user) => {\n  const {\n    name,\n    lastName,\n    email,\n    address,\n    address2,\n    city,\n    state,\n    cp,\n    country,\n    phone,\n    cart,\n    total,\n  } = user;\n\n  const myCart = JSON.stringify(cart);\n\n  if (\n    name &&\n    lastName &&\n    email &&\n    address &&\n    city &&\n    state &&\n    cp &&\n    country &&\n    phone &&\n    myCart &&\n    total\n  ) {\n    userOrder = {\n      payment_method: \"bacs\",\n      payment_method_title: \"Credit Card Payment\",\n      set_paid: \"true\",\n      billing: {\n        first_name: `${name}`,\n        last_name: `${lastName}`,\n        address_1: `${address}`,\n        address_2: `${address2}`,\n        city: `${city}`,\n        state: ` ${state}`,\n        postcode: `${cp}`,\n        country: `${country}`,\n        email: `${email}`,\n        phone: `${phone}`,\n      },\n      shipping: {\n        first_name: `${name}`,\n        last_name: `${lastName}`,\n        address_1: `${address}`,\n        address_2: `${address2}`,\n        city: `${city}`,\n        state: `${state}`,\n        postcode: `${cp}`,\n        country: `${country}`,\n        email: `${email}`,\n      },\n      line_items: cart,\n      shipping_lines: [\n        {\n          method_id: \"flat_rate\",\n          method_title: \"Flat Rate\",\n          total: `${total}`,\n        },\n      ],\n    };\n    ready = true;\n  }\n};\n\nconst test = () => {\n  return WooCommerce.getAsync(\n    `products/categories?hide_empty=false&per_page=100`\n  ).then((res) => {\n    var data = res.toJSON().body;\n    Object.json1 = JSON.parse(data);\n    var items = Object.json1;\n    return items;\n  });\n};\n\ncreateOrder = async (ready, userOrder) => {\n  this.fillOrder();\n  if (ready) {\n    await WooCommerce.postAsync(\"orders\", userOrder)\n      .then((response) => {})\n      .catch((error) => {});\n  }\n};\n\nfillCustomer = async (email) => {\n  await WooCommerce.getAsync(`customers?email=${email}`)\n    .then((response) => {\n      if (response) {\n        if (response.body) {\n          const res = JSON.parse(response.body);\n          const user = res[0];\n          console.log(user);\n          const theUser = {\n            userId: user.id,\n            company: user.billing.company,\n            name: user.billing.first_name,\n            lastName: user.billing.last_name,\n            address: user.billing.address_1,\n            address2: user.billing.address_2,\n            city: user.billing.city,\n            state: user.billing.state,\n            cp: user.billing.postcode,\n            country: user.billing.country,\n            phone: user.billing.phone,\n          };\n          return theUser;\n        }\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nconst receiveReceipt = (data) => {\n  this.setState(() => {\n    return {\n      ...{\n        receipt: data,\n      },\n    };\n  });\n  this.createOrder();\n};\n\nconst receiveCart = (data) => {\n  var receivedCart = [];\n  var total = null;\n  if (data.cart) {\n    if (!data.cart[0]) {\n      //If I empty the cart should clean the state\n      this.setState(() => {\n        return {\n          ...{\n            cart: null,\n            total: null,\n          },\n        };\n      });\n    } else {\n      data.cart.map((i) => {\n        var totalItem = i.price * i.count;\n        total = total + totalItem;\n        var receivedItem = {\n          product_id: i.id,\n          quantity: i.count,\n        };\n        receivedCart.push(receivedItem);\n        this.setState(() => {\n          return {\n            ...{\n              cart: receivedCart,\n              total: total,\n            },\n          };\n        });\n      });\n    }\n  }\n};\n\nexport default {\n  test,\n};\n"]},"metadata":{},"sourceType":"module"}