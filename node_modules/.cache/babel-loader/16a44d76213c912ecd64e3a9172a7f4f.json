{"ast":null,"code":"'use strict';\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\n\nvar _classCallCheck = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar StripeError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(StripeError, _Error);\n\n  function StripeError() {\n    var _this;\n\n    var raw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, StripeError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StripeError).call(this, raw.message));\n    _this.type = _this.constructor.name;\n    _this.raw = raw;\n    _this.rawType = raw.type;\n    _this.code = raw.code;\n    _this.doc_url = raw.doc_url;\n    _this.param = raw.param;\n    _this.detail = raw.detail;\n    _this.headers = raw.headers;\n    _this.requestId = raw.requestId;\n    _this.statusCode = raw.statusCode;\n    _this.message = raw.message;\n    _this.charge = raw.charge;\n    _this.decline_code = raw.decline_code;\n    _this.payment_intent = raw.payment_intent;\n    _this.payment_method = raw.payment_method;\n    _this.setup_intent = raw.setup_intent;\n    _this.source = raw.source;\n    return _this;\n  }\n  /**\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\n   */\n\n\n  _createClass(StripeError, null, [{\n    key: \"generate\",\n    value: function generate(rawStripeError) {\n      switch (rawStripeError.type) {\n        case 'card_error':\n          return new StripeCardError(rawStripeError);\n\n        case 'invalid_request_error':\n          return new StripeInvalidRequestError(rawStripeError);\n\n        case 'api_error':\n          return new StripeAPIError(rawStripeError);\n\n        case 'authentication_error':\n          return new StripeAuthenticationError(rawStripeError);\n\n        case 'rate_limit_error':\n          return new StripeRateLimitError(rawStripeError);\n\n        case 'idempotency_error':\n          return new StripeIdempotencyError(rawStripeError);\n\n        case 'invalid_grant':\n          return new StripeInvalidGrantError(rawStripeError);\n\n        default:\n          return new GenericError('Generic', 'Unknown Error');\n      }\n    }\n  }]);\n\n  return StripeError;\n}(_wrapNativeSuper(Error)); // Specific Stripe Error types:\n\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\n\n\nvar StripeCardError =\n/*#__PURE__*/\nfunction (_StripeError) {\n  _inherits(StripeCardError, _StripeError);\n\n  function StripeCardError() {\n    _classCallCheck(this, StripeCardError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeCardError).apply(this, arguments));\n  }\n\n  return StripeCardError;\n}(StripeError);\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\n\n\nvar StripeInvalidRequestError =\n/*#__PURE__*/\nfunction (_StripeError2) {\n  _inherits(StripeInvalidRequestError, _StripeError2);\n\n  function StripeInvalidRequestError() {\n    _classCallCheck(this, StripeInvalidRequestError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeInvalidRequestError).apply(this, arguments));\n  }\n\n  return StripeInvalidRequestError;\n}(StripeError);\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\n\n\nvar StripeAPIError =\n/*#__PURE__*/\nfunction (_StripeError3) {\n  _inherits(StripeAPIError, _StripeError3);\n\n  function StripeAPIError() {\n    _classCallCheck(this, StripeAPIError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeAPIError).apply(this, arguments));\n  }\n\n  return StripeAPIError;\n}(StripeError);\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\n\n\nvar StripeAuthenticationError =\n/*#__PURE__*/\nfunction (_StripeError4) {\n  _inherits(StripeAuthenticationError, _StripeError4);\n\n  function StripeAuthenticationError() {\n    _classCallCheck(this, StripeAuthenticationError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeAuthenticationError).apply(this, arguments));\n  }\n\n  return StripeAuthenticationError;\n}(StripeError);\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\n\n\nvar StripePermissionError =\n/*#__PURE__*/\nfunction (_StripeError5) {\n  _inherits(StripePermissionError, _StripeError5);\n\n  function StripePermissionError() {\n    _classCallCheck(this, StripePermissionError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripePermissionError).apply(this, arguments));\n  }\n\n  return StripePermissionError;\n}(StripeError);\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\n\n\nvar StripeRateLimitError =\n/*#__PURE__*/\nfunction (_StripeError6) {\n  _inherits(StripeRateLimitError, _StripeError6);\n\n  function StripeRateLimitError() {\n    _classCallCheck(this, StripeRateLimitError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeRateLimitError).apply(this, arguments));\n  }\n\n  return StripeRateLimitError;\n}(StripeError);\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\n\n\nvar StripeConnectionError =\n/*#__PURE__*/\nfunction (_StripeError7) {\n  _inherits(StripeConnectionError, _StripeError7);\n\n  function StripeConnectionError() {\n    _classCallCheck(this, StripeConnectionError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeConnectionError).apply(this, arguments));\n  }\n\n  return StripeConnectionError;\n}(StripeError);\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\n\n\nvar StripeSignatureVerificationError =\n/*#__PURE__*/\nfunction (_StripeError8) {\n  _inherits(StripeSignatureVerificationError, _StripeError8);\n\n  function StripeSignatureVerificationError() {\n    _classCallCheck(this, StripeSignatureVerificationError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeSignatureVerificationError).apply(this, arguments));\n  }\n\n  return StripeSignatureVerificationError;\n}(StripeError);\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\n\n\nvar StripeIdempotencyError =\n/*#__PURE__*/\nfunction (_StripeError9) {\n  _inherits(StripeIdempotencyError, _StripeError9);\n\n  function StripeIdempotencyError() {\n    _classCallCheck(this, StripeIdempotencyError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeIdempotencyError).apply(this, arguments));\n  }\n\n  return StripeIdempotencyError;\n}(StripeError);\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\n\n\nvar StripeInvalidGrantError =\n/*#__PURE__*/\nfunction (_StripeError10) {\n  _inherits(StripeInvalidGrantError, _StripeError10);\n\n  function StripeInvalidGrantError() {\n    _classCallCheck(this, StripeInvalidGrantError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StripeInvalidGrantError).apply(this, arguments));\n  }\n\n  return StripeInvalidGrantError;\n}(StripeError);\n\nmodule.exports.generate = StripeError.generate;\nmodule.exports.StripeError = StripeError;\nmodule.exports.StripeCardError = StripeCardError;\nmodule.exports.StripeInvalidRequestError = StripeInvalidRequestError;\nmodule.exports.StripeAPIError = StripeAPIError;\nmodule.exports.StripeAuthenticationError = StripeAuthenticationError;\nmodule.exports.StripePermissionError = StripePermissionError;\nmodule.exports.StripeRateLimitError = StripeRateLimitError;\nmodule.exports.StripeConnectionError = StripeConnectionError;\nmodule.exports.StripeSignatureVerificationError = StripeSignatureVerificationError;\nmodule.exports.StripeIdempotencyError = StripeIdempotencyError;\nmodule.exports.StripeInvalidGrantError = StripeInvalidGrantError;","map":null,"metadata":{},"sourceType":"script"}