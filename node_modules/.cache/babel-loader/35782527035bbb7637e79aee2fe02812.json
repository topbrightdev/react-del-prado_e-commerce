{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar makeRequest = require('./makeRequest');\n\nvar makeAutoPaginationMethods = require('./autoPagination').makeAutoPaginationMethods;\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n * @param [spec.host] Hostname for the request.\n */\n\n\nfunction stripeMethod(spec) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var callback = typeof args[args.length - 1] == 'function' && args.pop();\n    spec.urlParams = utils.extractUrlParams(this.createResourcePathWithSymbols(spec.path || ''));\n    var requestPromise = utils.callbackifyPromiseWithTimeout(makeRequest(this, args, spec, {}), callback);\n\n    if (spec.methodType === 'list') {\n      var autoPaginationMethods = makeAutoPaginationMethods(this, args, spec, requestPromise);\n      Object.assign(requestPromise, autoPaginationMethods);\n    }\n\n    return requestPromise;\n  };\n}\n\nmodule.exports = stripeMethod;","map":null,"metadata":{},"sourceType":"script"}