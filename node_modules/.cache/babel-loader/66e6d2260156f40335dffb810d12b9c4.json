{"ast":null,"code":"'use strict';\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar path = require('path');\n\nvar utils = require('./utils');\n\nvar _require = require('./Error'),\n    StripeConnectionError = _require.StripeConnectionError,\n    StripeAuthenticationError = _require.StripeAuthenticationError,\n    StripePermissionError = _require.StripePermissionError,\n    StripeRateLimitError = _require.StripeRateLimitError,\n    StripeError = _require.StripeError,\n    StripeAPIError = _require.StripeAPIError;\n\nvar defaultHttpAgent = new http.Agent({\n  keepAlive: true\n});\nvar defaultHttpsAgent = new https.Agent({\n  keepAlive: true\n}); // Provide extension mechanism for Stripe Resource Sub-Classes\n\nStripeResource.extend = utils.protoExtend; // Expose method-creator & prepared (basic) methods\n\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nvar MAX_RETRY_AFTER_WAIT = 60;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\n\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n\n  if (deprecatedUrlData) {\n    throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n  }\n\n  this.basePath = utils.makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function (methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize.apply(this, arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n  initialize: function initialize() {},\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n  createFullPath: function createFullPath(commandPath, urlData) {\n    return path.join(this.basePath(urlData), this.path(urlData), typeof commandPath == 'function' ? commandPath(urlData) : commandPath).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols: function createResourcePathWithSymbols(pathWithSymbols) {\n    return \"/\".concat(path.join(this.resourcePath, pathWithSymbols || '').replace(/\\\\/g, '/')); // ugly workaround for Windows\n  },\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n  _timeoutHandler: function _timeoutHandler(timeout, req, callback) {\n    var _this = this;\n\n    return function () {\n      var timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n      req._isAborted = true;\n      req.abort();\n      callback.call(_this, new StripeConnectionError({\n        message: \"Request aborted due to timeout being reached (\".concat(timeout, \"ms)\"),\n        detail: timeoutErr\n      }), null);\n    };\n  },\n  _responseHandler: function _responseHandler(req, callback) {\n    var _this2 = this;\n\n    return function (res) {\n      var response = '';\n      res.setEncoding('utf8');\n      res.on('data', function (chunk) {\n        response += chunk;\n      });\n      res.once('end', function () {\n        var headers = res.headers || {}; // NOTE: Stripe responds with lowercase header names/keys.\n        // For convenience, make Request-Id easily accessible on\n        // lastResponse.\n\n        res.requestId = headers['request-id'];\n        var requestEndTime = Date.now();\n        var requestDurationMs = requestEndTime - req._requestStart;\n        var responseEvent = utils.removeNullish({\n          api_version: headers['stripe-version'],\n          account: headers['stripe-account'],\n          idempotency_key: headers['idempotency-key'],\n          method: req._requestEvent.method,\n          path: req._requestEvent.path,\n          status: res.statusCode,\n          request_id: res.requestId,\n          elapsed: requestDurationMs,\n          request_start_time: req._requestStart,\n          request_end_time: requestEndTime\n        });\n\n        _this2._stripe._emitter.emit('response', responseEvent);\n\n        try {\n          response = JSON.parse(response);\n\n          if (response.error) {\n            var err; // Convert OAuth error responses into a standard format\n            // so that the rest of the error logic can be shared\n\n            if (typeof response.error === 'string') {\n              response.error = {\n                type: response.error,\n                message: response.error_description\n              };\n            }\n\n            response.error.headers = headers;\n            response.error.statusCode = res.statusCode;\n            response.error.requestId = res.requestId;\n\n            if (res.statusCode === 401) {\n              err = new StripeAuthenticationError(response.error);\n            } else if (res.statusCode === 403) {\n              err = new StripePermissionError(response.error);\n            } else if (res.statusCode === 429) {\n              err = new StripeRateLimitError(response.error);\n            } else {\n              err = StripeError.generate(response.error);\n            }\n\n            return callback.call(_this2, err, null);\n          }\n        } catch (e) {\n          return callback.call(_this2, new StripeAPIError({\n            message: 'Invalid JSON received from the Stripe API',\n            response: response,\n            exception: e,\n            requestId: headers['request-id']\n          }), null);\n        }\n\n        _this2._recordRequestMetrics(res.requestId, requestDurationMs); // Expose res object\n\n\n        Object.defineProperty(response, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: res\n        });\n        callback.call(_this2, null, response);\n      });\n    };\n  },\n  _generateConnectionErrorMessage: function _generateConnectionErrorMessage(requestRetries) {\n    return \"An error occurred with our connection to Stripe.\".concat(requestRetries > 0 ? \" Request was retried \".concat(requestRetries, \" times.\") : '');\n  },\n  _errorHandler: function _errorHandler(req, requestRetries, callback) {\n    var _this3 = this;\n\n    return function (error) {\n      if (req._isAborted) {\n        // already handled\n        return;\n      }\n\n      callback.call(_this3, new StripeConnectionError({\n        message: _this3._generateConnectionErrorMessage(requestRetries),\n        detail: error\n      }), null);\n    };\n  },\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry: function _shouldRetry(res, numRetries, maxRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    } // Retry on connection error.\n\n\n    if (!res) {\n      return true;\n    } // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n\n\n    if (res.headers && res.headers['stripe-should-retry'] === 'false') {\n      return false;\n    }\n\n    if (res.headers && res.headers['stripe-should-retry'] === 'true') {\n      return true;\n    } // Retry on conflict errors.\n\n\n    if (res.statusCode === 409) {\n      return true;\n    } // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n\n\n    if (res.statusCode >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n  _getSleepTimeInMS: function _getSleepTimeInMS(numRetries) {\n    var retryAfter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    var initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n\n    var maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay(); // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n\n\n    var sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay); // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n\n    sleepSeconds *= 0.5 * (1 + Math.random()); // But never sleep less than the base sleep seconds.\n\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds); // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries: function _getMaxNetworkRetries() {\n    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return settings.maxNetworkRetries && Number.isInteger(settings.maxNetworkRetries) ? settings.maxNetworkRetries : this._stripe.getMaxNetworkRetries();\n  },\n  _defaultIdempotencyKey: function _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    var maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return \"stripe-node-retry-\".concat(utils.uuid4());\n    }\n\n    return null;\n  },\n  _makeHeaders: function _makeHeaders(auth, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings) {\n    var defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? \"Bearer \".concat(auth) : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings)\n    };\n    return Object.assign(utils.removeNullish(defaultHeaders), // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n    utils.normalizeHeaders(userSuppliedHeaders));\n  },\n  _getUserAgentString: function _getUserAgentString() {\n    var packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n\n    var appInfo = this._stripe._appInfo ? this._stripe.getAppInfoAsString() : '';\n    return \"Stripe/v1 NodeBindings/\".concat(packageVersion, \" \").concat(appInfo).trim();\n  },\n  _getTelemetryHeader: function _getTelemetryHeader() {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      var metrics = this._stripe._prevRequestMetrics.shift();\n\n      return JSON.stringify({\n        last_request_metrics: metrics\n      });\n    }\n  },\n  _recordRequestMetrics: function _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > StripeResource.MAX_BUFFERED_REQUEST_METRICS) {\n        utils.emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs\n        });\n      }\n    }\n  },\n  _request: function _request(method, host, path, data, auth) {\n    var _this4 = this;\n\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var callback = arguments.length > 6 ? arguments[6] : undefined;\n    var requestData;\n\n    var retryRequest = function retryRequest(requestFn, apiVersion, headers, requestRetries, retryAfter) {\n      return setTimeout(requestFn, _this4._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n    };\n\n    var makeRequest = function makeRequest(apiVersion, headers, numRetries) {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      var timeout = options.settings && Number.isInteger(options.settings.timeout) && options.settings.timeout >= 0 ? options.settings.timeout : _this4._stripe.getApiField('timeout');\n      var isInsecureConnection = _this4._stripe.getApiField('protocol') == 'http';\n\n      var agent = _this4._stripe.getApiField('agent');\n\n      if (agent == null) {\n        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n      }\n\n      var req = (isInsecureConnection ? http : https).request({\n        host: host || _this4._stripe.getApiField('host'),\n        port: _this4._stripe.getApiField('port'),\n        path: path,\n        method: method,\n        agent: agent,\n        headers: headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5'\n      });\n      var requestStartTime = Date.now();\n      var requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method: method,\n        path: path,\n        request_start_time: requestStartTime\n      });\n      var requestRetries = numRetries || 0;\n\n      var maxRetries = _this4._getMaxNetworkRetries(options.settings);\n\n      req._requestEvent = requestEvent;\n      req._requestStart = requestStartTime;\n\n      _this4._stripe._emitter.emit('request', requestEvent);\n\n      req.setTimeout(timeout, _this4._timeoutHandler(timeout, req, callback));\n      req.once('response', function (res) {\n        if (_this4._shouldRetry(res, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, ((res || {}).headers || {})['retry-after']);\n        } else {\n          return _this4._responseHandler(req, callback)(res);\n        }\n      });\n      req.on('error', function (error) {\n        if (_this4._shouldRetry(null, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n        } else {\n          return _this4._errorHandler(req, requestRetries, callback)(error);\n        }\n      });\n      req.once('socket', function (socket) {\n        if (socket.connecting) {\n          socket.once(isInsecureConnection ? 'connect' : 'secureConnect', function () {\n            // Send payload; we're safe:\n            req.write(requestData);\n            req.end();\n          });\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    };\n\n    var prepareAndMakeRequest = function prepareAndMakeRequest(error, data) {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      _this4._stripe.getClientUserAgent(function (clientUserAgent) {\n        var apiVersion = _this4._stripe.getApiField('version');\n\n        var headers = _this4._makeHeaders(auth, requestData.length, apiVersion, clientUserAgent, method, options.headers, options.settings);\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  }\n};\nmodule.exports = StripeResource;","map":null,"metadata":{},"sourceType":"script"}