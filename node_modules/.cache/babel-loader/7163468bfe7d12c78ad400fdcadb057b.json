{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  var commandPath = utils.makeURLInterpolator(spec.path || '');\n  var requestMethod = (spec.method || 'GET').toUpperCase();\n  var urlParams = spec.urlParams || [];\n\n  var encode = spec.encode || function (data) {\n    return data;\n  };\n\n  var host = spec.host;\n  var path = self.createResourcePathWithSymbols(spec.path); // Don't mutate args externally.\n\n  var args = [].slice.call(requestArgs); // Generate and validate url params.\n\n  var urlData = urlParams.reduce(function (urlData, param) {\n    var arg = args.shift();\n\n    if (typeof arg !== 'string') {\n      throw new Error(\"Stripe: Argument \\\"\".concat(param, \"\\\" must be a string, but got: \").concat(arg, \" (on API request to `\").concat(requestMethod, \" \").concat(path, \"`)\"));\n    }\n\n    urlData[param] = arg;\n    return urlData;\n  }, {}); // Pull request data and options (headers, auth) from args.\n\n  var dataFromArgs = utils.getDataFromArgs(args);\n  var data = encode(Object.assign({}, dataFromArgs, overrideData));\n  var options = utils.getOptionsFromArgs(args); // Validate that there are no more args.\n\n  if (args.filter(function (x) {\n    return x != null;\n  }).length) {\n    throw new Error(\"Stripe: Unknown arguments (\".concat(args, \"). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to \").concat(requestMethod, \" `\").concat(path, \"`)\"));\n  }\n\n  var requestPath = self.createFullPath(commandPath, urlData);\n  var headers = Object.assign(options.headers, spec.headers);\n\n  if (spec.validator) {\n    spec.validator(data, {\n      headers: headers\n    });\n  }\n\n  var dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n  var bodyData = dataInQuery ? {} : data;\n  var queryData = dataInQuery ? data : {};\n  return {\n    requestMethod: requestMethod,\n    requestPath: requestPath,\n    bodyData: bodyData,\n    queryData: queryData,\n    auth: options.auth,\n    headers: headers,\n    host: host,\n    settings: options.settings\n  };\n}\n\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(spec.transformResponseData ? spec.transformResponseData(response) : response);\n      }\n    }\n\n    var emptyQuery = Object.keys(opts.queryData).length === 0;\n    var path = [opts.requestPath, emptyQuery ? '' : '?', utils.stringifyRequestData(opts.queryData)].join('');\n    var headers = opts.headers,\n        settings = opts.settings;\n\n    self._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.auth, {\n      headers: headers,\n      settings: settings\n    }, requestCallback);\n  });\n}\n\nmodule.exports = makeRequest;","map":null,"metadata":{},"sourceType":"script"}