{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\n\nvar utils = require('./utils');\n\nvar _require = require('./Error'),\n    StripeError = _require.StripeError,\n    StripeSignatureVerificationError = _require.StripeSignatureVerificationError;\n\nvar Webhook = {\n  DEFAULT_TOLERANCE: 300,\n  // 5 minutes\n  constructEvent: function constructEvent(payload, header, secret, tolerance) {\n    this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE);\n    var jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  },\n\n  /**\n   * Generates a header to be used for webhook mocking\n   *\n   * @typedef {object} opts\n   * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n   * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n   * @property {string} secret - Stripe webhook secret 'whsec_...'\n   * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n   * @property {string} signature - Computed webhook signature\n   */\n  generateTestHeaderString: function generateTestHeaderString(opts) {\n    if (!opts) {\n      throw new StripeError({\n        message: 'Options are required'\n      });\n    }\n\n    opts.timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n    opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\n    opts.signature = opts.signature || signature._computeSignature(opts.timestamp + '.' + opts.payload, opts.secret);\n    var generatedHeader = ['t=' + opts.timestamp, opts.scheme + '=' + opts.signature].join(',');\n    return generatedHeader;\n  }\n};\nvar signature = {\n  EXPECTED_SCHEME: 'v1',\n  _computeSignature: function _computeSignature(payload, secret) {\n    return crypto.createHmac('sha256', secret).update(payload, 'utf8').digest('hex');\n  },\n  verifyHeader: function verifyHeader(payload, header, secret, tolerance) {\n    payload = Buffer.isBuffer(payload) ? payload.toString('utf8') : payload; // Express's type for `Request#headers` is `string | []string`\n    // which is because the `set-cookie` header is an array,\n    // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n    // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n\n    if (Array.isArray(header)) {\n      throw new Error('Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.');\n    }\n\n    header = Buffer.isBuffer(header) ? header.toString('utf8') : header;\n    var details = parseHeader(header, this.EXPECTED_SCHEME);\n\n    if (!details || details.timestamp === -1) {\n      throw new StripeSignatureVerificationError({\n        message: 'Unable to extract timestamp and signatures from header',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    if (!details.signatures.length) {\n      throw new StripeSignatureVerificationError({\n        message: 'No signatures found with expected scheme',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    var expectedSignature = this._computeSignature(\"\".concat(details.timestamp, \".\").concat(payload), secret);\n\n    var signatureFound = !!details.signatures.filter(utils.secureCompare.bind(utils, expectedSignature)).length;\n\n    if (!signatureFound) {\n      throw new StripeSignatureVerificationError({\n        message: 'No signatures found matching the expected signature for payload.' + ' Are you passing the raw request body you received from Stripe?' + ' https://github.com/stripe/stripe-node#webhook-signing',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    var timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new StripeSignatureVerificationError({\n        message: 'Timestamp outside the tolerance zone',\n        detail: {\n          header: header,\n          payload: payload\n        }\n      });\n    }\n\n    return true;\n  }\n};\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce(function (accum, item) {\n    var kv = item.split('=');\n\n    if (kv[0] === 't') {\n      accum.timestamp = kv[1];\n    }\n\n    if (kv[0] === scheme) {\n      accum.signatures.push(kv[1]);\n    }\n\n    return accum;\n  }, {\n    timestamp: -1,\n    signatures: []\n  });\n}\n\nWebhook.signature = signature;\nmodule.exports = Webhook;","map":null,"metadata":{},"sourceType":"script"}