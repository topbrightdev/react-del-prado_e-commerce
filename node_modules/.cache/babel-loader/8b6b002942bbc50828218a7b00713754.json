{"ast":null,"code":"import _objectSpread from \"/home/jarri/Desktop/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _this = this;\n\nvar wooConfig = require(\"./wooConfig\");\n\nvar WooCommerceAPI = require(\"woocommerce-api\");\n\nvar WooCommerce = new WooCommerceAPI({\n  url: wooConfig.siteUrl,\n  consumerKey: wooConfig.consumerKey,\n  consumerSecret: wooConfig.consumerSecret,\n  wpAPI: true,\n  version: \"wc/v3\"\n});\n\nvar test = function test() {\n  return WooCommerce.getAsync(\"products/categories?hide_empty=false&per_page=100\").then(function (res) {\n    var data = res.toJSON().body;\n    Object.json1 = JSON.parse(data);\n    var items = Object.json1;\n    return items;\n  });\n};\n\nreceiveReceipt = function receiveReceipt(data) {\n  _this.setState(function () {\n    return _objectSpread({}, {\n      receipt: data\n    });\n  });\n\n  _this.createOrder();\n};\n\nreceiveCart = function receiveCart(data) {\n  var receivedCart = [];\n  var total = null;\n\n  if (data.cart) {\n    if (!data.cart[0]) {\n      //If I empty the cart should clean the state\n      _this.setState(function () {\n        return _objectSpread({}, {\n          cart: null,\n          total: null\n        });\n      });\n    } else {\n      data.cart.map(function (i) {\n        var totalItem = i.price * i.count;\n        total = total + totalItem;\n        var receivedItem = {\n          product_id: i.id,\n          quantity: i.count\n        };\n        receivedCart.push(receivedItem);\n\n        _this.setState(function () {\n          return _objectSpread({}, {\n            cart: receivedCart,\n            total: total\n          });\n        });\n      });\n    }\n  }\n};\n\nexport default {\n  test: test\n};","map":{"version":3,"sources":["/home/jarri/Desktop/projects-web/eCommerce/template-store1/src/api/woo.js"],"names":["wooConfig","require","WooCommerceAPI","WooCommerce","url","siteUrl","consumerKey","consumerSecret","wpAPI","version","test","getAsync","then","res","data","toJSON","body","Object","json1","JSON","parse","items","receiveReceipt","setState","receipt","createOrder","receiveCart","receivedCart","total","cart","map","i","totalItem","price","count","receivedItem","product_id","id","quantity","push"],"mappings":";;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA9B;;AAEA,IAAME,WAAW,GAAG,IAAID,cAAJ,CAAmB;AACrCE,EAAAA,GAAG,EAAEJ,SAAS,CAACK,OADsB;AAErCC,EAAAA,WAAW,EAAEN,SAAS,CAACM,WAFc;AAGrCC,EAAAA,cAAc,EAAEP,SAAS,CAACO,cAHW;AAIrCC,EAAAA,KAAK,EAAE,IAJ8B;AAKrCC,EAAAA,OAAO,EAAE;AAL4B,CAAnB,CAApB;;AAQA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,SAAOP,WAAW,CAACQ,QAAZ,sDAELC,IAFK,CAEA,UAACC,GAAD,EAAS;AACd,QAAIC,IAAI,GAAGD,GAAG,CAACE,MAAJ,GAAaC,IAAxB;AACAC,IAAAA,MAAM,CAACC,KAAP,GAAeC,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAf;AACA,QAAIO,KAAK,GAAGJ,MAAM,CAACC,KAAnB;AACA,WAAOG,KAAP;AACD,GAPM,CAAP;AAQD,CATD;;AAWAC,cAAc,GAAG,wBAACR,IAAD,EAAU;AACzB,EAAA,KAAI,CAACS,QAAL,CAAc,YAAM;AAClB,6BACK;AACDC,MAAAA,OAAO,EAAEV;AADR,KADL;AAKD,GAND;;AAOA,EAAA,KAAI,CAACW,WAAL;AACD,CATD;;AAWAC,WAAW,GAAG,qBAACZ,IAAD,EAAU;AACtB,MAAIa,YAAY,GAAG,EAAnB;AACA,MAAIC,KAAK,GAAG,IAAZ;;AACA,MAAId,IAAI,CAACe,IAAT,EAAe;AACb,QAAI,CAACf,IAAI,CAACe,IAAL,CAAU,CAAV,CAAL,EAAmB;AACjB;AACA,MAAA,KAAI,CAACN,QAAL,CAAc,YAAM;AAClB,iCACK;AACDM,UAAAA,IAAI,EAAE,IADL;AAEDD,UAAAA,KAAK,EAAE;AAFN,SADL;AAMD,OAPD;AAQD,KAVD,MAUO;AACLd,MAAAA,IAAI,CAACe,IAAL,CAAUC,GAAV,CAAc,UAACC,CAAD,EAAO;AACnB,YAAIC,SAAS,GAAGD,CAAC,CAACE,KAAF,GAAUF,CAAC,CAACG,KAA5B;AACAN,QAAAA,KAAK,GAAGA,KAAK,GAAGI,SAAhB;AACA,YAAIG,YAAY,GAAG;AACjBC,UAAAA,UAAU,EAAEL,CAAC,CAACM,EADG;AAEjBC,UAAAA,QAAQ,EAAEP,CAAC,CAACG;AAFK,SAAnB;AAIAP,QAAAA,YAAY,CAACY,IAAb,CAAkBJ,YAAlB;;AACA,QAAA,KAAI,CAACZ,QAAL,CAAc,YAAM;AAClB,mCACK;AACDM,YAAAA,IAAI,EAAEF,YADL;AAEDC,YAAAA,KAAK,EAAEA;AAFN,WADL;AAMD,SAPD;AAQD,OAhBD;AAiBD;AACF;AACF,CAlCD;;AAoCA,eAAe;AACblB,EAAAA,IAAI,EAAJA;AADa,CAAf","sourcesContent":["const wooConfig = require(\"./wooConfig\");\nconst WooCommerceAPI = require(\"woocommerce-api\");\n\nconst WooCommerce = new WooCommerceAPI({\n  url: wooConfig.siteUrl,\n  consumerKey: wooConfig.consumerKey,\n  consumerSecret: wooConfig.consumerSecret,\n  wpAPI: true,\n  version: \"wc/v3\",\n});\n\nconst test = () => {\n  return WooCommerce.getAsync(\n    `products/categories?hide_empty=false&per_page=100`\n  ).then((res) => {\n    var data = res.toJSON().body;\n    Object.json1 = JSON.parse(data);\n    var items = Object.json1;\n    return items;\n  });\n};\n\nreceiveReceipt = (data) => {\n  this.setState(() => {\n    return {\n      ...{\n        receipt: data,\n      },\n    };\n  });\n  this.createOrder();\n};\n\nreceiveCart = (data) => {\n  var receivedCart = [];\n  var total = null;\n  if (data.cart) {\n    if (!data.cart[0]) {\n      //If I empty the cart should clean the state\n      this.setState(() => {\n        return {\n          ...{\n            cart: null,\n            total: null,\n          },\n        };\n      });\n    } else {\n      data.cart.map((i) => {\n        var totalItem = i.price * i.count;\n        total = total + totalItem;\n        var receivedItem = {\n          product_id: i.id,\n          quantity: i.count,\n        };\n        receivedCart.push(receivedItem);\n        this.setState(() => {\n          return {\n            ...{\n              cart: receivedCart,\n              total: total,\n            },\n          };\n        });\n      });\n    }\n  }\n};\n\nexport default {\n  test,\n};\n"]},"metadata":{},"sourceType":"module"}