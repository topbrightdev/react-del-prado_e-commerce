{"ast":null,"code":"'use strict';\n\nvar resources = require('./resources');\n\nvar DEFAULT_HOST = 'api.stripe.com';\nvar DEFAULT_PORT = '443';\nvar DEFAULT_BASE_PATH = '/v1/';\nvar DEFAULT_API_VERSION = null;\nvar DEFAULT_TIMEOUT = 80000;\nStripe.PACKAGE_VERSION = require('../package.json').version;\nStripe.USER_AGENT = {\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  lang_version: process.version,\n  platform: process.platform,\n  publisher: 'stripe',\n  uname: null,\n  typescript: false\n};\nStripe.USER_AGENT_SERIALIZED = null;\nvar MAX_NETWORK_RETRY_DELAY_SEC = 2;\nvar INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nvar APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nvar ALLOWED_CONFIG_PROPERTIES = ['apiVersion', 'typescript', 'maxNetworkRetries', 'httpAgent', 'timeout', 'host', 'port', 'protocol', 'telemetry', 'appInfo'];\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar utils = require('./utils');\n\nvar emitWarning = utils.emitWarning;\nStripe.StripeResource = require('./StripeResource');\nStripe.resources = resources;\n\nfunction Stripe(key) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, config);\n  }\n\n  var props = this._getPropsFromConfig(config);\n\n  Object.defineProperty(this, '_emitter', {\n    value: new EventEmitter(),\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n  this.on = this._emitter.on.bind(this._emitter);\n  this.once = this._emitter.once.bind(this._emitter);\n  this.off = this._emitter.removeListener.bind(this._emitter);\n\n  if (props.protocol && props.protocol !== 'https' && (!props.host || /\\.stripe\\.com$/.test(props.host))) {\n    throw new Error('The `https` protocol must be used when sending requests to `*.stripe.com`');\n  }\n\n  this._api = {\n    auth: null,\n    host: props.host || DEFAULT_HOST,\n    port: props.port || DEFAULT_PORT,\n    protocol: props.protocol || 'https',\n    basePath: DEFAULT_BASE_PATH,\n    version: props.apiVersion || DEFAULT_API_VERSION,\n    timeout: utils.validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n    maxNetworkRetries: utils.validateInteger('maxNetworkRetries', props.maxNetworkRetries, 0),\n    agent: props.httpAgent || null,\n    dev: false\n  };\n  var typescript = props.typescript || false;\n\n  if (typescript !== Stripe.USER_AGENT.typescript) {\n    // The mutation here is uncomfortable, but likely fastest;\n    // serializing the user agent involves shelling out to the system,\n    // and given some users may instantiate the library many times without switching between TS and non-TS,\n    // we only want to incur the performance hit when that actually happens.\n    Stripe.USER_AGENT_SERIALIZED = null;\n    Stripe.USER_AGENT.typescript = typescript;\n  }\n\n  if (props.appInfo) {\n    this._setAppInfo(props.appInfo);\n  }\n\n  this._prepResources();\n\n  this._setApiKey(key);\n\n  this.errors = require('./Error');\n  this.webhooks = require('./Webhooks');\n  this._prevRequestMetrics = [];\n  this._enableTelemetry = props.telemetry !== false; // Expose StripeResource on the instance too\n\n  this.StripeResource = Stripe.StripeResource;\n}\n\nStripe.errors = require('./Error');\nStripe.webhooks = require('./Webhooks');\nStripe.prototype = {\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   host: 'example.com',\n   *   port: '8080',\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setHost: function setHost(host, port, protocol) {\n    emitWarning('`setHost` is deprecated. Use the `host` config option instead.');\n\n    this._setApiField('host', host);\n\n    if (port) {\n      this.setPort(port);\n    }\n\n    if (protocol) {\n      this.setProtocol(protocol);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setProtocol: function setProtocol(protocol) {\n    emitWarning('`setProtocol` is deprecated. Use the `protocol` config option instead.');\n\n    this._setApiField('protocol', protocol.toLowerCase());\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   port: 3000,\n   * });\n   *\n   */\n  setPort: function setPort(port) {\n    emitWarning('`setPort` is deprecated. Use the `port` config option instead.');\n\n    this._setApiField('port', port);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   apiVersion: API_VERSION,\n   * });\n   *\n   */\n  setApiVersion: function setApiVersion(version) {\n    emitWarning('`setApiVersion` is deprecated. Use the `apiVersion` config or request option instead.');\n\n    if (version) {\n      this._setApiField('version', version);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY);\n   *\n   * Or, for Stripe Connect, use `stripeAccount` instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   stripeAccount: 'acct_...',\n   * });\n   *\n   * Or, to use a different apiKey on a given request:\n   *\n   * stripe.customers.create(params, {apiKey: 'sk_test_...'});\n   */\n  setApiKey: function setApiKey(key) {\n    emitWarning('`setApiKey` is deprecated. Use the `apiKey` request option instead.');\n\n    this._setApiKey(key);\n  },\n\n  /**\n   * @private\n   */\n  _setApiKey: function _setApiKey(key) {\n    if (key) {\n      this._setApiField('auth', \"Bearer \".concat(key));\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   timeout: TIMEOUT_MS,\n   * });\n   */\n  setTimeout: function setTimeout(timeout) {\n    emitWarning('`setTimeout` is deprecated. Use the `timeout` config or request option instead.');\n\n    this._setApiField('timeout', timeout == null ? DEFAULT_TIMEOUT : timeout);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   appInfo: {\n   *     name: 'MyPlugin',\n   *     version: '1.4.2',\n   *     url: 'https://myplugin.com',\n   *     partner_id: '1234',\n   *   },\n   * });\n   */\n  setAppInfo: function setAppInfo(info) {\n    emitWarning('`setAppInfo` is deprecated. Use the `appInfo` config option instead.');\n\n    this._setAppInfo(info);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setAppInfo: function _setAppInfo(info) {\n    if (info && typeof info !== 'object') {\n      throw new Error('AppInfo must be an object.');\n    }\n\n    if (info && !info.name) {\n      throw new Error('AppInfo.name is required');\n    }\n\n    info = info || {};\n    var appInfo = APP_INFO_PROPERTIES.reduce(function (accum, prop) {\n      if (typeof info[prop] == 'string') {\n        accum = accum || {};\n        accum[prop] = info[prop];\n      }\n\n      return accum;\n    }, undefined); // Kill the cached UA string because it may no longer be valid\n\n    Stripe.USER_AGENT_SERIALIZED = undefined;\n    this._appInfo = appInfo;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const ProxyAgent = require('https-proxy-agent');\n   * const stripe = new Stripe(API_KEY, {\n   *   httpAgent: new ProxyAgent(process.env.http_proxy),\n   * });\n   *\n   */\n  setHttpAgent: function setHttpAgent(agent) {\n    emitWarning('`setHttpAgent` is deprecated. Use the `httpAgent` config option instead.');\n\n    this._setApiField('agent', agent);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiField: function _setApiField(key, value) {\n    this._api[key] = value;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getApiField: function getApiField(key) {\n    return this._api[key];\n  },\n  setClientId: function setClientId(clientId) {\n    this._clientId = clientId;\n  },\n  getClientId: function getClientId() {\n    return this._clientId;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getConstant: function getConstant(c) {\n    switch (c) {\n      case 'DEFAULT_HOST':\n        return DEFAULT_HOST;\n\n      case 'DEFAULT_PORT':\n        return DEFAULT_PORT;\n\n      case 'DEFAULT_BASE_PATH':\n        return DEFAULT_BASE_PATH;\n\n      case 'DEFAULT_API_VERSION':\n        return DEFAULT_API_VERSION;\n\n      case 'DEFAULT_TIMEOUT':\n        return DEFAULT_TIMEOUT;\n\n      case 'MAX_NETWORK_RETRY_DELAY_SEC':\n        return MAX_NETWORK_RETRY_DELAY_SEC;\n\n      case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n        return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    }\n\n    return Stripe[c];\n  },\n  getMaxNetworkRetries: function getMaxNetworkRetries() {\n    return this.getApiField('maxNetworkRetries');\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   maxNetworkRetries: 2,\n   * });\n   *\n   */\n  setMaxNetworkRetries: function setMaxNetworkRetries(maxNetworkRetries) {\n    this._setApiNumberField('maxNetworkRetries', maxNetworkRetries);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiNumberField: function _setApiNumberField(prop, n, defaultVal) {\n    var val = utils.validateInteger(prop, n, defaultVal);\n\n    this._setApiField(prop, val);\n  },\n  getMaxNetworkRetryDelay: function getMaxNetworkRetryDelay() {\n    return MAX_NETWORK_RETRY_DELAY_SEC;\n  },\n  getInitialNetworkRetryDelay: function getInitialNetworkRetryDelay() {\n    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent and uses a cached version for a slight\n   * speed advantage.\n   */\n  getClientUserAgent: function getClientUserAgent(cb) {\n    if (Stripe.USER_AGENT_SERIALIZED) {\n      return cb(Stripe.USER_AGENT_SERIALIZED);\n    }\n\n    this.getClientUserAgentSeeded(Stripe.USER_AGENT, function (cua) {\n      Stripe.USER_AGENT_SERIALIZED = cua;\n      cb(Stripe.USER_AGENT_SERIALIZED);\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent by encoding a seeded object and\n   * fetching a uname from the system.\n   */\n  getClientUserAgentSeeded: function getClientUserAgentSeeded(seed, cb) {\n    var _this = this;\n\n    utils.safeExec('uname -a', function (err, uname) {\n      var userAgent = {};\n\n      for (var field in seed) {\n        userAgent[field] = encodeURIComponent(seed[field]);\n      } // URI-encode in case there are unusual characters in the system's uname.\n\n\n      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n\n      if (_this._appInfo) {\n        userAgent.application = _this._appInfo;\n      }\n\n      cb(JSON.stringify(userAgent));\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getAppInfoAsString: function getAppInfoAsString() {\n    if (!this._appInfo) {\n      return '';\n    }\n\n    var formatted = this._appInfo.name;\n\n    if (this._appInfo.version) {\n      formatted += \"/\".concat(this._appInfo.version);\n    }\n\n    if (this._appInfo.url) {\n      formatted += \" (\".concat(this._appInfo.url, \")\");\n    }\n\n    return formatted;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   telemetry: false,\n   * });\n   *\n   */\n  setTelemetryEnabled: function setTelemetryEnabled(enableTelemetry) {\n    emitWarning('`setTelemetryEnabled` is deprecated. Use the `telemetry` config option instead.');\n    this._enableTelemetry = enableTelemetry;\n  },\n  getTelemetryEnabled: function getTelemetryEnabled() {\n    return this._enableTelemetry;\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _prepResources: function _prepResources() {\n    for (var name in resources) {\n      this[utils.pascalToCamelCase(name)] = new resources[name](this);\n    }\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _getPropsFromConfig: function _getPropsFromConfig(config) {\n    // If config is null or undefined, just bail early with no props\n    if (!config) {\n      return {};\n    } // config can be an object or a string\n\n\n    var isString = typeof config === 'string';\n    var isObject = config === Object(config) && !Array.isArray(config);\n\n    if (!isObject && !isString) {\n      throw new Error('Config must either be an object or a string');\n    } // If config is a string, we assume the old behavior of passing in a string representation of the api version\n\n\n    if (isString) {\n      return {\n        apiVersion: config\n      };\n    } // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n\n\n    var values = Object.keys(config).filter(function (value) {\n      return !ALLOWED_CONFIG_PROPERTIES.includes(value);\n    });\n\n    if (values.length > 0) {\n      throw new Error(\"Config object may only contain the following: \".concat(ALLOWED_CONFIG_PROPERTIES.join(', ')));\n    }\n\n    return config;\n  }\n};\nmodule.exports = Stripe; // expose constructor as a named property to enable mocking with Sinon.JS\n\nmodule.exports.Stripe = Stripe; // Allow use with the TypeScript compiler without `esModuleInterop`.\n// We may also want to add `Object.defineProperty(exports, \"__esModule\", {value: true});` in the future, so that Babel users will use the `default` version.\n\nmodule.exports.default = Stripe;","map":null,"metadata":{},"sourceType":"script"}