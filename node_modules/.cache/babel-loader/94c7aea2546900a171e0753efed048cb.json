{"ast":null,"code":"import _regeneratorRuntime from \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/src/components/checkout/CheckoutForm.jsx\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\n\nvar CheckoutForm = function CheckoutForm(_ref) {\n  var price = _ref.price,\n      onSuccessfulCheckout = _ref.onSuccessfulCheckout;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isProcessing = _useState2[0],\n      setProcessingTo = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkoutError = _useState4[0],\n      setCheckoutError = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      test = _useState6[0],\n      setTest = _useState6[1];\n\n  var stripe = useStripe();\n  var elements = useElements(); // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  var handleCardDetailsChange = function handleCardDetailsChange(ev) {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  var handleFormSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(ev) {\n      var billingDetails, cardElement, _ref3, clientSecret, paymentMethodReq, _ref4, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ev.preventDefault();\n              billingDetails = {\n                name: \"juan\",\n                email: \"as@as.com\",\n                address: {\n                  city: \"moreda\",\n                  line1: \"yes\",\n                  state: \"of mind\",\n                  postal_code: \"33500\"\n                }\n              };\n              setProcessingTo(true);\n              cardElement = elements.getElement(\"card\");\n              _context.prev = 4;\n              _context.next = 7;\n              return axios.post(\"http://localhost:9000/stripe\", {\n                amount: price * 100\n              });\n\n            case 7:\n              _ref3 = _context.sent;\n              clientSecret = _ref3.data;\n              _context.next = 11;\n              return stripe.createPaymentMethod({\n                type: \"card\",\n                card: cardElement,\n                billing_details: billingDetails\n              });\n\n            case 11:\n              paymentMethodReq = _context.sent;\n\n              if (!paymentMethodReq.error) {\n                _context.next = 16;\n                break;\n              }\n\n              setCheckoutError(paymentMethodReq.error.message);\n              setProcessingTo(false);\n              return _context.abrupt(\"return\");\n\n            case 16:\n              _context.next = 18;\n              return stripe.confirmCardPayment(clientSecret, {\n                payment_method: paymentMethodReq.paymentMethod.id\n              });\n\n            case 18:\n              _ref4 = _context.sent;\n              error = _ref4.error;\n\n              if (!error) {\n                _context.next = 24;\n                break;\n              }\n\n              setCheckoutError(error.message);\n              setProcessingTo(false);\n              return _context.abrupt(\"return\");\n\n            case 24:\n              onSuccessfulCheckout();\n              _context.next = 30;\n              break;\n\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context[\"catch\"](4);\n              setCheckoutError(_context.t0.message);\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[4, 27]]);\n    }));\n\n    return function handleFormSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n\n  var iframeStyles = {\n    base: {\n      color: \"#fff\",\n      fontSize: \"16px\",\n      iconColor: \"#fff\",\n      \"::placeholder\": {\n        color: \"#87bbfd\"\n      }\n    },\n    invalid: {\n      iconColor: \"#FFC7EE\",\n      color: \"#FFC7EE\"\n    },\n    complete: {\n      iconColor: \"#cbf4c9\"\n    }\n  };\n  var cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n  return React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, test), React.createElement(CardElement, {\n    onChange: handleCardDetailsChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    disabled: isProcessing || !stripe,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, isProcessing ? \"Processing...\" : \"Pay $\".concat(price)));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/src/components/checkout/CheckoutForm.jsx"],"names":["React","useState","CardElement","useStripe","useElements","axios","CheckoutForm","price","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","test","setTest","stripe","elements","handleCardDetailsChange","ev","error","message","handleFormSubmit","preventDefault","billingDetails","name","email","address","city","line1","state","postal_code","cardElement","getElement","post","amount","clientSecret","data","createPaymentMethod","type","card","billing_details","paymentMethodReq","confirmCardPayment","payment_method","paymentMethod","id","iframeStyles","base","color","fontSize","iconColor","invalid","complete","cardElementOpts","iconStyle","style","hidePostalCode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\n\nconst CheckoutForm = ({ price, onSuccessfulCheckout }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  const [test, setTest] = useState(null);\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = (ev) => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleFormSubmit = async (ev) => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: \"juan\",\n      email: \"as@as.com\",\n      address: {\n        city: \"moreda\",\n        line1: \"yes\",\n        state: \"of mind\",\n        postal_code: \"33500\",\n      },\n    };\n\n    setProcessingTo(true);\n\n    const cardElement = elements.getElement(\"card\");\n\n    try {\n      const { data: clientSecret } = await axios.post(\n        \"http://localhost:9000/stripe\",\n        {\n          amount: price * 100,\n        }\n      );\n\n      const paymentMethodReq = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: cardElement,\n        billing_details: billingDetails,\n      });\n\n      if (paymentMethodReq.error) {\n        setCheckoutError(paymentMethodReq.error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      const { error } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodReq.paymentMethod.id,\n      });\n\n      if (error) {\n        setCheckoutError(error.message);\n        setProcessingTo(false);\n        return;\n      }\n\n      onSuccessfulCheckout();\n    } catch (err) {\n      setCheckoutError(err.message);\n    }\n  };\n\n  // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n  const iframeStyles = {\n    base: {\n      color: \"#fff\",\n      fontSize: \"16px\",\n      iconColor: \"#fff\",\n      \"::placeholder\": {\n        color: \"#87bbfd\",\n      },\n    },\n    invalid: {\n      iconColor: \"#FFC7EE\",\n      color: \"#FFC7EE\",\n    },\n    complete: {\n      iconColor: \"#cbf4c9\",\n    },\n  };\n\n  const cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true,\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <p>{test}</p>\n      <CardElement onChange={handleCardDetailsChange} />\n\n      {/* TIP always disable your submit button while processing payments */}\n      <button disabled={isProcessing || !stripe}>\n        {isProcessing ? \"Processing...\" : `Pay $${price}`}\n      </button>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}