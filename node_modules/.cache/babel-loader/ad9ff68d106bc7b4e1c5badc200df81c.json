{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar utils = require('./utils');\n\nvar _require = require('./Error'),\n    StripeError = _require.StripeError;\n\nvar StreamProcessingError =\n/*#__PURE__*/\nfunction (_StripeError) {\n  _inherits(StreamProcessingError, _StripeError);\n\n  function StreamProcessingError() {\n    _classCallCheck(this, StreamProcessingError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamProcessingError).apply(this, arguments));\n  }\n\n  return StreamProcessingError;\n}(StripeError); // Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\n\n\nvar multipartDataGenerator = function multipartDataGenerator(method, data, headers) {\n  var segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n  headers['Content-Type'] = \"multipart/form-data; boundary=\".concat(segno);\n  var buffer = Buffer.alloc(0);\n\n  function push(l) {\n    var prevBuffer = buffer;\n    var newBuffer = l instanceof Buffer ? l : Buffer.from(l);\n    buffer = Buffer.alloc(prevBuffer.length + newBuffer.length + 2);\n    prevBuffer.copy(buffer);\n    newBuffer.copy(buffer, prevBuffer.length);\n    buffer.write('\\r\\n', buffer.length - 2);\n  }\n\n  function q(s) {\n    return \"\\\"\".concat(s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' '), \"\\\"\");\n  }\n\n  var flattenedData = utils.flattenAndStringify(data);\n\n  for (var k in flattenedData) {\n    var v = flattenedData[k];\n    push(\"--\".concat(segno));\n\n    if (v.hasOwnProperty('data')) {\n      push(\"Content-Disposition: form-data; name=\".concat(q(k), \"; filename=\").concat(q(v.name || 'blob')));\n      push(\"Content-Type: \".concat(v.type || 'application/octet-stream'));\n      push('');\n      push(v.data);\n    } else {\n      push(\"Content-Disposition: form-data; name=\".concat(q(k)));\n      push('');\n      push(v);\n    }\n  }\n\n  push(\"--\".concat(segno, \"--\"));\n  return buffer;\n};\n\nvar streamProcessor = function streamProcessor(method, data, headers, callback) {\n  var bufferArray = [];\n  data.file.data.on('data', function (line) {\n    bufferArray.push(line);\n  }).once('end', function () {\n    var bufferData = Object.assign({}, data);\n    bufferData.file.data = Buffer.concat(bufferArray);\n    var buffer = multipartDataGenerator(method, bufferData, headers);\n    callback(null, buffer);\n  }).on('error', function (err) {\n    callback(new StreamProcessingError({\n      message: 'An error occurred while attempting to process the file for upload.',\n      detail: err\n    }), null);\n  });\n};\n\nvar multipartRequestDataProcessor = function multipartRequestDataProcessor(method, data, headers, callback) {\n  data = data || {};\n\n  if (method !== 'POST') {\n    return callback(null, utils.stringifyRequestData(data));\n  }\n\n  var isStream = utils.checkForStream(data);\n\n  if (isStream) {\n    return streamProcessor(method, data, headers, callback);\n  }\n\n  var buffer = multipartDataGenerator(method, data, headers);\n  return callback(null, buffer);\n};\n\nmodule.exports.multipartRequestDataProcessor = multipartRequestDataProcessor;","map":null,"metadata":{},"sourceType":"script"}