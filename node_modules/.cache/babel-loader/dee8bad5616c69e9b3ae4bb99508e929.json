{"ast":null,"code":"import _regeneratorRuntime from \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/src/components/checkout/CheckoutForm.jsx\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { CardNumberElement, CardExpiryElement, CardCVCElement, injectStripe } from \"react-stripe-elements\";\nimport axios from \"axios\";\n\nvar CheckoutForm = function CheckoutForm(_ref) {\n  var cart = _ref.cart,\n      stripe = _ref.stripe,\n      history = _ref.history;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isProcessing = _useState2[0],\n      setProcessingTo = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkoutError = _useState4[0],\n      setCheckoutError = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      test = _useState6[0],\n      setTest = _useState6[1]; // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n\n  var handleCardDetailsChange = function handleCardDetailsChange(ev) {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  var handleFormSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(ev) {\n      var billingDetails, _ref3, error, token, order;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ev.preventDefault();\n              billingDetails = {\n                name: \"juan\",\n                email: \"as@as.com\",\n                address: {\n                  city: \"moreda\",\n                  line1: \"yes\",\n                  state: \"of mind\",\n                  postal_code: \"33500\"\n                }\n              };\n              setProcessingTo(true);\n              _context.next = 5;\n              return stripe.createToken();\n\n            case 5:\n              _ref3 = _context.sent;\n              error = _ref3.error;\n              token = _ref3.token;\n\n              if (error) {\n                console.log(error);\n              }\n\n              if (token) {\n                console.log(token);\n              }\n\n              _context.next = 12;\n              return axios.post(\"http://localhost:9000/api/stripe\", {\n                // amount: total.toString().replace(\".\", \"\"),\n                source: token.id,\n                //  receipt_email: email,\n                amount: \"1000\",\n                receipt_email: \"test@setTest.com\"\n              }).catch(function (e) {\n                console.log(e);\n              });\n\n            case 12:\n              order = _context.sent;\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function handleFormSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n\n  var iframeStyles = {\n    base: {\n      color: \"#fff\",\n      fontSize: \"16px\",\n      iconColor: \"#fff\",\n      \"::placeholder\": {\n        color: \"#87bbfd\"\n      }\n    },\n    invalid: {\n      iconColor: \"#FFC7EE\",\n      color: \"#FFC7EE\"\n    },\n    complete: {\n      iconColor: \"#cbf4c9\"\n    }\n  };\n  var cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n  return React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, test), React.createElement(CardElement, {\n    onChange: handleCardDetailsChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    disabled: isProcessing || !stripe,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, isProcessing ? \"Processing...\" : \"Pay $\".concat(price)));\n}; //export default CheckoutForm;\n\n\nexport default injectStripe(CheckoutForm);","map":{"version":3,"sources":["/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/store/frontEnd/src/components/checkout/CheckoutForm.jsx"],"names":["React","useState","CardElement","useStripe","useElements","CardNumberElement","CardExpiryElement","CardCVCElement","injectStripe","axios","CheckoutForm","cart","stripe","history","isProcessing","setProcessingTo","checkoutError","setCheckoutError","test","setTest","handleCardDetailsChange","ev","error","message","handleFormSubmit","preventDefault","billingDetails","name","email","address","city","line1","state","postal_code","createToken","token","console","log","post","source","id","amount","receipt_email","catch","e","order","iframeStyles","base","color","fontSize","iconColor","invalid","complete","cardElementOpts","iconStyle","style","hidePostalCode","price"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport {\n  CardNumberElement,\n  CardExpiryElement,\n  CardCVCElement,\n  injectStripe,\n} from \"react-stripe-elements\";\nimport axios from \"axios\";\n\nconst CheckoutForm = ({ cart, stripe, history }) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  const [test, setTest] = useState(null);\n\n  // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = (ev) => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleFormSubmit = async (ev) => {\n    ev.preventDefault();\n\n    const billingDetails = {\n      name: \"juan\",\n      email: \"as@as.com\",\n      address: {\n        city: \"moreda\",\n        line1: \"yes\",\n        state: \"of mind\",\n        postal_code: \"33500\",\n      },\n    };\n\n    setProcessingTo(true);\n\n    const { error, token } = await stripe.createToken();\n    if (error) {\n      console.log(error);\n    }\n    if (token) {\n      console.log(token);\n    }\n    const order = await axios\n      .post(\"http://localhost:9000/api/stripe\", {\n        // amount: total.toString().replace(\".\", \"\"),\n        source: token.id,\n        //  receipt_email: email,\n        amount: \"1000\",\n        receipt_email: \"test@setTest.com\",\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n  const iframeStyles = {\n    base: {\n      color: \"#fff\",\n      fontSize: \"16px\",\n      iconColor: \"#fff\",\n      \"::placeholder\": {\n        color: \"#87bbfd\",\n      },\n    },\n    invalid: {\n      iconColor: \"#FFC7EE\",\n      color: \"#FFC7EE\",\n    },\n    complete: {\n      iconColor: \"#cbf4c9\",\n    },\n  };\n\n  const cardElementOpts = {\n    iconStyle: \"solid\",\n    style: iframeStyles,\n    hidePostalCode: true,\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <p>{test}</p>\n      <CardElement onChange={handleCardDetailsChange} />\n\n      {/* TIP always disable your submit button while processing payments */}\n      <button disabled={isProcessing || !stripe}>\n        {isProcessing ? \"Processing...\" : `Pay $${price}`}\n      </button>\n    </form>\n  );\n};\n\n//export default CheckoutForm;\nexport default injectStripe(CheckoutForm);\n"]},"metadata":{},"sourceType":"module"}