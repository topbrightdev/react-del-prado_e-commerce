{"ast":null,"code":"import _regeneratorRuntime from \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/src/components/checkout/checkoutForm.jsx\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nvar CheckoutForm = function CheckoutForm() {\n  var stripe = useStripe();\n  var elements = useElements();\n\n  var handleSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(event) {\n      var cardElement, _ref2, error, paymentMethod;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Block native form submission.\n              event.preventDefault();\n\n              if (!(!stripe || !elements)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              // Get a reference to a mounted CardElement. Elements knows how\n              // to find your CardElement because there can only ever be one of\n              // each type of element.\n              cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n              _context.next = 6;\n              return stripe.createPaymentMethod({\n                type: \"card\",\n                card: cardElement\n              });\n\n            case 6:\n              _ref2 = _context.sent;\n              error = _ref2.error;\n              paymentMethod = _ref2.paymentMethod;\n\n              if (error) {\n                console.log(\"[error]\", error);\n              } else {\n                console.log(\"[PaymentMethod]\", paymentMethod);\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(CardElement, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Pay\"));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/home/jarri/Desktop/lenovo2020/projects-web/eCommerce/template-store1/src/components/checkout/checkoutForm.jsx"],"names":["CardElement","useStripe","useElements","CheckoutForm","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","createPaymentMethod","type","card","error","paymentMethod","console","log"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,yBAApD;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,MAAMI,QAAQ,GAAGH,WAAW,EAA5B;;AAEA,MAAMI,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG,iBAAOC,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnB;AACAA,cAAAA,KAAK,CAACC,cAAN;;AAFmB,oBAIf,CAACJ,MAAD,IAAW,CAACC,QAJG;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAUnB;AACA;AACA;AACMI,cAAAA,WAba,GAaCJ,QAAQ,CAACK,UAAT,CAAoBV,WAApB,CAbD,EAenB;;AAfmB;AAAA,qBAgBoBI,MAAM,CAACO,mBAAP,CAA2B;AAChEC,gBAAAA,IAAI,EAAE,MAD0D;AAEhEC,gBAAAA,IAAI,EAAEJ;AAF0D,eAA3B,CAhBpB;;AAAA;AAAA;AAgBXK,cAAAA,KAhBW,SAgBXA,KAhBW;AAgBJC,cAAAA,aAhBI,SAgBJA,aAhBI;;AAqBnB,kBAAID,KAAJ,EAAW;AACTE,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACD,eAFD,MAEO;AACLE,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,aAA/B;AACD;;AAzBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZT,YAAY;AAAA;AAAA;AAAA,KAAlB;;AA4BA,SACE;AAAM,IAAA,QAAQ,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACF,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,CADF;AAQD,CAxCD;;AA0CA,eAAeD,YAAf","sourcesContent":["import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log(\"[error]\", error);\n    } else {\n      console.log(\"[PaymentMethod]\", paymentMethod);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardElement />\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}